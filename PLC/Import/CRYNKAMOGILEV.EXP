

(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/_ExtraFB\/ControlFB' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fb_digout_signal
VAR_INPUT
	repair	:						BOOL	;
	out_signal_for_repair	:		BOOL	;
	use_smoothing	:			BOOL	;
	time_wait	:					TIME	:=	T#1s500ms	;
	input	:						BOOL	;

END_VAR
VAR_OUTPUT
	digout:							BOOL;
END_VAR
VAR
	perem_input:					BOOL	;
	TON_wait:						TON;
END_VAR
(* @END_DECLARATION := '0' *)
IF repair = FALSE
  THEN
    IF use_smoothing = FALSE
      THEN
        (*???? ?????? ??????????? ????? ?????*)
        digout:= input;
      ELSE
        (*???? ???? ???????? ??????? ?????? ? ?? ?????? ?????????????? ???????? ????????*)
        IF input <> perem_input
          THEN
            TON_wait( IN:=TRUE, PT:= time_wait);
          ELSE
            TON_wait( IN:=FALSE, PT:= time_wait);
        END_IF;
        IF TON_wait.Q = TRUE
          THEN
            digout:= input;
            perem_input:= input;
            TON_wait( IN:=FALSE, PT:= time_wait);
        END_IF;
    END_IF;
  ELSE
    digout:= out_signal_for_repair;
END_IF;
  
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/_ExtraFB\/ControlFB' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbPID
VAR_INPUT
	ACTUAL :REAL;		(* actual value, process variable *)
	SET_POINT:REAL;	(* desired value, set point *)
	KP:REAL;				(* proportionality const. (P)*)
	TN:REAL;				(* reset time (I) in sec *)
	TV:REAL;				(* rate time, derivative time (D) in sec*)
	Y_MANUAL:REAL;		(* Y is set to this value as long as MANUAL=TRUE *)
	Y_OFFSET:REAL;		(* offset for manipulated variable *)
	Y_MIN:REAL;			(* minimum value for manipulated variable *)
	Y_MAX:REAL;			(* maximum value for manipulated variable *)
	MANUAL:BOOL;		(* 	TRUE: manual: Y is not influenced by controller,
								FALSE: controller determines Y *)
	RESET:BOOL;			(* reset: set Y output to Y_OFFSET and reset integral part *)
END_VAR
VAR_OUTPUT
	Y:REAL;				(* manipulated variable, set value*)
	LIMITS_ACTIVE:BOOL:=FALSE;	(* true set value would exceed limits Y_MIN, Y_MAX *)
	OVERFLOW:BOOL:=FALSE;		(* overflow in integral part *)
END_VAR
VAR
	CLOCK:TON;
	I: INTEGRAL;
	D: DERIVATIVE;
	TMDIFF: DWORD;
	ERROR: REAL;
	INIT: BOOL:=TRUE;
	Y_ADDOFFSET: REAL;
	KPcopy:REAL;
	TNcopy:REAL;
	TVcopy:REAL;
	rIntermediateVar:REAL;
END_VAR


(* @END_DECLARATION := '0' *)
IF TN>0 AND KP<> 0 AND (NOT OVERFLOW OR RESET OR MANUAL) THEN
	ERROR := SET_POINT-ACTUAL;								(* Regeldifferenz *)

	IF RESET OR MANUAL OR INIT OR (KP<>KPcopy OR TN<>TNcopy OR TV<>TVcopy) THEN							(* Reset oder Handbetrieb *)
		I(RESET:=TRUE);
		D(RESET:=TRUE);
		OVERFLOW:=FALSE;
		LIMITS_ACTIVE:=FALSE;
		IF RESET OR INIT THEN
			Y := Y_OFFSET;
			INIT:=FALSE;
			Y_ADDOFFSET := 0;
		ELSIF MANUAL THEN
			Y := Y_MANUAL;
			rIntermediateVar:=I.OUT/TN+D.OUT*TV;
			Y_ADDOFFSET := Y_MANUAL-(Y_OFFSET+KP*(ERROR)+rIntermediateVar);
			(*Y_ADDOFFSET := Y_MANUAL-(Y_OFFSET+KP*(ERROR)+(I.OUT/TN+D.OUT*TV));*)
		ELSE
			Y_ADDOFFSET := Y - Y_OFFSET - KP*ERROR;
		END_IF
		TMDIFF:=0;
		CLOCK(IN:=FALSE);									(* Timer neu starten *)
		CLOCK(PT:=t#1h, IN:=TRUE);

		TNcopy := TN;
		TVcopy := TV;
		KPcopy := KP;
	ELSE
		CLOCK;												(* Timer abfragen *)
		TMDIFF:=TIME_TO_DWORD(CLOCK.ET);					(* Zeitdifferenz seit letztem Aufruf *)
	END_IF;

	IF TMDIFF>0 THEN
		CLOCK(IN:=FALSE);									(* Timer neu starten *)
		CLOCK(PT:=t#1h, IN:=TRUE);

		D(IN:=ERROR, TM:=TMDIFF, RESET:=FALSE);				(* Differential abschätzen *)
		I(IN:=ERROR, TM:=TMDIFF, RESET:=FALSE);				(* Integral abschätzen *)

		OVERFLOW := I.OVERFLOW;
		IF NOT OVERFLOW THEN
			Y:=Y_OFFSET+KP*(ERROR)+(I.OUT/TN+D.OUT*TV) + Y_ADDOFFSET;
			IF Y>1E30 OR Y<-1E30 THEN						(* Overflow steht bevor, darf aber eigentlich nicht passieren *)
				OVERFLOW:=TRUE;
			END_IF;

			LIMITS_ACTIVE:=FALSE;
			IF Y_MAX>Y_MIN AND Y>Y_MAX  THEN				(* Stellwert-Obergrenze überschritten *)
				LIMITS_ACTIVE:=TRUE;
				IF KP<>0 THEN
					I(IN:=(Y_MAX-Y)*TN/KP,TM:=1000,RESET:=FALSE);		(* Integral korrigieren *)
				END_IF
				Y:=Y_MAX;
			END_IF;
			IF Y_MAX>Y_MIN AND Y<Y_MIN THEN					(* Stellwert-Untergrenze unterschritten *)
				LIMITS_ACTIVE:=TRUE;
				IF KP<>0 THEN
					I(IN:=(Y_MIN-Y)*TN/KP,TM:=1000,RESET:=FALSE);		(* Integral korrigieren *)
				END_IF
				Y:=Y_MIN;
			END_IF;
		END_IF;
	ELSE
		CLOCK(PT:=t#1h,IN:=TRUE);
	END_IF;

END_IF;
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/_ExtraFB\/mathematical functions' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
(* function block to approximate the derivative of a value *)
(* to calculate this, always four values are used in order to be as exact as possible *)
FUNCTION_BLOCK DERIVATIVE
VAR_INPUT
	IN:REAL;						(* input variable *)
	TM:DWORD;					(* time since last call in msec *)
	RESET:BOOL;					(* reset: set OUT to zero *)
END_VAR
VAR_OUTPUT
	OUT:REAL;					(* derivative *)
END_VAR
VAR
	X3,X2,X1:REAL;
	T2,T1:DWORD;
	INIT:BOOL:=TRUE;
END_VAR
(* @END_DECLARATION := '0' *)
IF INIT OR RESET THEN
	X1:=IN;
	X2:=IN;
	X3:=IN;
	OUT:=0;
	INIT:=FALSE;
ELSE
	IF TM>0 THEN
		OUT:=(3*(IN-X3)+X1-X2)/((3*T2+4*T1+3*TM))*1000;
		X3:=X2;
		X2:=X1;
		X1:=IN;
		T2:=T1;
		T1:=TM;
	END_IF;
END_IF;
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/_ExtraFB\/mathematical functions' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
(* function block to approximate the integral of IN over the time *)
FUNCTION_BLOCK INTEGRAL
VAR_INPUT
	IN:REAL;						(* input variable *)
	TM:DWORD;					(* time since last call in msec *)
	RESET:BOOL;					(* reset: OUT is set to zero and OVERFLOW to false *)
END_VAR
VAR_OUTPUT
	OUT:REAL;					(* value of the integral *)
	OVERFLOW:BOOL:=FALSE;	(* overflow *)
END_VAR
VAR
END_VAR
(* @END_DECLARATION := '0' *)
IF RESET THEN
	OUT:=0;
	OVERFLOW:=FALSE;
ELSIF NOT OVERFLOW  THEN
	IF 1E38 - IN*TM < OUT OR -1E38 - IN*TM > OUT THEN
		OVERFLOW:=TRUE;
	ELSE
		OUT:=OUT+IN*TM/1000;
	END_IF;
END_IF;
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/_ExtraFB\/mathematical functions' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
(* linear transformation *)
FUNCTION_BLOCK LIN_TRAFO
VAR_INPUT
	IN: REAL;				(* input value*)
	IN_MIN:REAL;			(* minimum input value *)
	IN_MAX:REAL;			(* maximum input value *)
	OUT_MIN:REAL;		(* corresponding minimum output value *)
	OUT_MAX:REAL;		(* corresponding maximum output value *)
END_VAR
VAR_OUTPUT
	OUT: REAL;			(* output value *)
	ERROR: BOOL;		(* error: IN_MIN = IN_MAX or IN out of interval *)
END_VAR

VAR
	Diff: REAL;
END_VAR
(* @END_DECLARATION := '0' *)
Diff := IN_MAX-IN_MIN;
ERROR := (Diff=0) OR (IN<IN_MIN) OR (IN>IN_MAX);

IF NOT ERROR THEN
	OUT := (IN-IN_MIN)/Diff * (OUT_MAX-OUT_MIN) + OUT_MIN;
END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/AI_Conversion' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prAI_to_Value
VAR
	fbCleanWaterLeve: LIN_TRAFO;
	fbUsedWaterLeve: LIN_TRAFO;
	fbAccidLevel: LIN_TRAFO;
	fbAlkaliLevel: LIN_TRAFO;

END_VAR
(* @END_DECLARATION := '0' *)
(*
Conc_Line1:=(AI_Conc_Line1/32765)*100;

Conc_Line2:=(AI_Conc_Line2/32765)*100;

Conc_Line3:=(AI_Conc_Line3/32765)*100;

Conc_Line4:=(AI_Conc_Line4/32765)*100;

CleanWaterLevel:=(AI_CleanWaterLevel/32765)*100;

UsedWaterLevel:=(AI_UsedWaterLevel/32765)*100;

AccidLevel:=(AI_AccidLevel/32765)*100;

AlkaliLevel:=(AI_AlkaliLevel/32765)*100;
*)
fbCleanWaterLeve(
	IN:= AI_CleanWaterLevel,
	IN_MIN:= 0,
	IN_MAX:= 32762,
	OUT_MIN:= 0,
	OUT_MAX:= 40000,
	ERROR=> );
	CleanWaterLevel:= fbCleanWaterLeve.OUT;

fbUsedWaterLeve(
	IN:= AI_UsedWaterLevel,
	IN_MIN:= 0,
	IN_MAX:= 32762,
	OUT_MIN:= 0,
	OUT_MAX:= 40000,
	ERROR=> );
	UsedWaterLevel:= fbUsedWaterLeve.OUT;

fbAccidLevel(
	IN:= AI_AccidLevel,
	IN_MIN:= 0,
	IN_MAX:= 32762,
	OUT_MIN:= 0,
	OUT_MAX:= 40000,
	ERROR=> );
	AccidLevel:= fbAccidLevel.OUT;

fbAlkaliLevel(
	IN:= AlkaliLevel,
	IN_MIN:= 0,
	IN_MAX:= 32762,
	OUT_MIN:= 0,
	OUT_MAX:= 40000,
	ERROR=> );
	AlkaliLevel:= fbAlkaliLevel.OUT;
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/AI_Conversion' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prValue_to_AO
VAR
	PumpOut_1: LIN_TRAFO;
	PumpOut_2: LIN_TRAFO;
	PumpOut_3: LIN_TRAFO;
	PumpOut_4: LIN_TRAFO;

	HeaterOut_1: LIN_TRAFO;
	HeaterOut_2: LIN_TRAFO;
	HeaterOut_3: LIN_TRAFO;
	HeaterOut_4: LIN_TRAFO;
END_VAR
(* @END_DECLARATION := '0' *)
PumpOut_1(
	IN:= PumpSpeedSet_1,
	IN_MIN:= 0,
	IN_MAX:= 50,
	OUT_MIN:= 0,
	OUT_MAX:= 32762,
	ERROR=> );
	AO_PumpSpeedSet_1:= REAL_TO_WORD(PumpOut_1.OUT);

PumpOut_2(
	IN:= PumpSpeedSet_2,
	IN_MIN:= 0,
	IN_MAX:= 50,
	OUT_MIN:= 0,
	OUT_MAX:= 32762,
	ERROR=> );
	AO_PumpSpeedSet_2:= REAL_TO_WORD(PumpOut_2.OUT);

PumpOut_3(
	IN:= PumpSpeedSet_3,
	IN_MIN:= 0,
	IN_MAX:= 50,
	OUT_MIN:= 0,
	OUT_MAX:= 32762,
	ERROR=> );
	AO_PumpSpeedSet_3:= REAL_TO_WORD(PumpOut_3.OUT);

PumpOut_4(
	IN:= PumpSpeedSet_4,
	IN_MIN:= 0,
	IN_MAX:= 50,
	OUT_MIN:= 0,
	OUT_MAX:= 32762,
	ERROR=> );
	AO_PumpSpeedSet_4:= REAL_TO_WORD(PumpOut_4.OUT);


HeaterOut_1(
	IN:= HeaterPowerSet_1,
	IN_MIN:= 0,
	IN_MAX:= 100,
	OUT_MIN:= 0,
	OUT_MAX:= 32762,
	ERROR=> );
	AO_HeaterPowerSet_1:= REAL_TO_WORD(HeaterOut_1.OUT);

HeaterOut_2(
	IN:= HeaterPowerSet_2,
	IN_MIN:= 0,
	IN_MAX:= 100,
	OUT_MIN:= 0,
	OUT_MAX:= 32762,
	ERROR=> );
	AO_HeaterPowerSet_2:= REAL_TO_WORD(HeaterOut_2.OUT);


HeaterOut_3(
	IN:= HeaterPowerSet_3,
	IN_MIN:= 0,
	IN_MAX:= 100,
	OUT_MIN:= 0,
	OUT_MAX:= 32762,
	ERROR=> );
	AO_HeaterPowerSet_3:= REAL_TO_WORD(HeaterOut_3.OUT);

HeaterOut_4(
	IN:= HeaterPowerSet_4,
	IN_MIN:= 0,
	IN_MAX:= 100,
	OUT_MIN:= 0,
	OUT_MAX:= 32762,
	ERROR=> );
	AO_HeaterPowerSet_4:= REAL_TO_WORD(HeaterOut_4.OUT);
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Heater' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbHeater
VAR_INPUT
	xManualMode:			BOOL;
	xNoFeedback:			BOOL;
	wTautoSet:			REAL;
	wPowerManualSet:	REAL;
	wKp:					REAL;
	wKi:					REAL;
	wKd:					REAL;
	wMaxPower:			WORD;
	wMinPower:			WORD;
	wTget:					REAL;
	wFlawGet:				REAL;
	xInterlock:				BOOL;
	xPumpWorking:		BOOL;
END_VAR
VAR_IN_OUT
	wTmanualSet:			REAL;
END_VAR
VAR_OUTPUT
	wAO_Power:			REAL;
	wError:					WORD;
END_VAR
VAR
	fbAutoPID:				fbPID;
	tnNoFlaw:				TON;
END_VAR
(* @END_DECLARATION := '0' *)
IF xManualMode THEN
	IF (wTmanualSet > 0 OR xNoFeedback) AND wError = 0 THEN
		fbAutoPID(
			ACTUAL:= wTget,
			SET_POINT:= wTmanualSet,
			KP:= wKp,
			TN:= wKi,
			TV:= wKd,
			Y_MANUAL:= wPowerManualSet,
			Y_OFFSET:= ,
			Y_MIN:= wMinPower,
			Y_MAX:= wMaxPower,
			MANUAL:= xNoFeedback,
			RESET:= ,
			Y=> ,
			LIMITS_ACTIVE=> ,
			OVERFLOW=> );
			wAO_Power:= fbAutoPID.Y;
	ELSE
		wAO_Power:=0;
	END_IF
ELSE
	wTmanualSet:=wTautoSet;
	IF wTautoSet > 0 AND wError = 0 THEN
		fbAutoPID(
			ACTUAL:= wTget,
			SET_POINT:= wTautoSet,
			KP:= wKp,
			TN:= wKi,
			TV:= wKd,
			Y_MANUAL:= ,
			Y_OFFSET:= ,
			Y_MIN:= wMinPower,
			Y_MAX:= wMaxPower,
			MANUAL:=FALSE ,
			RESET:= ,
			Y=> ,
			LIMITS_ACTIVE=> ,
			OVERFLOW=> );
			wAO_Power:= fbAutoPID.Y;
	ELSE
		wAO_Power:=0;
	END_IF
END_IF



tnNoFlaw(IN:=  (NOT xPumpWorking) OR (wFlawGet = 0), PT:=T#1s, Q=>wError.0);
(*
IF tnNoFlaw.Q THEN
	wError.0:=TRUE;
END_IF
*)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Heater' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prHeater
VAR
	Heater_1:		fbHeater;
	Heater_2:		fbHeater;
	Heater_3:		fbHeater;
	Heater_4:		fbHeater;

END_VAR
(* @END_DECLARATION := '0' *)
Heater_1(
	xManualMode:= Heater_xManualMode_1,
	xNoFeedback:= Heater_xNoFeedback_1,
	wTautoSet:= Heater_AutoSetT_1,
	wPowerManualSet:= Heater_PowerSet_1,
	wKp:= Heater_Kp,
	wKi:= Heater_Ki,
	wKd:= Heater_Kd,
	wMaxPower:= Heater_wMaxPower,
	wMinPower:= Heater_wMinPower,
	wTget:= Heater_Tget_1,
	wFlawGet:= Pump_FlawGet_1,
	xPumpWorking:=Pump_FeedbackOn_1,
	xInterlock:= ,
	wTmanualSet:=Heater_ManualSetT_1,
	wAO_Power=> HeaterPowerSet_1,
	wError=> Heater_Error_1 );


Heater_2(
	xManualMode:= Heater_xManualMode_2,
	xNoFeedback:= Heater_xNoFeedback_2,
	wTautoSet:= Heater_AutoSetT_2,
	wPowerManualSet:= Heater_PowerSet_2,
	wKp:= Heater_Kp,
	wKi:= Heater_Ki,
	wKd:= Heater_Kd,
	wMaxPower:= Heater_wMaxPower,
	wMinPower:= Heater_wMinPower,
	wTget:= Heater_Tget_2,
	wFlawGet:= Pump_FlawGet_2,
	xPumpWorking:=Pump_FeedbackOn_2,
	xInterlock:= ,
	wTmanualSet:=Heater_ManualSetT_2,
	wAO_Power=> HeaterPowerSet_2,
	wError=> Heater_Error_2 );


Heater_3(
	xManualMode:= Heater_xManualMode_3,
	xNoFeedback:= Heater_xNoFeedback_3,
	wTautoSet:= Heater_AutoSetT_3,
	wPowerManualSet:= Heater_PowerSet_3,
	wKp:= Heater_Kp,
	wKi:= Heater_Ki,
	wKd:= Heater_Kd,
	wMaxPower:= Heater_wMaxPower,
	wMinPower:= Heater_wMinPower,
	wTget:= Heater_Tget_3,
	wFlawGet:= Pump_FlawGet_3,
	xPumpWorking:=Pump_FeedbackOn_3,
	xInterlock:= ,
	wTmanualSet:=Heater_ManualSetT_3,
	wAO_Power=> HeaterPowerSet_3,
	wError=> Heater_Error_3 );


Heater_4(
	xManualMode:= Heater_xManualMode_4,
	xNoFeedback:= Heater_xNoFeedback_4,
	wTautoSet:= Heater_AutoSetT_4,
	wPowerManualSet:= Heater_PowerSet_4,
	wKp:= Heater_Kp,
	wKi:= Heater_Ki,
	wKd:= Heater_Kd,
	wMaxPower:= Heater_wMaxPower,
	wMinPower:= Heater_wMinPower,
	wTget:= Heater_Tget_4,
	wFlawGet:= Pump_FlawGet_4,
	xPumpWorking:=Pump_FeedbackOn_4,
	xInterlock:= ,
	wTmanualSet:=Heater_ManualSetT_4,
	wAO_Power=> HeaterPowerSet_4,
	wError=> Heater_Error_4 );
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Pump' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbPumpPID
VAR_INPUT
	xManualMode:			BOOL;
	xOnAuto:				BOOL;
	xInRotationFlg:		BOOL;

	xNoFeedback:			BOOL;
	wFlawAutoSet:		REAL;
	wFlawManualSet:		REAL;
	wVelocitySet:			REAL;
	wFlawGet:				REAL;
	wKp:					REAL;
	wKi:					REAL;
	wKd:					REAL;
	wMaxSpeed:			WORD;
	wMinSpeed:			WORD;

	xInvertorNorm:			BOOL;

	(*xInterlock:				BOOL;*)
END_VAR
VAR_IN_OUT

	xOnManual:			BOOL;
	xResetErr:				BOOL;

END_VAR
VAR_OUTPUT
	xDO_On:				BOOL;
	wAO_SpeedSet:		REAL;
	wError:					WORD;
	wState:				WORD;
END_VAR
VAR
	fbAutoPID:				fbPID;
	(*tnInterlockOn:			TON;*)
	tnNoFlaw:				TON;
	rSetPrm:				REAL;
	xSetManual:			BOOL;
	rtManual:				R_TRIG;
	rtAuto:					R_TRIG;
	ftManual:				F_TRIG;
	ftAuto:					F_TRIG;
	RESET: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
rtManual(CLK:=xOnManual);
rtAuto(CLK:= xOnAuto);
ftManual(CLK:=xOnManual);
ftAuto(CLK:= xOnAuto);

IF ftManual.Q OR ftAuto.Q THEN
	RESET:=TRUE;;
END_IF
IF rtManual.Q OR rtAuto.Q THEN
	RESET:=FALSE;
END_IF

IF xManualMode THEN

		fbAutoPID(
		ACTUAL:= wFlawGet,
		SET_POINT:= (*wFlawManualSet*)rSetPrm,
		KP:= wKp,
		TN:= wKi,
		TV:= wKd,
		Y_MANUAL:=  wVelocitySet,
		Y_OFFSET:= ,
		Y_MIN:= wMinSpeed,
		Y_MAX:= wMaxSpeed,
		MANUAL:= xNoFeedback,
		RESET:= RESET,
		Y=> ,
		LIMITS_ACTIVE=> , 
		OVERFLOW=> );
		(*RESET:=FALSE;*)
		wAO_SpeedSet:= fbAutoPID.Y;

	IF xOnManual AND wError = 0 THEN
		xDO_On:=TRUE;
		rSetPrm:=wFlawManualSet;
	ELSE
		wAO_SpeedSet:=0;
		rSetPrm:=0;
		xDO_On:= FALSE;
	END_IF

ELSE

	(*IF wFlawAutoSet > 0 THEN*)
		fbAutoPID(
		ACTUAL:= wFlawGet,
		SET_POINT:= (*wFlawAutoSet*)rSetPrm,
		KP:= wKp,
		TN:= wKi,
		TV:= wKd,
		Y_MANUAL:= ,
		Y_OFFSET:= ,
		Y_MIN:= wMinSpeed,
		Y_MAX:= wMaxSpeed,
		MANUAL:= FALSE,
		RESET:=RESET ,
		Y=> ,
		LIMITS_ACTIVE=> ,
		OVERFLOW=> );
		(*RESET:=FALSE;*)
		wAO_SpeedSet:= fbAutoPID.Y;
	(*ELSE
		wAO_SpeedSet:=0;
	END_IF*)
	IF xOnAuto AND wError = 0 THEN
		xDO_On:=TRUE;
		rSetPrm:=wFlawAutoSet;
	ELSE
		wAO_SpeedSet:=0;
		rSetPrm:=0;
		xDO_On:= FALSE;
	END_IF
	xOnManual:=xOnAuto;

END_IF




tnNoFlaw(IN:=xDO_On AND (wFlawGet = 0), PT:=T#300s, Q=>wError.0);


IF (xDO_On AND (NOT xInRotationFlg)) OR (xInRotationFlg AND (NOT xDO_On)) THEN
	wState:=1;
ELSIF xDO_On AND xInRotationFlg THEN
	wState:=2;
ELSIF NOT (xDO_On OR xInRotationFlg) THEN
	wState:=0;
END_IF

IF NOT xInvertorNorm THEN
	wError.1:=TRUE;
ELSE
	wError.1:=FALSE;
END_IF
IF xResetErr THEN

	wError:=0;
END_IF
(*
IF tnNoFlaw.Q THEN
	wError.0:=TRUE;
END_IF
*)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Pump' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prPump
VAR

	Pump_1:	fbPumpPID;
	Pump_2:	fbPumpPID;
	Pump_3:	fbPumpPID;
	Pump_4:	fbPumpPID;

	xResetErr: BOOL;

	PA1:		fbValve;
	PA2:		fbValve;
	PA3:		fbValve;
	PA4:		fbValve;
	PA11:		fbValve;
	PA12:		fbValve;

	tnOnRemotePump_1	:	TON;
	tnOnRemotePump_2	:	TON;
	tnOnRemotePump_3	:	TON;
	tnOnRemotePump_4	:	TON;

	tnOnRemotePump_1_1	:	TON;
	tnOnRemotePump_1_2	:	TON;
	tnOnRemotePump_1_3	:	TON;

	tnOffRemotePump_1_1	:	TON;
	tnOffRemotePump_1_2	:	TON;
	tnOffRemotePump_1_3	:	TON;

	tnOffRemotePump_1	:	TON;
	tnOffRemotePump_2	:	TON;
	tnOffRemotePump_3	:	TON;
	tnOffRemotePump_4	:	TON;

	rtOffRemotePomp1:	R_TRIG;
	rtOffRemotePomp2:	R_TRIG;

	rtOffRemotePomp1_1:	R_TRIG;
	rtOffRemotePomp1_2:	R_TRIG;
	rtOffRemotePomp1_3:	R_TRIG;


END_VAR
(* @END_DECLARATION := '0' *)
Pump_1(
	xManualMode:= Pump_ManualMode_1,
	xInRotationFlg:=Pump_FeedbackOn_1,
	xOnAuto:= Pump_OnAuto_1,
	xNoFeedback:= Pump_NoFeedback_1,
	wFlawAutoSet:= Pump_FlawAutoSet_1,
	wFlawManualSet:= Pump_FlawManualSet_1,
	wVelocitySet:= Pump_VelocitySet_1,
	wFlawGet:= Pump_FlawGet_1,
	wKp:= Pump_Kp,
	wKi:= Pump_Ki,
	wKd:= Pump_Kd,
	xInvertorNorm:= Pump_InvNorm_1,
	wMaxSpeed:= Pump_MaxSpeed,
	wMinSpeed:= Pump_MinSpeed,
	xOnManual:= Pump_OnManual_1,
	xResetErr:= xResetAlmAll,
	xDO_On=> DO_PumpOn_1,
	wState=>Pump_State_1,
	wAO_SpeedSet=> PumpSpeedSet_1,
	wError=> Pump_Error_1);


Pump_2(
	xManualMode:= Pump_ManualMode_2,
	xInRotationFlg:=Pump_FeedbackOn_2,
	xOnAuto:= Pump_OnAuto_2,
	xNoFeedback:= Pump_NoFeedback_2,
	wFlawAutoSet:= Pump_FlawAutoSet_2,
	wFlawManualSet:= Pump_FlawManualSet_2,
	wVelocitySet:= Pump_VelocitySet_2,
	wFlawGet:= Pump_FlawGet_2,
	wKp:= Pump_Kp,
	wKi:= Pump_Ki,
	wKd:= Pump_Kd,
	xInvertorNorm:= Pump_InvNorm_2,
	wMaxSpeed:= Pump_MaxSpeed,
	wMinSpeed:= Pump_MinSpeed,
	xOnManual:= Pump_OnManual_2,
	xResetErr:= xResetAlmAll,
	xDO_On=> DO_PumpOn_2,
	wState=>Pump_State_2,
	wAO_SpeedSet=> PumpSpeedSet_2,
	wError=> Pump_Error_2);


Pump_3(
	xManualMode:= Pump_ManualMode_3,
	xInRotationFlg:=Pump_FeedbackOn_3,
	xOnAuto:= Pump_OnAuto_3,
	xNoFeedback:= Pump_NoFeedback_3,
	wFlawAutoSet:= Pump_FlawAutoSet_3,
	wFlawManualSet:= Pump_FlawManualSet_3,
	wVelocitySet:= Pump_VelocitySet_3,
	wFlawGet:= Pump_FlawGet_3,
	wKp:= Pump_Kp,
	wKi:= Pump_Ki,
	wKd:= Pump_Kd,
	xInvertorNorm:= Pump_InvNorm_3,
	wMaxSpeed:= Pump_MaxSpeed,
	wMinSpeed:= Pump_MinSpeed,
	xOnManual:= Pump_OnManual_3,
	xResetErr:= xResetAlmAll,
	xDO_On=> DO_PumpOn_3,
	wState=>Pump_State_3,
	wAO_SpeedSet=> PumpSpeedSet_3,
	wError=> Pump_Error_3);


Pump_4(
	xManualMode:= Pump_ManualMode_4,
	xInRotationFlg:=Pump_FeedbackOn_4,
	xOnAuto:= Pump_OnAuto_4,
	xNoFeedback:= Pump_NoFeedback_4,
	wFlawAutoSet:= Pump_FlawAutoSet_4,
	wFlawManualSet:= Pump_FlawManualSet_4,
	wVelocitySet:= Pump_VelocitySet_4,
	wFlawGet:= Pump_FlawGet_4,
	wKp:= Pump_Kp,
	wKi:= Pump_Ki,
	wKd:= Pump_Kd,
	xInvertorNorm:= Pump_InvNorm_4,
	wMaxSpeed:= Pump_MaxSpeed,
	wMinSpeed:= Pump_MinSpeed,
	xOnManual:= Pump_OnManual_4,
	xResetErr:= xResetAlmAll,
	xDO_On=> DO_PumpOn_4,
	wState=>Pump_State_4,
	wAO_SpeedSet=> PumpSpeedSet_4,
	wError=> Pump_Error_4);


	PA1(
	xManualMode:= PA_ManualMode_1,
	xOnAuto:= PA_OnAuto_1,
	wOffDelay:= 0,
	xSensor:= DO_PA1,
	xOnManual:= PA_OnManual_1,
	xResetError:=xResetErr,
	xDO_On=> DO_PA1,
	xState=> PA_State_1);

	PA2(
	xManualMode:= PA_ManualMode_2,
	xOnAuto:= PA_OnAuto_2,
	wOffDelay:= 0,
	xSensor:= DO_PA2,
	xOnManual:= PA_OnManual_2,
	xResetError:=xResetErr,
	xDO_On=> DO_PA2,
	xState=> PA_State_2);

	PA3(
	xManualMode:= PA_ManualMode_3,
	xOnAuto:= PA_OnAuto_3,
	wOffDelay:= 0,
	xSensor:= DO_PA3,
	xOnManual:= PA_OnManual_3,
	xResetError:=xResetErr,
	xDO_On=> DO_PA3,
	xState=> PA_State_3);

	PA4(
	xManualMode:= PA_ManualMode_4,
	xOnAuto:= PA_OnAuto_4,
	wOffDelay:= 0,
	xSensor:= DO_PA4,
	xOnManual:= PA_OnManual_4,
	xResetError:=xResetErr,
	xDO_On=> DO_PA4,
	xState=> PA_State_4);

	PA11(
	xManualMode:= PA_ManualMode_11,
	xOnAuto:= PA_OnAuto_11,
	wOffDelay:= 0,
	xSensor:= DO_PA11,
	xOnManual:= PA_OnManual_11,
	xResetError:=xResetErr,
	xDO_On=> DO_PA11,
	xState=> PA_State_11);

	PA12(
	xManualMode:= PA_ManualMode_12,
	xOnAuto:= PA_OnAuto_12,
	wOffDelay:= 0,
	xSensor:= DO_PA12,
	xOnManual:= PA_OnManual_12,
	xResetError:=xResetErr,
	xDO_On=> DO_PA12,
	xState=> PA_State_12);


	tnOnRemotePump_1(IN:=DO_PumpOn_1 AND wWashingStateLine1 > 0,PT:=(WORD_TO_TIME(RemotePumpOnDelay)*1000));
	tnOnRemotePump_2(IN:=DO_PumpOn_2 AND wWashingStateLine2 > 0 AND (wChosenRecipeLine2 = 1 OR wChosenRecipeLine2 = 2 OR wChosenRecipeLine2 = 3) ,PT:=(WORD_TO_TIME(RemotePumpOnDelay)*1000));
	tnOnRemotePump_3(IN:=DO_PumpOn_3 AND wWashingStateLine3 > 0AND (wChosenRecipeLine3 = 1 OR wChosenRecipeLine3 = 2 OR wChosenRecipeLine3 = 3),PT:=(WORD_TO_TIME(RemotePumpOnDelay2)*1000));
	tnOnRemotePump_4(IN:=DO_PumpOn_4 AND wWashingStateLine4 > 0,PT:=(WORD_TO_TIME(RemotePumpOnDelay)*1000));

	tnOnRemotePump_1_1(IN:=DO_PumpOn_1 AND wWashingStateLine1 > 0 AND (wChosenRecipeLine1 = 1 OR wChosenRecipeLine1 = 2 (*OR wChosenRecipeLine1 = 3*)) ,PT:=(WORD_TO_TIME(wDissolvingPauseStateLine1)*1000));
	tnOnRemotePump_1_2(IN:=DO_PumpOn_2 AND wWashingStateLine2 > 0 AND (wChosenRecipeLine2 = 4 OR wChosenRecipeLine2 = 5 (*OR wChosenRecipeLine1 = 3*)) ,PT:=(WORD_TO_TIME(wDissolvingPauseStateLine2)*1000));
	tnOnRemotePump_1_3(IN:=DO_PumpOn_3 AND wWashingStateLine3 > 0 AND (wChosenRecipeLine3 = 4 OR wChosenRecipeLine3 = 5(* OR wChosenRecipeLine1 = 3*)) ,PT:=(WORD_TO_TIME(wDissolvingPauseStateLine3)*1000));

	tnOffRemotePump_1(IN:=NOT DO_PumpOn_1 ,PT:=(WORD_TO_TIME(RemotePumpOffDelay)*1000));
	tnOffRemotePump_2(IN:=NOT DO_PumpOn_2 ,PT:=(WORD_TO_TIME(RemotePumpOffDelay)*1000));
	tnOffRemotePump_3(IN:=NOT DO_PumpOn_3 ,PT:=(WORD_TO_TIME(RemotePumpOffDelay2)*1000));
	tnOffRemotePump_4(IN:=NOT DO_PumpOn_4 ,PT:=(WORD_TO_TIME(RemotePumpOffDelay)*1000));

	tnOffRemotePump_1_1(IN:=NOT DO_PumpOn_1 ,PT:=(WORD_TO_TIME(wWashingPauseStateLine1)*1000));
	tnOffRemotePump_1_2(IN:=NOT DO_PumpOn_2 ,PT:=(WORD_TO_TIME(wWashingPauseStateLine2)*1000));
	tnOffRemotePump_1_3(IN:=NOT DO_PumpOn_3 ,PT:=(WORD_TO_TIME(wWashingPauseStateLine3)*1000));


	(*IF tnOnRemotePump_1.Q THEN
		SwitchOnRemotePump_1:=TRUE;
	END_IF*)
	IF tnOnRemotePump_2.Q THEN
		SwitchOnRemotePump_1:=TRUE;
	END_IF
	IF tnOnRemotePump_3.Q THEN
		SwitchOnRemotePump_2:=TRUE;
	END_IF
	(*IF tnOnRemotePump_4.Q THEN
		SwitchOnRemotePump_4:=TRUE;
	END_IF*)

	IF tnOnRemotePump_1_1.Q THEN
		SwitchOnRemotePump_1_1:=TRUE;
	END_IF
	IF tnOnRemotePump_1_2.Q THEN
		SwitchOnRemotePump_1_2:=TRUE;
	END_IF
	IF tnOnRemotePump_1_3.Q THEN
		SwitchOnRemotePump_1_3:=TRUE;
	END_IF


	rtOffRemotePomp1(CLK:= tnOffRemotePump_2.Q);
	rtOffRemotePomp2(CLK:= tnOffRemotePump_3.Q);

	rtOffRemotePomp1_1(CLK:= tnOffRemotePump_1_1.Q);
	rtOffRemotePomp1_2(CLK:= tnOffRemotePump_1_2.Q);
	rtOffRemotePomp1_3(CLK:= tnOffRemotePump_1_3.Q);

	(*IF tnOffRemotePump_1.Q THEN
		SwitchOnRemotePump_1:=FALSE;
	END_IF*)
	IF rtOffRemotePomp1.Q THEN
		SwitchOnRemotePump_1:=FALSE;
	END_IF
	IF rtOffRemotePomp2.Q THEN
		SwitchOnRemotePump_2:=FALSE;
	END_IF
	(*IF tnOffRemotePump_4.Q THEN
		SwitchOnRemotePump_4:=FALSE;
	END_IF*)
	IF rtOffRemotePomp1_1.Q THEN
		SwitchOnRemotePump_1_1:=FALSE;
	END_IF
	IF rtOffRemotePomp1_2.Q THEN
		SwitchOnRemotePump_1_2:=FALSE;
	END_IF
	IF rtOffRemotePomp1_3.Q THEN
		SwitchOnRemotePump_1_3:=FALSE;
	END_IF



END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fb_concentrator
VAR_INPUT
	repair	:					BOOL	;
	auto_status	:			BOOL	;
	auto_mode	:			INT	;
	auto_cip_mode	:		INT	;
	sensor_CT	:			REAL	;
	sensor_temp	:			REAL	;
	sensor_CT_error	:		BOOL	;
	sensor_temp_error	:	BOOL	;
	scheloch_b	:			REAL:=2.5	;
	scheloch_d	:			REAL:=4.7	;
	scheloch_f	:			REAL:=0.018	;
	kislota_b	:				REAL:=2.7	;
	kislota_d	:				REAL:=5.4	;
	kislota_f	:				REAL:=0.017	;
	xAccid:						BOOL;
END_VAR

VAR_IN_OUT

	(*choose_mode:			INT;*)

END_VAR
VAR_OUTPUT
	result:						REAL;
END_VAR
VAR
	b	:						REAL	;
	d	:						REAL	;
	f	:						REAL	;
	choose_mode:			INT;

END_VAR
(* @END_DECLARATION := '0' *)
(*count concentration*)
IF repair = FALSE
THEN
    IF auto_status = TRUE AND auto_mode = 2
      THEN
        (*scheloch*)
        IF auto_cip_mode = 2 OR auto_cip_mode = 3 OR auto_cip_mode = 4
          THEN
            choose_mode:= 1;
        END_IF;
        (*kislota*)
        IF auto_cip_mode = 5 OR auto_cip_mode = 6 OR auto_cip_mode = 7
          THEN
            choose_mode:= 2;
        END_IF;
    END_IF;

    (*other choice*)
    IF choose_mode < 1 OR choose_mode > 2
      THEN
        choose_mode:= 1;
    END_IF;
    (*scheloch*)
    IF (*choose_mode = 1*)NOT xAccid
      THEN
        b:= scheloch_b;
        d:= scheloch_d;
        f:= scheloch_f;
    END_IF;
    (*kislota*)
    IF (*choose_mode = 2*)xAccid
      THEN
        b:= kislota_b;
        d:= kislota_d;
        f:= kislota_f;
    END_IF;

    (*count result*)
    IF ((2.0 * (d * f * sensor_temp - 20.0 * d * f + d)) <> 0) AND sensor_CT_error = FALSE AND sensor_temp_error = FALSE
      THEN
        result := (-2.0 * b * f * sensor_temp + d * f * sensor_temp + 40.0 * b * f - 20.0 * d * f + 2.0 * (sensor_CT / 10.0) - 2.0 * b + d) / (2.0 * (d * f * sensor_temp - 20.0 * d * f + d));
      ELSE
        result := 0;
    END_IF;
  ELSE
    result := 0;
END_IF;
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fb_counter
VAR_INPUT
	repair	:					BOOL	;
	counter	:				BOOL	;
	counter_valueStep	:	REAL	:=	1.0	;
	counter_init_value	:	REAL	;		
	start	:					BOOL	;
END_VAR

VAR_IN_OUT
	reset:			BOOL;
END_VAR

VAR_OUTPUT
	result:						REAL;
END_VAR

VAR
	status_counter:		BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
(*couter di signals*)
IF repair = FALSE
  THEN
    IF start = TRUE
      THEN
        IF status_counter <> counter
          THEN
            IF counter = TRUE
              THEN
                result:= result + counter_valueStep;
            END_IF;
        END_IF;
        status_counter := counter;
    END_IF;

    IF reset = TRUE
      THEN
        reset:= FALSE;
        result:= counter_init_value;
    END_IF;
  ELSE
    result:= 0;
    reset:=FALSE;
    status_counter:= FALSE;
END_IF;
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fb_crash_to_int
VAR_INPUT
	repair	:	BOOL	;
	crash_1	:	BOOL	;
	crash_2	:	BOOL	;
	crash_3	:	BOOL	;
	crash_4	:	BOOL	;
	crash_5	:	BOOL	;
	crash_6	:	BOOL	;
	crash_7	:	BOOL	;
	crash_8	:	BOOL	;
	crash_9	:	BOOL	;
	crash_10	:	BOOL	;

END_VAR
VAR_OUTPUT
	rezult_int_crash:	WORD;
END_VAR
VAR
END_VAR
(* @END_DECLARATION := '0' *)
IF repair = FALSE
  THEN
    rezult_int_crash:= INT_TO_WORD(
      (1) * BOOL_TO_INT(crash_1 OR crash_2 OR crash_3 OR crash_4 OR crash_5 OR crash_6 OR crash_7 OR crash_8 OR crash_9 OR crash_10) +
      (2) * BOOL_TO_INT(crash_1) +
      (4) * BOOL_TO_INT(crash_2) +
      (8) * BOOL_TO_INT(crash_3) +
      (16) * BOOL_TO_INT(crash_4) +
      (32) * BOOL_TO_INT(crash_5) +
      (64) * BOOL_TO_INT(crash_6) +
      (128) * BOOL_TO_INT(crash_7) +
      (256) * BOOL_TO_INT(crash_8) +
      (512) * BOOL_TO_INT(crash_9) +
      (1024) * BOOL_TO_INT(crash_10) );
  ELSE
      rezult_int_crash:= 0;
END_IF;
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fb_sensor
VAR_INPUT

	remont	:						BOOL	;
	use_pt100	:					BOOL	;
	value	:						INT	;
	value_20ma	:				REAL	:=	32767.0	;
	min_value	:					REAL	;
	max_value	:					REAL	:=	100.0	;
	crash_value_4_20ma_1	:	INT	:=	32767	;
	crash_value_4_20ma_2	:	INT	:=	-32768	;
	value_int	:					INT	;
	crash_value_PT100_1	:	INT	:=	-2000	;
	crash_value_PT100_2	:	INT	:=	8500	;
	sensor_offset	:				REAL	;
	sensor_gain	:				REAL	:=	1.0	;
END_VAR
VAR_OUTPUT
	rezult_value	:				REAL	;
	crash_value	:				BOOL	;
	out_crash_int	:				WORD	;

END_VAR
VAR
	(*db_crash_to_int:				fb_crash_to_int;*)
END_VAR
(* @END_DECLARATION := '0' *)
(*fb äëÿ ïåðåñ÷åòà àíàëîãîâûõ äàò÷èêîâ*)
IF remont = FALSE
  THEN
    (*îáðûâ èëè êç äàò÷èêà*)
    IF use_pt100 = FALSE
      THEN
        (*åñëè äàò÷èê 4-20ìà*)
        IF value = crash_value_4_20ma_1 OR value = crash_value_4_20ma_2
          THEN
            rezult_value:= 0;
            crash_value:=TRUE;
          ELSE
            rezult_value:= (min_value + INT_TO_REAL(value) * (max_value - min_value)/value_20ma) * sensor_gain + sensor_offset;
            crash_value:=FALSE;
        END_IF;
      ELSE
        (*åñëè äàò÷èê ÐÒ100*)
        IF value_int <=crash_value_PT100_1 OR value_int >= crash_value_PT100_2
          THEN
            rezult_value:= 0;
            crash_value:=TRUE;
          ELSE
            rezult_value:= sensor_offset + sensor_gain * (INT_TO_REAL(value_int)/10.0);
            crash_value:=FALSE;
        END_IF;
    END_IF;
  ELSE
    rezult_value:= 0;
    crash_value:=FALSE;
END_IF;

(*
(*àâàðèè äëÿ ïàíåëè*)
db_crash_to_int(
  crash_1:= crash_value );
out_crash_int:= db_crash_to_int.rezult_int_crash;
*)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fb_speed_di
VAR_INPUT
	repair	:				BOOL	;
	di_speed	:			BOOL	;
	real_obor_min	:	REAL	:=	1500.0	;
	max_speed	:		REAL	:=	1500.0	;
	time_update	:		DINT	:=	1500	;

END_VAR
VAR_OUTPUT
	result_speed:			REAL;
END_VAR
VAR
	TON_speed	:		TON	;
	status_di_speed	:	BOOL	;
	count_impuls	:		REAL	;

END_VAR
(* @END_DECLARATION := '0' *)
(*translate di speed in speed*)
IF repair = FALSE
  THEN
    IF (status_di_speed = FALSE AND di_speed = TRUE)
      THEN
        count_impuls:= count_impuls + 1;
    END_IF;

    TON_speed( IN:= TRUE, PT:=  DINT_TO_TIME(time_update));
    IF TON_speed.Q = TRUE
      THEN
        TON_speed( IN:= FALSE, PT:=  t#60s);
        IF real_obor_min <> 0 AND time_update <> 0
          THEN
            result_speed:= max_speed * ((count_impuls * 60.0 / (DINT_TO_REAL(time_update) / 1000.0)) / real_obor_min);
          ELSE
            result_speed:= 0;
        END_IF;
        count_impuls:= 0;
    END_IF;

    status_di_speed:= di_speed;
  ELSE
    result_speed:= 0;
    TON_speed( IN:= FALSE, PT:=  t#10d);
    status_di_speed:= FALSE;
    count_impuls:= 0;
END_IF;
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fb_tank
VAR_INPUT
	use_smoothing	:	BOOL	;
	time_wait	:			TIME	:=	T#1s500ms	;
	input_H	:			BOOL	;
	input_M	:			BOOL	;
	input_L	:			BOOL	;

END_VAR
VAR_OUTPUT
	result_H	:			BOOL	;
	result_M	:			BOOL	;
	result_L	:			BOOL	;
	crash_value	:		BOOL	;
	out_crash_int	:		WORD	;

END_VAR
VAR
	sensor_H	:			fb_digout_signal	;
	sensor_M	:			fb_digout_signal	;
	sensor_L	:			fb_digout_signal	;
	db_crash_to_int	:	fb_crash_to_int	;

END_VAR
(* @END_DECLARATION := '0' *)
(*high level*)
sensor_H(
  repair:=                 FALSE,
  out_signal_for_repair:=  FALSE,
  use_smoothing:=          use_smoothing,
  time_wait:=              time_wait,
  input:=                  input_H,
  digout=>                 result_H);
(*middle level*)
sensor_M(
  repair:=                 FALSE,
  out_signal_for_repair:=  FALSE,
  use_smoothing:=          use_smoothing,
  time_wait:=              time_wait,
  input:=                  input_M,
  digout=>                 result_M);
(*lower level*)
sensor_L(
  repair:=                 FALSE,
  out_signal_for_repair:=  FALSE,
  use_smoothing:=          use_smoothing,
  time_wait:=              time_wait,
  input:=                  input_L,
  digout=>                 result_L);

(*IF (result_M = TRUE AND result_L = FALSE) OR (result_H = TRUE AND result_M = FALSE)
  THEN
    crash_value:= TRUE;
  ELSE
    crash_value:= FALSE;
END_IF;*)
    crash_value:= FALSE;

  
(*?????? ??? ??????*)
db_crash_to_int(
  crash_1:= crash_value );
out_crash_int:= db_crash_to_int.rezult_int_crash;
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbAccidAlkaliSwitch
VAR_INPUT
	xV_AccidOut:	BOOL;
	xV_AlkaliOut:	BOOL;
END_VAR
VAR_IN_OUT
	xAccidOn:		BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	rtAccidOn:	R_TRIG;
	rtAlkaliOn:	R_TRIG;
END_VAR
(* @END_DECLARATION := '0' *)
rtAccidOn(CLK:=xV_AccidOut);
rtAlkaliOn(CLK:=xV_AlkaliOut);

IF(* rtAccidOn.Q*) xV_AccidOut THEN
	xAccidOn:=TRUE;
END_IF

IF (*rtAlkaliOn.Q*) xV_AlkaliOut THEN
	xAccidOn:=FALSE;
END_IF

END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION fnAI_TO_CURRENCY : REAL
VAR_INPUT
	AI:	WORD;
END_VAR
VAR
	result:REAL;
END_VAR
(* @END_DECLARATION := '0' *)
result:=(WORD_TO_REAL(AI)/32762)*20;
fnAI_TO_CURRENCY:=result;
END_FUNCTION


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION fnPressureToVolume : REAL
VAR_INPUT
	Pressure:	REAL;
	Square:	REAL;
END_VAR
VAR
END_VAR
(* @END_DECLARATION := '0' *)


fnPressureToVolume:=(Pressure*Square)/9.79038;

END_FUNCTION


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prConc
VAR

	Conc_Line_1: fb_sensor;
	Conc_Line_2: fb_sensor;
	Conc_Line_3: fb_sensor;
	Conc_Line_4: fb_sensor;

	ConcEnd_Line_1:	fb_concentrator;
	ConcEnd_Line_2:	fb_concentrator;
	ConcEnd_Line_3:	fb_concentrator;
	ConcEnd_Line_4:	fb_concentrator;

	Conc_Line1_raw: REAL;
	Conc_Line2_raw: REAL;
	Conc_Line3_raw: REAL;
	Conc_Line4_raw: REAL;

	AccidAlkaliSwitch_1: fbAccidAlkaliSwitch;
	AccidAlkaliSwitch_2: fbAccidAlkaliSwitch;
	AccidAlkaliSwitch_3: fbAccidAlkaliSwitch;
	AccidAlkaliSwitch_4: fbAccidAlkaliSwitch;

END_VAR
(* @END_DECLARATION := '0' *)

AccidAlkaliSwitch_1(
	xV_AccidOut:= xState_V103,
	xV_AlkaliOut:= xState_V104,
	xAccidOn:=xAccidIsGoing1 );

AccidAlkaliSwitch_2(
	xV_AccidOut:= xState_V203,
	xV_AlkaliOut:= xState_V204,
	xAccidOn:=xAccidIsGoing2 );

AccidAlkaliSwitch_3(
	xV_AccidOut:= xState_V303,
	xV_AlkaliOut:= xState_V304,
	xAccidOn:=xAccidIsGoing3 );

AccidAlkaliSwitch_4(
	xV_AccidOut:= xState_V403,
	xV_AlkaliOut:= xState_V404,
	xAccidOn:=xAccidIsGoing4 );





Conc_Line_1(
	value:= AI_Conc_Line1,
	min_value:= ,
	max_value:= 999.9,
	crash_value_4_20ma_1:= , 
	crash_value_4_20ma_2:= ,
	value_int:= ,
	crash_value_PT100_1:= ,
	crash_value_PT100_2:= , 
	sensor_offset:= ,
	sensor_gain:= ,
	rezult_value=> Conc_Line1_raw,
	crash_value=> ,
	out_crash_int=> );

Conc_Line_2(
	value:= AI_Conc_Line2,
	min_value:= ,
	max_value:= 999.9,
	crash_value_4_20ma_1:= ,
	crash_value_4_20ma_2:= , 
	value_int:= , 
	crash_value_PT100_1:= ,
	crash_value_PT100_2:= , 
	sensor_offset:= ,
	sensor_gain:= , 
	rezult_value=> Conc_Line2_raw,
	crash_value=> , 
	out_crash_int=> );

Conc_Line_3(
	value:= AI_Conc_Line3,
	min_value:= ,
	max_value:= 999.9,
	crash_value_4_20ma_1:= , 
	crash_value_4_20ma_2:= , 
	value_int:= , 
	crash_value_PT100_1:= , 
	crash_value_PT100_2:= , 
	sensor_offset:= ,
	sensor_gain:= , 
	rezult_value=> Conc_Line3_raw,
	crash_value=> , 
	out_crash_int=> );

Conc_Line_4(
	value:=AI_Conc_Line4 ,
	min_value:= 0,
	max_value:= 999.9,
	crash_value_4_20ma_1:= , 
	crash_value_4_20ma_2:= ,
	value_int:= ,
	crash_value_PT100_1:= ,
	crash_value_PT100_2:= , 
	sensor_offset:= ,
	sensor_gain:= , 
	rezult_value=> Conc_Line4_raw,
	crash_value=> , 
	out_crash_int=> );


ConcEnd_Line_1(
	repair:= ,
	auto_status:= ,
	auto_mode:= ,
	xAccid:= xAccidIsGoing1,
	auto_cip_mode:= , 
	sensor_CT:= Conc_Line1_raw,
	sensor_temp:= Heater_BackTget_1,
	sensor_CT_error:= ,
	sensor_temp_error:= , 
	scheloch_b:= ,
	scheloch_d:= , 
	scheloch_f:= , 
	kislota_b:= ,
	kislota_d:= , 
	kislota_f:= ,
	choose_mode:= ,
	result=> Conc_Line1);

ConcEnd_Line_2(
	repair:= ,
	auto_status:= ,
	auto_mode:= ,
	xAccid:= xAccidIsGoing2,
	auto_cip_mode:= , 
	sensor_CT:= Conc_Line2_raw,
	sensor_temp:= Heater_BackTget_2,
	sensor_CT_error:= , 
	sensor_temp_error:= , 
	scheloch_b:= ,
	scheloch_d:= , 
	scheloch_f:= , 
	kislota_b:= , 
	kislota_d:= ,
	kislota_f:= , 
	choose_mode:= , 
	result=> Conc_Line2);

ConcEnd_Line_3(
	repair:= ,
	auto_status:= ,
	auto_mode:= ,
	xAccid:= xAccidIsGoing3,
	auto_cip_mode:= , 
	sensor_CT:= Conc_Line3_raw,
	sensor_temp:= Heater_BackTget_3,
	sensor_CT_error:= , 
	sensor_temp_error:= , 
	scheloch_b:= , 
	scheloch_d:= , 
	scheloch_f:= ,
	kislota_b:= ,
	kislota_d:= , 
	kislota_f:= , 
	choose_mode:= ,
	result=> Conc_Line3);

ConcEnd_Line_4(
	repair:= ,
	auto_status:= ,
	auto_mode:= ,
	xAccid:= xAccidIsGoing4,
	auto_cip_mode:= , 
	sensor_CT:= Conc_Line4_raw,
	sensor_temp:= Heater_BackTget_4,
	sensor_CT_error:= ,
	sensor_temp_error:= , 
	scheloch_b:= , 
	scheloch_d:= , 
	scheloch_f:= , 
	kislota_b:= , 
	kislota_d:= , 
	kislota_f:= ,
	choose_mode:= , 
	result=> Conc_Line4);

END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prFlaw
VAR

	FlawMessure_1:	fb_sensor;
	FlawMessure_2:	fb_sensor;
	FlawMessure_3:	fb_sensor;
	FlawMessure_4:	fb_sensor;

	FlawMessure_Trafo_1: LIN_TRAFO;
	FlawMessure_Trafo_2: LIN_TRAFO;
	FlawMessure_Trafo_3: LIN_TRAFO;
	FlawMessure_Trafo_4: LIN_TRAFO;

END_VAR
(* @END_DECLARATION := '0' *)
(*
FlawMessure_1(
	remont:= , 
	use_pt100:= , 
	value:= AI_Flaw_Line1,
	value_20ma:= , 
	min_value:= ,
	max_value:=10 ,
	crash_value_4_20ma_1:= , 
	crash_value_4_20ma_2:= , 
	value_int:= , 
	crash_value_PT100_1:= , 
	crash_value_PT100_2:= , 
	sensor_offset:= , 
	sensor_gain:= , 
	rezult_value=> Pump_FlawGet_1,
	crash_value=> , 
	out_crash_int=> );

FlawMessure_2(
	remont:= ,
	use_pt100:= ,
	value:= AI_Flaw_Line2,
	value_20ma:= ,
	min_value:= ,
	max_value:=10 ,
	crash_value_4_20ma_1:= , 
	crash_value_4_20ma_2:= , 
	value_int:= , 
	crash_value_PT100_1:= , 
	crash_value_PT100_2:= , 
	sensor_offset:= , 
	sensor_gain:= , 
	rezult_value=> Pump_FlawGet_2,
	crash_value=> , 
	out_crash_int=> );

FlawMessure_3(
	remont:= , 
	use_pt100:= , 
	value:= AI_Flaw_Line3,
	value_20ma:= , 
	min_value:= ,
	max_value:=10 ,
	crash_value_4_20ma_1:= , 
	crash_value_4_20ma_2:= , 
	value_int:= , 
	crash_value_PT100_1:= , 
	crash_value_PT100_2:= , 
	sensor_offset:= , 
	sensor_gain:= , 
	rezult_value=> Pump_FlawGet_3,
	crash_value=> , 
	out_crash_int=> );

FlawMessure_4(
	remont:= , 
	use_pt100:= , 
	value:= AI_Flaw_Line4,
	value_20ma:= , 
	min_value:= ,
	max_value:=10 ,
	crash_value_4_20ma_1:= , 
	crash_value_4_20ma_2:= , 
	value_int:= , 
	crash_value_PT100_1:= , 
	crash_value_PT100_2:= , 
	sensor_offset:= , 
	sensor_gain:= , 
	rezult_value=> Pump_FlawGet_4,
	crash_value=> , 
	out_crash_int=> );
*)

FlawMessure_Trafo_1(
	IN:= AI_Flaw_Line1,
	IN_MIN:= 0,
	IN_MAX:= 32767,
	OUT_MIN:= 0,
	OUT_MAX:= 61 );
Pump_FlawGet_1:= FlawMessure_Trafo_1.OUT;
IF AI_Flaw_Line1 < 300 THEN
	Pump_FlawGet_1:=0;
END_IF


FlawMessure_Trafo_2(
	IN:= AI_Flaw_Line2,
	IN_MIN:= 0,
	IN_MAX:= 32767,
	OUT_MIN:= 0,
	OUT_MAX:= 61 );
Pump_FlawGet_2:= FlawMessure_Trafo_2.OUT;
IF AI_Flaw_Line2 < 300 THEN
	Pump_FlawGet_2:=0;
END_IF

FlawMessure_Trafo_3(
	IN:= AI_Flaw_Line3,
	IN_MIN:= 0,
	IN_MAX:= 32767,
	OUT_MIN:= 0,
	OUT_MAX:= 61 );
Pump_FlawGet_3:= FlawMessure_Trafo_3.OUT;
IF AI_Flaw_Line3 < 300 THEN
	Pump_FlawGet_3:=0;
END_IF

FlawMessure_Trafo_4(
	IN:= AI_Flaw_Line4,
	IN_MIN:= 0,
	IN_MAX:= 32767,
	OUT_MIN:= 0,
	OUT_MAX:= 61 );
Pump_FlawGet_4:= FlawMessure_Trafo_4.OUT;
IF AI_Flaw_Line4 < 300 THEN
	Pump_FlawGet_4:=0;
END_IF
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prLevel
VAR
	fbCleanWaterLeve: LIN_TRAFO;
	fbUsedWaterLeve: LIN_TRAFO;
	fbAccidLevel: LIN_TRAFO;
	fbAlkaliLevel: LIN_TRAFO;
	check: LIN_TRAFO;
	checkMax:REAL:=20;
	checkMin:REAL;
	OUT_MIN: REAL;
	OUT_MAX:REAL:=32765;

END_VAR
(* @END_DECLARATION := '0' *)
fbCleanWaterLeve(
	IN:= AI_CleanWaterLevel,
	IN_MIN:= 616,
	IN_MAX:= (*32762*)24540,
	OUT_MIN:= 0,
	OUT_MAX:= 100,
	ERROR=> );

	(*CleanWaterLevel:=fnPressureToVolume(fbCleanWaterLeve.OUT, 3.14);*)
	CleanWaterLevel:=fbCleanWaterLeve.OUT;
	IF AI_CleanWaterLevel> 24540 THEN
		CleanWaterLevel:= 101;
	END_IF

fbUsedWaterLeve(
	IN:= AI_UsedWaterLevel,
	IN_MIN:= 584,
	IN_MAX:= 24400,
	OUT_MIN:= 0,
	OUT_MAX:= 100,
	ERROR=> );

	(*UsedWaterLevel:=fnPressureToVolume(fbUsedWaterLeve.OUT, 3.14);*)
	UsedWaterLevel:=fbUsedWaterLeve.OUT;
	IF AI_UsedWaterLevel > 24400 THEN
		UsedWaterLevel:=101;
	END_IF

fbAccidLevel(
	IN:= AI_AccidLevel,
	IN_MIN:= 624,
	IN_MAX:= 24344,
	OUT_MIN:= 0,
	OUT_MAX:= 100,
	ERROR=> );

	(*AccidLevel:=fnPressureToVolume(fbAccidLevel.OUT, 3.14);*)
	AccidLevel:=fbAccidLevel.OUT;
	IF AI_AccidLevel > 24344 THEN
		AccidLevel:=101;
	END_IF

fbAlkaliLevel(
	IN:= AI_AlkaliLevel,
	IN_MIN:= 616,
	IN_MAX:= 24480,
	OUT_MIN:= 0,
	OUT_MAX:= 100,
	ERROR=> );

	(*AlkaliLevel:=fnPressureToVolume(fbAlkaliLevel.OUT, 3.14);*)
	AlkaliLevel:=fbAlkaliLevel.OUT;
	IF AI_AlkaliLevel > 24480 THEN
		AlkaliLevel:=101;
	END_IF

	check(
	IN:= 4.299,
	IN_MIN:= checkMin,
	IN_MAX:= checkMax,
	OUT_MIN:= OUT_MIN,
	OUT_MAX:= OUT_MAX,
	OUT=> , 
	ERROR=> );
(*

PRESSURE = (p * volume * g)/S

p = 0.998
g = 9.81

Volume = (PRESSURE * S)/(p * g)

*)
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prSensors
VAR
END_VAR
(* @END_DECLARATION := '0' *)
prFlaw();
prConc();
prLevel();
prTemperature();
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Sensors' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prTemperature
VAR
END_VAR
(* @END_DECLARATION := '0' *)
Temp_Accid	:=	WORD_TO_REAL(AI_Temp_Accid)/10;
Temp_Alkali	:=	WORD_TO_REAL(AI_Temp_Alkali)/10;
Temp_Line3	:=	WORD_TO_REAL(AI_Temp_Line3)/10;
Temp_Line4	:=	WORD_TO_REAL(AI_Temp_Line4)/10;
		
Heater_Tget_1 	:=	WORD_TO_REAL(AI_Heater_Tget_1 )/10;
Heater_Tget_2 	:=	WORD_TO_REAL(AI_Heater_Tget_2 )/10;
Heater_Tget_3 	:=	WORD_TO_REAL(AI_Heater_Tget_3 )/10;
Heater_Tget_4 	:=	WORD_TO_REAL(AI_Heater_Tget_4 )/10;
		
Heater_BackTget_1	:=	WORD_TO_REAL(AI_Heater_BackTget_1)/10;
Heater_BackTget_2	:=	WORD_TO_REAL(AI_Heater_BackTget_2)/10;
Heater_BackTget_3	:=	WORD_TO_REAL(AI_Heater_BackTget_3)/10;
Heater_BackTget_4	:=	WORD_TO_REAL(AI_Heater_BackTget_4)/10;


Temp_Accid	:=	WORD_TO_REAL(AI_Temp_Accid)/10;
Temp_Alkali	:=	WORD_TO_REAL(AI_Temp_Alkali)/10;
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Valve' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbValve
VAR_INPUT
	xManualMode:			BOOL;
	xOnAuto:				BOOL;
	wOffDelay:				WORD:=3;
	xSensor:				BOOL;
	xInterlock:				BOOL;

END_VAR
VAR_IN_OUT

	xOnManual:			BOOL;
	xResetError:			BOOL;

END_VAR
VAR_OUTPUT
	xDO_On:				BOOL;
	xState:					BOOL;
	wError:					WORD;
END_VAR
VAR
	tfOffDelay:				TOF;
	xDO_OnOld:			BOOL;
	tnErrorNotOpen:		TON;
	tnErrorNotClosed:		TON;
	rtSwitchToManual:		R_TRIG;

END_VAR
(* @END_DECLARATION := '0' *)
rtSwitchToManual(CLK:=xManualMode);
IF rtSwitchToManual.Q THEN
	xOnManual:=xOnAuto;
END_IF

IF xManualMode THEN
	tfOffDelay(IN:=xOnManual, PT:= WORD_TO_TIME(wOffDelay * 1000), Q=>xDO_On);
ELSE
	xOnManual:=FALSE;
	tfOffDelay(IN:=xOnAuto, PT:= WORD_TO_TIME(wOffDelay * 1000), Q=>xDO_On);
END_IF
xState:=xSensor;

IF xInterlock THEN
	xDO_On:=FALSE;
END_IF

tnErrorNotOpen(IN:= xDO_On AND (NOT xSensor), PT:=t#15S);
tnErrorNotClosed(IN:= (NOT xDO_On) AND xSensor, PT:=t#15S);

IF tnErrorNotOpen.Q THEN
	wError.0:=TRUE;
END_IF
IF tnErrorNotClosed.Q THEN
	wError.1:=TRUE;
END_IF

IF xResetError THEN
	tnErrorNotOpen(IN:=FALSE);
	tnErrorNotClosed(IN:=FALSE);
	wError:=0;
END_IF



(*
IF xDO_OnOld <> xDO_On THEN
	tnDelayState(IN:=TRUE, PT:=T#3S);
	IF tnDelayState.Q THEN
		xState:= 		xDO_On;
		xDO_OnOld:=	xDO_On;
		tnDelayState(IN:=FALSE);
	END_IF
END_IF
*)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Valve' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbWaterSupplyValve
VAR_INPUT
	xManualMode:			BOOL;
	wOffDelay:				WORD:=3;
	xStopSupplying:		BOOL;
	rWaterLevel:			REAL;
	rWaterLevelNotOK:	REAL;
	xUpperLevel:			BOOL;
	xOnAutoWorking:		BOOL;
	xSensor:				BOOL;
END_VAR
VAR_IN_OUT

	xOnManual:			BOOL;

END_VAR
VAR_OUTPUT
	xDO_On:				BOOL;
	xState:					BOOL;
END_VAR
VAR
	tfOffDelay:				TOF;
	xDO_OnOld:			BOOL;
	tnDelayState:			TON;
	rtLevelDown:			R_TRIG;
	xOnAuto:				BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF xManualMode THEN
	tfOffDelay(IN:=xOnManual, PT:= WORD_TO_TIME(wOffDelay * 1000), Q=>xDO_On);
ELSIF xOnAutoWorking THEN
	rtLevelDown(CLK:= rWaterLevel < rWaterLevelNotOK);
	IF rWaterLevel < rWaterLevelNotOK THEN
		xOnAuto:=TRUE;
	END_IF
	IF xUpperLevel THEN
		xOnAuto:=FALSE;
	END_IF

	tfOffDelay(IN:=xOnAuto, PT:= WORD_TO_TIME(wOffDelay * 1000), Q=>xDO_On);
END_IF

xState:=xSensor;

IF xStopSupplying THEN
	xDO_On:=FALSE;
END_IF
(*
IF NOT xOnAutoWorking THEN
	xDO_On:=FALSE;
END_IF
*)
(*
IF xDO_OnOld <> xDO_On THEN
	tnDelayState(IN:=TRUE, PT:=T#3S);
	IF tnDelayState.Q THEN
		xState:= 		xDO_On;
		xDO_OnOld:=	xDO_On;
		tnDelayState(IN:=FALSE);
	END_IF
END_IF
*)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device\/Valve' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prValve
VAR

	Valve_V101	:	fbValve;
	Valve_V102	:	fbValve;
	Valve_V103	:	fbValve;
	Valve_V104	:	fbValve;
	Valve_V105	:	fbValve;
	Valve_V106	:	fbValve;
	Valve_V107	:	fbValve;
	Valve_V108	:	fbValve;
	Valve_V109	:	fbValve;
	Valve_V110	:	fbValve;
	Valve_V111	:	fbValve;
	Valve_V201	:	fbValve;
	Valve_V202	:	fbValve;
	Valve_V203	:	fbValve;
	Valve_V204	:	fbValve;
	Valve_V205	:	fbValve;
	Valve_V206	:	fbValve;
	Valve_V207	:	fbValve;
	Valve_V208	:	fbValve;
	Valve_V209	:	fbValve;
	Valve_V210	:	fbValve;
	Valve_V211	:	fbValve;
	Valve_V301	:	fbValve;
	Valve_V302	:	fbValve;
	Valve_V303	:	fbValve;
	Valve_V304	:	fbValve;
	Valve_V305	:	fbValve;
	Valve_V306	:	fbValve;
	Valve_V307	:	fbValve;
	Valve_V308	:	fbValve;
	Valve_V309	:	fbValve;
	Valve_V310	:	fbValve;
	Valve_V311	:	fbValve;
	Valve_V401	:	fbValve;
	Valve_V402	:	fbValve;
	Valve_V403	:	fbValve;
	Valve_V404	:	fbValve;
	Valve_V405	:	fbValve;
	Valve_V406	:	fbValve;
	Valve_V407	:	fbValve;
	Valve_V408	:	fbValve;
	Valve_V409	:	fbValve;
	Valve_V410	:	fbValve;
	Valve_V411	:	fbValve;
	Valve_V501	:	fbValve;
	Valve_V510	:	fbValve;
	Valve_V511	:	fbValve;
	Valve_V512	:	fbValve;
	Valve_V513	:	fbValve;
	Valve_V514	:	fbValve;
	Valve_V515	:	fbValve;
	WaterSupplyValve:	fbWaterSupplyValve;


	xOnAutoWorking: BOOL;
	xResetErrorValves: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
xResetErrorValves:=xResetAlmAll;


Valve_V101
(xManualMode:= ManualMode_V101,
xSensor:=DI_V101,
xOnAuto:= OnAuto_V101,
xResetError:= xResetErrorValves,
 xOnManual:= OnManual_V101,
xDO_On=> DO_V101,
wError=> wAlm_V101,
xState=> xState_V101);

Valve_V102
(xManualMode:= ManualMode_V102,
xSensor:=DI_V102,
xOnAuto:= OnAuto_V102,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V102,
xDO_On=> DO_V102,
wError=> wAlm_V102,
xState=> xState_V102);

Valve_V103
(xManualMode:= ManualMode_V103,
xSensor:=DI_V103,
xOnAuto:= OnAuto_V103,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V103,
xDO_On=> DO_V103,
wError=> wAlm_V103,
xState=> xState_V103);

Valve_V104
(xManualMode:= ManualMode_V104,
xSensor:=DI_V104,
xOnAuto:= OnAuto_V104,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V104,
xDO_On=> DO_V104,
wError=> wAlm_V104,
xState=> xState_V104);

Valve_V105
(xManualMode:= ManualMode_V105,
xSensor:=DI_V105,
xOnAuto:= OnAuto_V105,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V105,
xDO_On=> DO_V105,
wError=> wAlm_V105,
xState=> xState_V105);

Valve_V106
(xManualMode:= ManualMode_V106,
xSensor:=DI_V106,
xInterlock:= DI_AlkaliUpperLevel,
xOnAuto:= OnAuto_V106,
xResetError:= xResetErrorValves,
 xOnManual:= OnManual_V106,
xDO_On=> DO_V106,
wError=> wAlm_V106,
xState=> xState_V106);

Valve_V107
(xManualMode:= ManualMode_V107,
xSensor:=DI_V107,
xInterlock:= DI_AccidUpperLevel,
xOnAuto:= OnAuto_V107,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V107,
xDO_On=> DO_V107,
wError=> wAlm_V107,
xState=> xState_V107);

Valve_V108
(xManualMode:= ManualMode_V108,
xSensor:=DI_V108,
xInterlock:= DI_UsedWaterUpperLevel,
xOnAuto:= OnAuto_V108,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V108,
xDO_On=> DO_V108,
wError=> wAlm_V108,
xState=> xState_V108);

Valve_V109
(xManualMode:= ManualMode_V109,
xSensor:=DI_V109,
xOnAuto:= OnAuto_V109,
wOffDelay:=1,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V109,
xDO_On=> DO_V109,
wError=> wAlm_V109,
xState=> xState_V109);

Valve_V110
(xManualMode:= ManualMode_V110,
xSensor:=DI_V110,
xOnAuto:= OnAuto_V110,
xResetError:= xResetErrorValves,
 xOnManual:= OnManual_V110,
xDO_On=> DO_V110,
wError=> wAlm_V110,
xState=> xState_V110);

Valve_V111
(xManualMode:= ManualMode_V111,
xSensor:=DI_V111,
xOnAuto:= OnAuto_V111,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V111,
xDO_On=> DO_V111,
wError=> wAlm_V111,
xState=> xState_V111);

Valve_V201
(xManualMode:= ManualMode_V201,
xSensor:=DI_V201,
xOnAuto:= OnAuto_V201,
xResetError:= xResetErrorValves,
 xOnManual:= OnManual_V201,
xDO_On=> DO_V201,
wError=> wAlm_V201,
xState=> xState_V201);

Valve_V202
(xManualMode:= ManualMode_V202,
xSensor:=DI_V202,
xOnAuto:= OnAuto_V202,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V202,
xDO_On=> DO_V202,
wError=> wAlm_V202,
xState=> xState_V202);

Valve_V203
(xManualMode:= ManualMode_V203,
xSensor:=DI_V203,
xOnAuto:= OnAuto_V203,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V203,
xDO_On=> DO_V203,
wError=> wAlm_V203,
xState=> xState_V203);

Valve_V204
(xManualMode:= ManualMode_V204,
xSensor:=DI_V204,
xOnAuto:= OnAuto_V204,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V204,
xDO_On=> DO_V204,
wError=> wAlm_V204,
xState=> xState_V204);

Valve_V205
(xManualMode:= ManualMode_V205,
xSensor:=DI_V205,
xOnAuto:= OnAuto_V205,
xResetError:= xResetErrorValves,
 xOnManual:= OnManual_V205,
xDO_On=> DO_V205,
wError=> wAlm_V205,
xState=> xState_V205);

Valve_V206
(xManualMode:= ManualMode_V206,
xSensor:=DI_V206,
xInterlock:= DI_AlkaliUpperLevel,
xOnAuto:= OnAuto_V206,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V206,
xDO_On=> DO_V206,
wError=> wAlm_V206,
xState=> xState_V206);

Valve_V207
(xManualMode:= ManualMode_V207,
xSensor:=DI_V207,
xInterlock:= DI_AccidUpperLevel,
xOnAuto:= OnAuto_V207,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V207,
xDO_On=> DO_V207,
wError=> wAlm_V207,
xState=> xState_V207);

Valve_V208
(xManualMode:= ManualMode_V208,
xSensor:=DI_V208,
xInterlock:= DI_UsedWaterUpperLevel,
xOnAuto:= OnAuto_V208,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V208,
xDO_On=> DO_V208,
wError=> wAlm_V208,
xState=> xState_V208);

Valve_V209
(xManualMode:= ManualMode_V209,
xSensor:=DI_V209,
wOffDelay:=1,
xOnAuto:= OnAuto_V209,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V209,
xDO_On=> DO_V209,
wError=> wAlm_V209,
xState=> xState_V209);

Valve_V210
(xManualMode:= ManualMode_V210,
xSensor:=DI_V210,
xOnAuto:= OnAuto_V210,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V210,
xDO_On=> DO_V210,
wError=> wAlm_V210,
xState=> xState_V210);

Valve_V211
(xManualMode:= ManualMode_V211,
xSensor:=DI_V211,
xOnAuto:= OnAuto_V211,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V211,
xDO_On=> DO_V211,
wError=> wAlm_V211,
xState=> xState_V211);

Valve_V301
(xManualMode:= ManualMode_V301,
xSensor:=DI_V301,
xOnAuto:= OnAuto_V301,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V301,
xDO_On=> DO_V301,
wError=> wAlm_V301,
xState=> xState_V301);

Valve_V302
(xManualMode:= ManualMode_V302,
xSensor:=DI_V302,
xOnAuto:= OnAuto_V302,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V302,
xDO_On=> DO_V302,
wError=> wAlm_V302,
xState=> xState_V302);

Valve_V303
(xManualMode:= ManualMode_V303,
xSensor:=DI_V303,
xOnAuto:= OnAuto_V303,
xResetError:= xResetErrorValves,
 xOnManual:= OnManual_V303,
xDO_On=> DO_V303,
wError=> wAlm_V303,
xState=> xState_V303);

Valve_V304
(xManualMode:= ManualMode_V304,
xSensor:=DI_V304,
xOnAuto:= OnAuto_V304,
xResetError:= xResetErrorValves,
 xOnManual:= OnManual_V304,
xDO_On=> DO_V304,
wError=> wAlm_V304,
xState=> xState_V304);

Valve_V305
(xManualMode:= ManualMode_V305,
xSensor:=DI_V305,
xOnAuto:= OnAuto_V305,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V305,
xDO_On=> DO_V305,
wError=> wAlm_V305,
xState=> xState_V305);

Valve_V306
(xManualMode:= ManualMode_V306,
xSensor:=DI_V306,
xInterlock:= DI_AlkaliUpperLevel,
xOnAuto:= OnAuto_V306,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V306,
xDO_On=> DO_V306,
wError=> wAlm_V306,
xState=> xState_V306);

Valve_V307
(xManualMode:= ManualMode_V307,
xSensor:=DI_V307,
xInterlock:= DI_AccidUpperLevel,
xOnAuto:= OnAuto_V307,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V307,
xDO_On=> DO_V307,
wError=> wAlm_V307,
xState=> xState_V307);

Valve_V308
(xManualMode:= ManualMode_V308,
xSensor:=DI_V308,
wOffDelay:=1,
xInterlock:= DI_UsedWaterUpperLevel,
xOnAuto:= OnAuto_V308,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V308,
xDO_On=> DO_V308,
wError=> wAlm_V308,
xState=> xState_V308);

Valve_V309
(xManualMode:= ManualMode_V309,
xSensor:=DI_V309,
xOnAuto:= OnAuto_V309,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V309,
xDO_On=> DO_V309,
wError=> wAlm_V309,
xState=> xState_V309);

Valve_V310
(xManualMode:= ManualMode_V310,
xSensor:=DI_V310,
xOnAuto:= OnAuto_V310,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V310,
xDO_On=> DO_V310,
wError=> wAlm_V310,
xState=> xState_V310);

Valve_V311
(xManualMode:= ManualMode_V311,
xSensor:=DI_V311,
xOnAuto:= OnAuto_V311,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V311,
xDO_On=> DO_V311,
wError=> wAlm_V311,
xState=> xState_V311);

Valve_V401
(xManualMode:= ManualMode_V401,
xSensor:=DI_V401,
xOnAuto:= OnAuto_V401,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V401,
xDO_On=> DO_V401,
wError=> wAlm_V401,
xState=> xState_V401);

Valve_V402
(xManualMode:= ManualMode_V402,
xSensor:=DI_V402,
xOnAuto:= OnAuto_V402,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V402,
xDO_On=> DO_V402,
wError=> wAlm_V402,
xState=> xState_V402);

Valve_V403
(xManualMode:= ManualMode_V403,
xSensor:=DI_V403,
xOnAuto:= OnAuto_V403,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V403,
xDO_On=> DO_V403,
wError=> wAlm_V403,
xState=> xState_V403);

Valve_V404
(xManualMode:= ManualMode_V404,
xSensor:=DI_V404,
xOnAuto:= OnAuto_V404,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V404,
xDO_On=> DO_V404,
wError=> wAlm_V404,
xState=> xState_V404);

Valve_V405
(xManualMode:= ManualMode_V405,
xSensor:=DI_V405,
xOnAuto:= OnAuto_V405,
xResetError:= xResetErrorValves,
 xOnManual:= OnManual_V405,
xDO_On=> DO_V405,
wError=> wAlm_V405,
xState=> xState_V405);

Valve_V406
(xManualMode:= ManualMode_V406,
xSensor:=DI_V406,
xInterlock:= DI_AlkaliUpperLevel,
xOnAuto:= OnAuto_V406,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V406,
xDO_On=> DO_V406,
wError=> wAlm_V406,
xState=> xState_V406);

Valve_V407
(xManualMode:= ManualMode_V407,
xSensor:=DI_V407,
xInterlock:= DI_AccidUpperLevel,
xOnAuto:= OnAuto_V407,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V407,
xDO_On=> DO_V407,
wError=> wAlm_V407,
xState=> xState_V407);

Valve_V408
(xManualMode:= ManualMode_V408,
xSensor:=DI_V408,
xInterlock:= DI_UsedWaterUpperLevel,
xOnAuto:= OnAuto_V408,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V408,
xDO_On=> DO_V408,
wError=> wAlm_V408,
xState=> xState_V408);

Valve_V409
(xManualMode:= ManualMode_V409,
xSensor:=DI_V409,
wOffDelay:=1,
xOnAuto:= OnAuto_V409,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V409,
xDO_On=> DO_V409,
wError=> wAlm_V409,
xState=> xState_V409);

Valve_V410
(xManualMode:= ManualMode_V410,
xSensor:=DI_V410,
xOnAuto:= OnAuto_V410,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V410,
xDO_On=> DO_V410,
wError=> wAlm_V410,
xState=> xState_V410);

Valve_V411
(xManualMode:= ManualMode_V411,
xSensor:=DI_V411,
xOnAuto:= OnAuto_V411,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V411,
xDO_On=> DO_V411,
wError=> wAlm_V411,
xState=> xState_V411);

Valve_V510
(xManualMode:= ManualMode_V510,
xSensor:=DI_V510,
xOnAuto:= OnAuto_V510,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V510,
xDO_On=> DO_V510,
wError=> wAlm_V510,
xState=> xState_V510);

Valve_V511
(xManualMode:= ManualMode_V511,
xSensor:=DI_V511,
xOnAuto:= OnAuto_V511,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V511,
xDO_On=> DO_V511,
wError=> wAlm_V511,
xState=> xState_V511);

Valve_V512
(xManualMode:= ManualMode_V512,
xSensor:=DI_V512,
xOnAuto:= OnAuto_V512,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V512,
xDO_On=> DO_V512,
wError=> wAlm_V512,
xState=> xState_V512);

Valve_V513
(xManualMode:= ManualMode_V513,
xSensor:=DI_V513,
xOnAuto:= OnAuto_V513,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V513,
xDO_On=> DO_V513,
wError=> wAlm_V513,
xState=> xState_V513);

Valve_V514
(xManualMode:= ManualMode_V514,
xSensor:=DI_V514,
xOnAuto:= OnAuto_V514,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V514,
xDO_On=> DO_V514,
wError=> wAlm_V514,
xState=> xState_V514);

Valve_V515
(xManualMode:= ManualMode_V515,
xSensor:=DI_V515,
xOnAuto:= OnAuto_V515,
xResetError:= xResetErrorValves,
xOnManual:= OnManual_V515,
xDO_On=> DO_V515,
wError=> wAlm_V515,
xState=> xState_V515);



(*
xOnAutoWorking:= wWashingStateLine1 > 0 OR wWashingStateLine2 > 0
					OR wWashingStateLine3 > 0 OR wWashingStateLine4 > 0
					OR wDissolvingStateLine1 > 0 OR wDissolvingStateLine2 > 0
					OR wDissolvingStateLine3 > 0 OR wDissolvingStateLine4 > 0
					OR SelfWashState > 0;

*)
WaterSupplyValve(
	xManualMode:= ManualMode_V501,
	xOnAutoWorking:= (*xOnAutoWorking*) TRUE,
	wOffDelay:= ,
	xSensor:= DO_V501(*DI_V501*),
	xStopSupplying:= xStopFillingWaterTank,
	rWaterLevel:= CleanWaterLevel,
	rWaterLevelNotOK:= rWaterLevelNotOK,
	xUpperLevel:= DI_WaterUpperLevel,
	xOnManual:= OnManual_V501,
	xDO_On=> DO_V501,
	xState=> xState_V501);
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Device' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prDevice
VAR
END_VAR
(* @END_DECLARATION := '0' *)
prSensors();
prHeater();

prPump();

prValve();
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Dissolving' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbDissolving
VAR_INPUT

	xDoAccid:					BOOL;
	xDoAlkali:					BOOL;
	xAlkaliUpperLevel:		BOOL;
	xAccidUpperLevel:		BOOL;
	rConcGet:					REAL;
	xV_AlkaliInOn:				BOOL;
	xV_AccidInOn:				BOOL;
	xV_WaterOutOn:			BOOL;
	xV_NotshortcutOn:		BOOL;
	xV_OutOn:					BOOL;

	rAlkaliConcSet: 			REAL;
	rWaterConcSet:			REAL;
	rAccidConcSet:			REAL;
	wConcPumpTimeAlk:		WORD:=60;
	wConcPumpTimeAcc:	WORD:=300;
	wConcMessureTime:		WORD:=5;
	wPumpFlawSet:			REAL;
	xPause:					BOOL;
	rAlkaliLevelSet:			REAL;
	rAccidLevelSet:			REAL;
	rAlkaliLevelGet:			REAL;
	rAccidLevelGet:			REAL;


END_VAR
VAR_IN_OUT

	xStart:						BOOL;
	xVout:						BOOL;
	xV_Notshortcut:			BOOL;
	xV_WaterOut:				BOOL;
	xV_Cycle:					BOOL;
	xV_Drainage:				BOOL;
	xV_AlkaliOut:				BOOL;
	xV_AccidOut:				BOOL;
	xV_AlkaliIn:				BOOL;
	xV_AccidIn:				BOOL;

	xPump:					BOOL;
	xResetErrors:				BOOL;
	xPA_Alkali:					BOOL;
	xPA_Accid:					BOOL;
	wPumpFlawOut:			REAL;

	xAlkaliIsReady:			BOOL;
	xAccidIsReady:			BOOL;


END_VAR


VAR_OUTPUT

	State:					Dissolving_States;
	PauseState:			Dissolving_States;
	wError:					WORD;


END_VAR
VAR
	rtStart:					R_TRIG;
	rtPause:				R_TRIG;
	ftStart:					F_TRIG;
	tnWaitErr:				TON;
	tnConc:				TON;
	tnPA:					TON;
	xAccidIsGoing:			BOOL;


END_VAR
(* @END_DECLARATION := '0' *)
rtStart(CLK:=xStart);
ftStart(CLK:=xStart);
rtPause(CLK:=xPause);


IF rtStart.Q THEN
	xAlkaliIsReady:=NOT xDoAlkali;
	xAccidIsReady:=NOT xDoAccid;
	wPumpFlawOut:=wPumpFlawSet;
	tnConc(IN:=FALSE);
	tnPA(IN:=FALSE);
	xPause:=	FALSE;
	State:=WaterStart;
END_IF

IF ftStart.Q THEN
	wError:=0;
	xVout:=					FALSE;
	xV_Notshortcut:=		FALSE;

	xV_AlkaliIn:=			FALSE;
	xV_AccidIn:=			FALSE;
	xV_WaterOut:=		FALSE;
	xV_AlkaliOut:=			FALSE;
	xV_AccidOut:=			FALSE;
	xV_Cycle:=				FALSE;
	xV_Drainage:=		FALSE;
	xPump:=				FALSE;
	xPA_Alkali:= 			FALSE;
	xPA_Accid:=			FALSE;
	xPause:=				FALSE;
	State:=					DissolvingStop;
END_IF

IF rtPause.Q THEN
	PauseState:=State;
	xPump:= FALSE;
	xPA_Alkali:= FALSE;
	xPA_Accid:=FALSE;
	State:=DissolvingPause;
END_IF

CASE State OF



			DissolvingStop:
							;


			DissolvingPause:

				IF NOT xPause THEN
					State:= PauseState;
				END_IF



			WaterStart:

				xV_Notshortcut:=		FALSE;
				xVout:= 				FALSE;

				tnWaitErr(IN:= (xV_NotshortcutOn OR xV_OutOn), PT:=T#20S);
				IF tnWaitErr.Q THEN
					wError.0:=TRUE;
				END_IF
				xPump:= TRUE;
				IF NOT (xV_NotshortcutOn OR xV_OutOn) THEN
					IF xDoAlkali THEN
						State:=AlkaliTankFullUp;
					ELSIF xDoAccid THEN
						State:=AccidTankFullUp;
					END_IF
				END_IF



			AlkaliTankFullUp:


				IF rAlkaliLevelGet > rAlkaliLevelSet THEN
					State:=AlkaliConc;
				END_IF

				IF NOT (xV_NotshortcutOn OR xV_OutOn) THEN
					xV_WaterOut:= 	TRUE;
					xV_AlkaliIn:=		TRUE;
					xV_Drainage:=	TRUE;
				END_IF


				IF xV_AlkaliInOn AND xV_WaterOutOn THEN
					xPump:=TRUE;
				END_IF




			AlkaliConc:

				xAccidIsGoing:=	FALSE;
				xV_WaterOut:= 	FALSE;
				xV_AlkaliOut:=		TRUE;
				xV_AlkaliIn:=		TRUE;
				xPA_Alkali:=		TRUE;
				xPump:=TRUE;

				tnPA(IN:=xPA_Alkali, PT:= (WORD_TO_TIME(wConcPumpTimeAlk)*1000));
				IF tnPA.Q THEN
					xPA_Alkali:=FALSE;
					tnPA(IN:=FALSE);
					State:= AlkaliConcMessure;
				END_IF



			AlkaliConcMessure:

				xPump:=TRUE;
				tnConc(IN:= TRUE, PT:=(WORD_TO_TIME(wConcMessureTime)*1000));
				IF tnConc.Q THEN
					tnConc(IN:= FALSE);
					IF rAlkaliConcSet  <  rConcGet THEN
						xAlkaliIsReady:=TRUE;
						State:= WaterAfter;
					ELSE
						xAlkaliIsReady:=FALSE;
						State:= AlkaliConc;
					END_IF
				END_IF



			WaterAfter:


				xV_AlkaliIn:=		FALSE;
				xV_AccidIn:=		FALSE;
				xV_Drainage:=	FALSE;
				xV_AlkaliOut:=		FALSE;
				xV_AccidOut:=		FALSE;
				xV_WaterOut:= 	TRUE;
				xPump:=			TRUE;

				tnConc(IN:=  rConcGet < 0.1, PT:=T#80S);
				IF tnConc.Q THEN
					tnConc(IN:=FALSE);
					IF xAccidIsReady OR (NOT xDoAccid) THEN
						xStart:=FALSE;
					ELSIF xDoAccid THEN
						State:= AccidTankFullUp;
					END_IF
				END_IF


			AccidTankFullUp:


				IF rAccidLevelGet > rAccidLevelSet THEN
					State:=AccidConc;
				END_IF

				IF NOT (xV_NotshortcutOn OR xV_OutOn) THEN
					xV_WaterOut:= 	TRUE;
					xV_AccidIn:=		TRUE;
					xV_Drainage:=	TRUE;
				END_IF

				IF xV_AccidInOn AND xV_WaterOutOn THEN
					xPump:=TRUE;
				END_IF




			AccidConc:

				xAccidIsGoing:=	TRUE;
				xV_WaterOut:= 	FALSE;
				xV_AccidOut:=		TRUE;
				xV_AccidIn:=		TRUE;
				xPA_Accid:=		TRUE;
				xV_Drainage:=	TRUE;
				xPump:=			TRUE;

				tnPA(IN:=xPA_Accid, PT:= (WORD_TO_TIME(wConcPumpTimeAcc)*1000));
				IF tnPA.Q THEN
					xPA_Accid:=FALSE;
					tnPA(IN:=FALSE);
					State:= AccidConcMessure;
				END_IF





		AccidConcMessure:

				xPump:=TRUE;
				tnConc(IN:= TRUE, PT:=(WORD_TO_TIME(wConcMessureTime)*1000));
				IF tnConc.Q THEN
					tnConc(IN:= FALSE);
					IF rAccidConcSet  <  rConcGet THEN
						xAccidIsReady:=TRUE;
						State:= WaterAfter;
					ELSE
						xAccidIsReady:=FALSE;
						State:= AccidConc;
					END_IF
				END_IF


END_CASE
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Dissolving' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prDissolvingLine1
VAR
	Dissolving1:			fbDissolving;
	xResetErrors: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
Dissolving1(
					xDoAccid:=xDissilDoAccid AND wDissolLineAccid = 1,
					xDoAlkali:=xDissolDoAlkali AND wDissolLineAlkali =1,
					xAlkaliUpperLevel:= DI_AlkaliUpperLevel,
					xAccidUpperLevel:= DI_AccidUpperLevel,
					rConcGet:= Conc_Line1,
					xV_AlkaliInOn:= xState_V106,
					xV_AccidInOn:= xState_V107,
					xV_WaterOutOn:= xState_V101,
					xV_NotshortcutOn:= xState_V110,
					xV_OutOn:=xState_V111,
					wConcPumpTimeAlk:= rPA_WorkTime_Alk,
					wConcPumpTimeAcc:= rPA_WorkTime_Acc,

					wConcMessureTime:= rConcCheckTime,
					rAlkaliConcSet:= rDissolAlkaliConcSet,
					rWaterConcSet:= rDissolWaterConcSet,
					rAccidConcSet:= rDissolAccidConcSet,

					rAlkaliLevelSet:= rDissolAlkaliLevelSet,
					rAccidLevelSet:= rDissolAccidLevelSet,
					rAlkaliLevelGet:= AlkaliLevel,
					rAccidLevelGet:=AccidLevel,

					xStart:= xDissolving_StartLine1,
					(*xAccidIsGoing:= xAccidIsGoing1,*)
					xPause:=xDissolving_PausetLine1,
					xVout:= OnAuto_V111,
					xV_Notshortcut:= OnAuto_V110,
					xV_WaterOut:= OnAuto_V101,
					xV_Cycle:= OnAuto_V105,
					xV_Drainage:= OnAuto_V109,
					xV_AlkaliOut:= OnAuto_V104,
					xV_AccidOut:= OnAuto_V103,
					xV_AlkaliIn:= OnAuto_V106,
					xV_AccidIn:= OnAuto_V107,
					xPump:= Pump_OnAuto_1,
					xResetErrors:= xResetErrors,
					xPA_Alkali:= PA_OnAuto_12,
					xPA_Accid:= PA_OnAuto_11,
					wPumpFlawSet:= wFlawDissolving,
					wPumpFlawOut:= Pump_FlawAutoSet_1,
					xAlkaliIsReady:= xAlkaliIsReady,
					xAccidIsReady:= xAccidIsReady,
					State=> wDissolvingStateLine1,
					PauseState=>(*wDissolvingPauseStateLine1*),
					wError=> wDissolvingError);
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Dissolving' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prDissolvingLine2
VAR
	Dissolving2:			fbDissolving;
	xResetErrors: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF wWashingStateLine2 = 0 THEN
Dissolving2(
					xDoAccid:=xDissilDoAccid AND wDissolLineAccid = 2,
					xDoAlkali:=xDissolDoAlkali AND wDissolLineAlkali =2,
					xAlkaliUpperLevel:= DI_AlkaliUpperLevel,
					xAccidUpperLevel:= DI_AccidUpperLevel,
					rConcGet:= Conc_Line2,
					xV_AlkaliInOn:= xState_V206,
					xV_AccidInOn:= xState_V207,
					xV_WaterOutOn:= xState_V201,
					xV_NotshortcutOn:= xState_V210,
					xV_OutOn:=xState_V211,
					wConcPumpTimeAlk:= rPA_WorkTime_Alk,
					wConcPumpTimeAcc:= rPA_WorkTime_Acc,
					wConcMessureTime:= rConcCheckTime,
					rAlkaliConcSet:= rDissolAlkaliConcSet,
					rWaterConcSet:= rDissolWaterConcSet,
					rAccidConcSet:= rDissolAccidConcSet,

					rAlkaliLevelSet:= rDissolAlkaliLevelSet,
					rAccidLevelSet:= rDissolAccidLevelSet,
					rAlkaliLevelGet:= AlkaliLevel,
					rAccidLevelGet:=AccidLevel,

					xStart:= xDissolving_StartLine2,
					(*xAccidIsGoing:= xAccidIsGoing2,*)
					xPause:=xDissolving_PausetLine2,
					xVout:= OnAuto_V211,
					xV_Notshortcut:= OnAuto_V210,
					xV_WaterOut:= OnAuto_V201,
					xV_Cycle:= OnAuto_V205,
					xV_Drainage:= OnAuto_V209,
					xV_AlkaliOut:= OnAuto_V204,
					xV_AccidOut:= OnAuto_V203,
					xV_AlkaliIn:= OnAuto_V206,
					xV_AccidIn:= OnAuto_V207,
					xPump:= Pump_OnAuto_2,
					xResetErrors:= xResetErrors,
					xPA_Alkali:= PA_OnAuto_12,
					xPA_Accid:= PA_OnAuto_11,
					wPumpFlawSet:= wFlawDissolving,
					wPumpFlawOut:= Pump_FlawAutoSet_2,
					xAlkaliIsReady:= xAlkaliIsReady,
					xAccidIsReady:= xAccidIsReady,
					State=> wDissolvingStateLine2,
					PauseState=>(*wDissolvingPauseStateLine2*),
					wError=> wDissolvingError);
END_IF
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Dissolving' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prDissolvingLine3
VAR
	Dissolving3:			fbDissolving;
	xResetErrors: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF wWashingStateLine3 = 0 THEN
Dissolving3(
					xDoAccid:=xDissilDoAccid AND wDissolLineAccid = 3,
					xDoAlkali:=xDissolDoAlkali AND wDissolLineAlkali =3,
					xAlkaliUpperLevel:= DI_AlkaliUpperLevel,
					xAccidUpperLevel:= DI_AccidUpperLevel,
					rConcGet:= Conc_Line3,
					xV_AlkaliInOn:= xState_V306,
					xV_AccidInOn:= xState_V307,
					xV_WaterOutOn:= xState_V301,
					xV_NotshortcutOn:= xState_V310,
					xV_OutOn:=xState_V311,
					wConcPumpTimeAlk:= rPA_WorkTime_Alk,
					wConcPumpTimeAcc:= rPA_WorkTime_Acc,
					wConcMessureTime:= rConcCheckTime,
					rAlkaliConcSet:= rDissolAlkaliConcSet,
					rWaterConcSet:= rDissolWaterConcSet,
					rAccidConcSet:= rDissolAccidConcSet,

					rAlkaliLevelSet:= rDissolAlkaliLevelSet,
					rAccidLevelSet:= rDissolAccidLevelSet,
					rAlkaliLevelGet:= AlkaliLevel,
					rAccidLevelGet:=AccidLevel,

					xStart:= xDissolving_StartLine3,
					(*xAccidIsGoing:= xAccidIsGoing3,*)
					xPause:=xDissolving_PausetLine3,
					xVout:= OnAuto_V311,
					xV_Notshortcut:= OnAuto_V310,
					xV_WaterOut:= OnAuto_V301,
					xV_Cycle:= OnAuto_V305,
					xV_Drainage:= OnAuto_V309,
					xV_AlkaliOut:= OnAuto_V304,
					xV_AccidOut:= OnAuto_V303,
					xV_AlkaliIn:= OnAuto_V306,
					xV_AccidIn:= OnAuto_V307,
					xPump:= Pump_OnAuto_3,
					xResetErrors:= xResetErrors,
					xPA_Alkali:= PA_OnAuto_12,
					xPA_Accid:= PA_OnAuto_11,
					wPumpFlawSet:= wFlawDissolving,
					wPumpFlawOut:= Pump_FlawAutoSet_3,
					xAlkaliIsReady:= xAlkaliIsReady,
					xAccidIsReady:= xAccidIsReady,
					State=> wDissolvingStateLine3,
					PauseState=>(*wDissolvingPauseStateLine3*),
					wError=> wDissolvingError);
END_IF
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Dissolving' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prDissolvingLine4
VAR
	Dissolving4:			fbDissolving;
	xResetErrors: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF wWashingStateLine4 = 0 THEN
Dissolving4(
					xDoAccid:=xDissilDoAccid AND wDissolLineAccid = 4,
					xDoAlkali:=xDissolDoAlkali AND wDissolLineAlkali =4,
					xAlkaliUpperLevel:= DI_AlkaliUpperLevel,
					xAccidUpperLevel:= DI_AccidUpperLevel,
					rConcGet:= Conc_Line4,
					xV_AlkaliInOn:= xState_V406,
					xV_AccidInOn:= xState_V407,
					xV_WaterOutOn:= xState_V401,
					xV_NotshortcutOn:= xState_V410,
					xV_OutOn:=xState_V411,
					wConcPumpTimeAlk:= rPA_WorkTime_Alk,
					wConcPumpTimeAcc:= rPA_WorkTime_Acc,
					wConcMessureTime:= rConcCheckTime,
					rAlkaliConcSet:= rDissolAlkaliConcSet,
					rWaterConcSet:= rDissolWaterConcSet,
					rAccidConcSet:= rDissolAccidConcSet,

					rAlkaliLevelSet:= rDissolAlkaliLevelSet,
					rAccidLevelSet:= rDissolAccidLevelSet,
					rAlkaliLevelGet:= AlkaliLevel,
					rAccidLevelGet:=AccidLevel,

					xStart:= xDissolving_StartLine4,
					(*xAccidIsGoing:= xAccidIsGoing4,*)
					xPause:=xDissolving_PausetLine4,
					xVout:= OnAuto_V411,
					xV_Notshortcut:= OnAuto_V410,
					xV_WaterOut:= OnAuto_V401,
					xV_Cycle:= OnAuto_V405,
					xV_Drainage:= OnAuto_V409,
					xV_AlkaliOut:= OnAuto_V404,
					xV_AccidOut:= OnAuto_V403,
					xV_AlkaliIn:= OnAuto_V406,
					xV_AccidIn:= OnAuto_V407,
					xPump:= Pump_OnAuto_4,
					xResetErrors:= xResetErrors,
					xPA_Alkali:= PA_OnAuto_12,
					xPA_Accid:= PA_OnAuto_11,
					wPumpFlawSet:= wFlawDissolving,
					wPumpFlawOut:= Pump_FlawAutoSet_4,
					xAlkaliIsReady:= xAlkaliIsReady,
					xAccidIsReady:= xAccidIsReady,
					State=> wDissolvingStateLine4,
					PauseState=>(*wDissolvingPauseStateLine4*),
					wError=> wDissolvingError);
END_IF
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Dissolving' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prDissolvingProcess
VAR
	rtStart:	R_TRIG;
	ftStart:	F_TRIG;
	ftStop:	R_TRIG;
	rtAlkaliStart:	R_TRIG;
	rtAccidStart:	R_TRIG;
	ftAlkaliStart:	F_TRIG;
	ftAccidStart:	F_TRIG;
	ftAlkaliStop:	F_TRIG;
	ftAccidStop:	F_TRIG;
	ftPauseAlkAcc:	F_TRIG;
	rtPause:	R_TRIG;
	ftPause:	F_TRIG;

END_VAR
(* @END_DECLARATION := '0' *)
IF xDissolDoAlkali THEN
	CASE wDissolLineAlkali OF

				1:

					ftAlkaliStart(CLK:=xDissolving_StartLine1);
					IF ftAlkaliStart.Q THEN
						xStartDissolvingAlkali:=FALSE;
						xPauseDissolvingAlkali:=FALSE;
					END_IF
					xDissolving_PausetLine1:=xPauseDissolvingAlkali;
					IF SelfWashState = 0 THEN
						prDissolvingLine1();
					END_IF

				2:

					ftAlkaliStart(CLK:=xDissolving_StartLine2);
					IF ftAlkaliStart.Q THEN
						xStartDissolvingAlkali:=FALSE;
						xPauseDissolvingAlkali:=FALSE;
					END_IF
					xDissolving_PausetLine2:=xPauseDissolvingAlkali;
					prDissolvingLine2();
				3:

					ftAlkaliStart(CLK:=xDissolving_StartLine3);
					IF ftAlkaliStart.Q THEN
						xStartDissolvingAlkali:=FALSE;
						xPauseDissolvingAlkali:=FALSE;
					END_IF
					xDissolving_PausetLine3:=xPauseDissolvingAlkali;
					prDissolvingLine3();
				4:

					ftAlkaliStart(CLK:=xDissolving_StartLine4);
					IF ftAlkaliStart.Q THEN
						xStartDissolvingAlkali:=FALSE;
						xPauseDissolvingAlkali:=FALSE;
					END_IF
					xDissolving_PausetLine4:=xPauseDissolvingAlkali;
					prDissolvingLine4();

	END_CASE
END_IF

IF (wDissolLineAccid <> wDissolLineAlkali OR(NOT xDissolDoAlkali) ) AND xDissilDoAccid THEN
	CASE wDissolLineAccid OF

				1:
					prDissolvingLine1();
					ftAccidStart(CLK:=xDissolving_StartLine1);
					xDissolving_PausetLine1:=xPauseDissolvingAccid;
					IF ftAccidStart.Q THEN
						xStartDissolvingAccid:=FALSE;
						xPauseDissolvingAccid:=FALSE;
					END_IF
				2:
					prDissolvingLine2();
					ftAccidStart(CLK:=xDissolving_StartLine2);
					xDissolving_PausetLine2:=xPauseDissolvingAccid;
					IF ftAccidStart.Q THEN
						xStartDissolvingAccid:=FALSE;
						xPauseDissolvingAccid:=FALSE;
					END_IF
				3:
					prDissolvingLine3();
					ftAccidStart(CLK:=xDissolving_StartLine3);
					xDissolving_PausetLine3:=xPauseDissolvingAccid;
					IF ftAccidStart.Q THEN
						xStartDissolvingAccid:=FALSE;
						xPauseDissolvingAccid:=FALSE;
					END_IF
				4:
					prDissolvingLine4();
					ftAccidStart(CLK:=xDissolving_StartLine4);
					xDissolving_PausetLine4:=xPauseDissolvingAccid;
					IF ftAccidStart.Q THEN
						xStartDissolvingAccid:=FALSE;
						xPauseDissolvingAccid:=FALSE;
					END_IF

	END_CASE
END_IF


rtStart(CLK:=xDissolving_Start);
IF rtStart.Q THEN
	xDissolving_StartLine1:=	wWashingStateLine1 = 0 AND ((wDissolLineAccid = 1 AND xDissilDoAccid) OR (wDissolLineAlkali =1 AND xDissolDoAlkali));
	xDissolving_StartLine2:=	wWashingStateLine2 = 0 AND ((wDissolLineAccid = 2 AND xDissilDoAccid) OR (wDissolLineAlkali =2 AND xDissolDoAlkali));
	xDissolving_StartLine3:=	wWashingStateLine3 = 0 AND ((wDissolLineAccid = 3 AND xDissilDoAccid) OR (wDissolLineAlkali =3 AND xDissolDoAlkali));
	xDissolving_StartLine4:=	wWashingStateLine4 = 0 AND ((wDissolLineAccid = 4 AND xDissilDoAccid) OR (wDissolLineAlkali =4 AND xDissolDoAlkali));
	xStartDissolvingAlkali:=	xDissolDoAlkali;
	xStartDissolvingAccid:=	xDissilDoAccid;
END_IF

ftStart(CLK:=xDissolving_Start);
IF ftStart.Q THEN
	xDissolving_StartLine1:=	FALSE;
	xDissolving_StartLine2:=	FALSE;
	xDissolving_StartLine3:=	FALSE;
	xDissolving_StartLine4:=	FALSE;
	xStartDissolvingAlkali:=	FALSE;
	xStartDissolvingAccid:=	FALSE;
END_IF
(*
ftStop(CLK:=(xDissolving_StartLine1 OR xDissolving_StartLine2 OR xDissolving_StartLine3 OR xDissolving_StartLine4));

IF ftStop.Q THEN
	xDissolving_Start:=FALSE;
END_IF
*)
rtAlkaliStart(CLK:=xStartDissolvingAlkali);
IF rtAlkaliStart.Q THEN
	CASE wDissolLineAlkali OF

				1: xDissolving_StartLine1:=	wWashingStateLine1 = 0 AND xDissolDoAlkali;
				2: xDissolving_StartLine2:=	wWashingStateLine2 = 0 AND xDissolDoAlkali;
				3: xDissolving_StartLine3:=	wWashingStateLine3 = 0 AND xDissolDoAlkali;
				4: xDissolving_StartLine4:=	wWashingStateLine4 = 0 AND xDissolDoAlkali;

	END_CASE
END_IF

ftAlkaliStop(CLK:=xStartDissolvingAlkali);
IF ftAlkaliStop.Q THEN
	CASE wDissolLineAlkali OF

				1: xDissolving_StartLine1:=	FALSE;
				2: xDissolving_StartLine2:=	FALSE;
				3: xDissolving_StartLine3:=	FALSE;
				4: xDissolving_StartLine4:=	FALSE;

	END_CASE
END_IF

rtAccidStart(CLK:=xStartDissolvingAccid);
IF rtAccidStart.Q THEN
	CASE wDissolLineAccid OF

				1: xDissolving_StartLine1:=	wWashingStateLine1 = 0 AND xDissilDoAccid;
				2: xDissolving_StartLine2:=	wWashingStateLine2 = 0 AND xDissilDoAccid;
				3: xDissolving_StartLine3:=	wWashingStateLine3 = 0 AND xDissilDoAccid;
				4: xDissolving_StartLine4:=	wWashingStateLine4 = 0 AND xDissilDoAccid;

	END_CASE
END_IF

ftAccidStop(CLK:=xStartDissolvingAccid);
IF ftAccidStop.Q THEN
	CASE wDissolLineAccid OF

				1: xDissolving_StartLine1:=	FALSE;
				2: xDissolving_StartLine2:=	FALSE;
				3: xDissolving_StartLine3:=	FALSE;
				4: xDissolving_StartLine4:=	FALSE;

	END_CASE
END_IF
IF NOT(xDissolving_StartLine1 OR xDissolving_StartLine2 OR xDissolving_StartLine3 OR xDissolving_StartLine4) THEN
	xDissolving_Start:=FALSE;
END_IF
rtPause(CLK:=xDissolving_Pause);
ftPause(CLK:=xDissolving_Pause);
ftPauseAlkAcc(CLK:= xPauseDissolvingAccid OR xPauseDissolvingAlkali);

IF rtPause.Q THEN
	xPauseDissolvingAccid:=TRUE;
	xPauseDissolvingAlkali:=TRUE;
END_IF
IF ftPause.Q THEN
	xPauseDissolvingAccid:=FALSE;
	xPauseDissolvingAlkali:=FALSE;
END_IF

IF ftPauseAlkAcc.Q THEN
	xDissolving_Pause:=FALSE;
END_IF


prDissolvStateBits();
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Dissolving' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prDissolvStateBits
VAR
END_VAR
(* @END_DECLARATION := '0' *)
wDissolvingStateBitsLine1.0	:=	wDissolvingStateLine1 = 0	;
wDissolvingStateBitsLine1.1	:=	wDissolvingStateLine1 = 1	;
wDissolvingStateBitsLine1.2	:=	wDissolvingStateLine1 = 2	;
wDissolvingStateBitsLine1.3	:=	wDissolvingStateLine1 = 3	;
wDissolvingStateBitsLine1.4	:=	wDissolvingStateLine1 = 4	;
wDissolvingStateBitsLine1.5	:=	wDissolvingStateLine1 = 5	;
wDissolvingStateBitsLine1.6	:=	wDissolvingStateLine1 = 6	;
wDissolvingStateBitsLine1.7	:=	wDissolvingStateLine1 = 7	;
wDissolvingStateBitsLine1.8	:=	wDissolvingStateLine1 = 8	;
wDissolvingStateBitsLine1.9	:=	wDissolvingStateLine1 = 9	;
wDissolvingStateBitsLine1.10	:=	wDissolvingStateLine1 = 10	;
wDissolvingStateBitsLine1.11	:=	wDissolvingStateLine1 = 11	;
wDissolvingStateBitsLine1.12	:=	wDissolvingStateLine1 = 12	;
wDissolvingStateBitsLine1.13	:=	wDissolvingStateLine1 = 13	;
wDissolvingStateBitsLine1.14	:=	wDissolvingStateLine1 = 14	;
wDissolvingStateBitsLine1.15	:=	wDissolvingStateLine1 = 15	;
wDissolvingStateBitsLine1.16	:=	wDissolvingStateLine1 = 16	;
wDissolvingStateBitsLine1.17	:=	wDissolvingStateLine1 = 17	;
wDissolvingStateBitsLine1.18	:=	wDissolvingStateLine1 = 18	;
wDissolvingStateBitsLine1.19	:=	wDissolvingStateLine1 = 19	;
wDissolvingStateBitsLine1.20	:=	wDissolvingStateLine1 = 20	;
wDissolvingStateBitsLine1.21	:=	wDissolvingStateLine1 = 21	;
wDissolvingStateBitsLine1.22	:=	wDissolvingStateLine1 = 22	;
wDissolvingStateBitsLine1.23	:=	wDissolvingStateLine1 = 23	;
wDissolvingStateBitsLine1.24	:=	wDissolvingStateLine1 = 24	;
wDissolvingStateBitsLine1.25	:=	wDissolvingStateLine1 = 25	;
wDissolvingStateBitsLine1.26	:=	wDissolvingStateLine1 = 26	;
			
wDissolvingStateBitsLine2.0	:=	wDissolvingStateLine2 = 0	;
wDissolvingStateBitsLine2.1	:=	wDissolvingStateLine2 = 1	;
wDissolvingStateBitsLine2.2	:=	wDissolvingStateLine2 = 2	;
wDissolvingStateBitsLine2.3	:=	wDissolvingStateLine2 = 3	;
wDissolvingStateBitsLine2.4	:=	wDissolvingStateLine2 = 4	;
wDissolvingStateBitsLine2.5	:=	wDissolvingStateLine2 = 5	;
wDissolvingStateBitsLine2.6	:=	wDissolvingStateLine2 = 6	;
wDissolvingStateBitsLine2.7	:=	wDissolvingStateLine2 = 7	;
wDissolvingStateBitsLine2.8	:=	wDissolvingStateLine2 = 8	;
wDissolvingStateBitsLine2.9	:=	wDissolvingStateLine2 = 9	;
wDissolvingStateBitsLine2.10	:=	wDissolvingStateLine2 = 10	;
wDissolvingStateBitsLine2.11	:=	wDissolvingStateLine2 = 11	;
wDissolvingStateBitsLine2.12	:=	wDissolvingStateLine2 = 12	;
wDissolvingStateBitsLine2.13	:=	wDissolvingStateLine2 = 13	;
wDissolvingStateBitsLine2.14	:=	wDissolvingStateLine2 = 14	;
wDissolvingStateBitsLine2.15	:=	wDissolvingStateLine2 = 15	;
wDissolvingStateBitsLine2.16	:=	wDissolvingStateLine2 = 16	;
wDissolvingStateBitsLine2.17	:=	wDissolvingStateLine2 = 17	;
wDissolvingStateBitsLine2.18	:=	wDissolvingStateLine2 = 18	;
wDissolvingStateBitsLine2.19	:=	wDissolvingStateLine2 = 19	;
wDissolvingStateBitsLine2.20	:=	wDissolvingStateLine2 = 20	;
wDissolvingStateBitsLine2.21	:=	wDissolvingStateLine2 = 21	;
wDissolvingStateBitsLine2.22	:=	wDissolvingStateLine2 = 22	;
wDissolvingStateBitsLine2.23	:=	wDissolvingStateLine2 = 23	;
wDissolvingStateBitsLine2.24	:=	wDissolvingStateLine2 = 24	;
wDissolvingStateBitsLine2.25	:=	wDissolvingStateLine2 = 25	;
wDissolvingStateBitsLine2.26	:=	wDissolvingStateLine2 = 26	;
			
wDissolvingStateBitsLine3.0	:=	wDissolvingStateLine3 = 0	;
wDissolvingStateBitsLine3.1	:=	wDissolvingStateLine3 = 1	;
wDissolvingStateBitsLine3.2	:=	wDissolvingStateLine3 = 2	;
wDissolvingStateBitsLine3.3	:=	wDissolvingStateLine3 = 3	;
wDissolvingStateBitsLine3.4	:=	wDissolvingStateLine3 = 4	;
wDissolvingStateBitsLine3.5	:=	wDissolvingStateLine3 = 5	;
wDissolvingStateBitsLine3.6	:=	wDissolvingStateLine3 = 6	;
wDissolvingStateBitsLine3.7	:=	wDissolvingStateLine3 = 7	;
wDissolvingStateBitsLine3.8	:=	wDissolvingStateLine3 = 8	;
wDissolvingStateBitsLine3.9	:=	wDissolvingStateLine3 = 9	;
wDissolvingStateBitsLine3.10	:=	wDissolvingStateLine3 = 10	;
wDissolvingStateBitsLine3.11	:=	wDissolvingStateLine3 = 11	;
wDissolvingStateBitsLine3.12	:=	wDissolvingStateLine3 = 12	;
wDissolvingStateBitsLine3.13	:=	wDissolvingStateLine3 = 13	;
wDissolvingStateBitsLine3.14	:=	wDissolvingStateLine3 = 14	;
wDissolvingStateBitsLine3.15	:=	wDissolvingStateLine3 = 15	;
wDissolvingStateBitsLine3.16	:=	wDissolvingStateLine3 = 16	;
wDissolvingStateBitsLine3.17	:=	wDissolvingStateLine3 = 17	;
wDissolvingStateBitsLine3.18	:=	wDissolvingStateLine3 = 18	;
wDissolvingStateBitsLine3.19	:=	wDissolvingStateLine3 = 19	;
wDissolvingStateBitsLine3.20	:=	wDissolvingStateLine3 = 20	;
wDissolvingStateBitsLine3.21	:=	wDissolvingStateLine3 = 21	;
wDissolvingStateBitsLine3.22	:=	wDissolvingStateLine3 = 22	;
wDissolvingStateBitsLine3.23	:=	wDissolvingStateLine3 = 23	;
wDissolvingStateBitsLine3.24	:=	wDissolvingStateLine3 = 24	;
wDissolvingStateBitsLine3.25	:=	wDissolvingStateLine3 = 25	;
wDissolvingStateBitsLine3.26	:=	wDissolvingStateLine3 = 26	;
			
wDissolvingStateBitsLine4.0	:=	wDissolvingStateLine4 = 0	;
wDissolvingStateBitsLine4.1	:=	wDissolvingStateLine4 = 1	;
wDissolvingStateBitsLine4.2	:=	wDissolvingStateLine4 = 2	;
wDissolvingStateBitsLine4.3	:=	wDissolvingStateLine4 = 3	;
wDissolvingStateBitsLine4.4	:=	wDissolvingStateLine4 = 4	;
wDissolvingStateBitsLine4.5	:=	wDissolvingStateLine4 = 5	;
wDissolvingStateBitsLine4.6	:=	wDissolvingStateLine4 = 6	;
wDissolvingStateBitsLine4.7	:=	wDissolvingStateLine4 = 7	;
wDissolvingStateBitsLine4.8	:=	wDissolvingStateLine4 = 8	;
wDissolvingStateBitsLine4.9	:=	wDissolvingStateLine4 = 9	;
wDissolvingStateBitsLine4.10	:=	wDissolvingStateLine4 = 10	;
wDissolvingStateBitsLine4.11	:=	wDissolvingStateLine4 = 11	;
wDissolvingStateBitsLine4.12	:=	wDissolvingStateLine4 = 12	;
wDissolvingStateBitsLine4.13	:=	wDissolvingStateLine4 = 13	;
wDissolvingStateBitsLine4.14	:=	wDissolvingStateLine4 = 14	;
wDissolvingStateBitsLine4.15	:=	wDissolvingStateLine4 = 15	;
wDissolvingStateBitsLine4.16	:=	wDissolvingStateLine4 = 16	;
wDissolvingStateBitsLine4.17	:=	wDissolvingStateLine4 = 17	;
wDissolvingStateBitsLine4.18	:=	wDissolvingStateLine4 = 18	;
wDissolvingStateBitsLine4.19	:=	wDissolvingStateLine4 = 19	;
wDissolvingStateBitsLine4.20	:=	wDissolvingStateLine4 = 20	;
wDissolvingStateBitsLine4.21	:=	wDissolvingStateLine4 = 21	;
wDissolvingStateBitsLine4.22	:=	wDissolvingStateLine4 = 22	;
wDissolvingStateBitsLine4.23	:=	wDissolvingStateLine4 = 23	;
wDissolvingStateBitsLine4.24	:=	wDissolvingStateLine4 = 24	;
wDissolvingStateBitsLine4.25	:=	wDissolvingStateLine4 = 25	;
wDissolvingStateBitsLine4.26	:=	wDissolvingStateLine4 = 26	;
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Recipe' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbRecipeOperate
VAR_INPUT

	wLine:							WORD;
	wRecipe:						WORD;


END_VAR

VAR_IN_OUT
	xSave:							BOOL;
	arAlkaliTime:					ARRAY[1..4, 1..10] OF WORD;
	arTalkaliSet: 					ARRAY[1..4, 1..10] OF WORD;
	arFlawAlkaliSet: 				ARRAY[1..4, 1..10] OF REAL;
	arConcAlkaliSet: 				ARRAY[1..4, 1..10] OF REAL;

	arAccidTime:					ARRAY[1..4, 1..10] OF WORD;
	arTaccidSet: 					ARRAY[1..4, 1..10] OF WORD;
	arFlawAccidSet: 				ARRAY[1..4, 1..10] OF REAL;
	arConcAccidSet:				ARRAY[1..4, 1..10] OF REAL;

	arWaterTime: 					ARRAY[1..4, 1..10] OF WORD;
	arTwaterSet: 					ARRAY[1..4, 1..10] OF WORD;
	arFlawWaterSet: 				ARRAY[1..4, 1..10] OF REAL;

	arAfterAccidWaterTime: 		ARRAY[1..4, 1..10] OF WORD;
	arTafterAccidWater: 			ARRAY[1..4, 1..10] OF WORD;
	arConcAfterAccidWaterSet: 	ARRAY[1..4, 1..10] OF REAL;

	arAfterAlkaliWaterTime: 		ARRAY[1..4, 1..10] OF WORD;
	arTafterAlkaliWater: 			ARRAY[1..4, 1..10] OF WORD;
	arConcAfterAlkaliWaterSet: 	ARRAY[1..4, 1..10] OF REAL;

	arTsterilSet: 					ARRAY[1..4, 1..10] OF WORD;
	arFlawSterilSet: 				ARRAY[1..4, 1..10] OF REAL;
	arConcSterilSet: 				ARRAY[1..4, 1..10] OF REAL;
	arSterilTime: 					ARRAY[1..4, 1..10] OF WORD;

	arFlawWaterAfterAlcaliSet:	ARRAY[1..4, 1..10] OF REAL;
	arFlawWaterAfterAccidSet:	ARRAY[1..4, 1..10] OF REAL;

	arWaterAfterSterilFlaw:		ARRAY[1..4, 1..10] OF REAL;
	arWaterAfterSterilConc:		ARRAY[1..4, 1..10] OF REAL;
	arWaterAfterSterilT:			ARRAY[1..4, 1..10] OF WORD;
	arWaterAfterSterilTime:		ARRAY[1..4, 1..10] OF WORD;
	arConcPumpTimeSteril:		ARRAY[1..4, 1..10] OF WORD;


	wAlkaliTime:					WORD;
	wTalkaliSet: 					WORD;
	wFlawAlkaliSet: 				REAL;
	wConcAlkaliSet: 				REAL;

	wAccidTime:					WORD;
	wTaccidSet: 					WORD;
	wFlawAccidSet: 				REAL;
	wConcAccidSet:				REAL;

	wWaterTime: 					WORD;
	wTwaterSet: 					WORD;
	wFlawWaterSet: 				REAL;
		
	wAfterAccidWaterTime: 		WORD;
	wTafterAccidWater: 			WORD;
	wConcAfterAccidWaterSet: 	REAL;
		
	wAfterAlkaliWaterTime: 		WORD;
	wTafterAlkaliWater: 			WORD;
	wConcAfterAlkaliWaterSet: 	REAL;

	wTsteril:						WORD;
	wFlawSteril:					REAL;
	rConcSteril:					REAL;
	wSterilTime:					WORD;

	rFlawWaterAfterAlcaliSet:		REAL;
	rFlawWaterAfterAccidSet:		REAL;

	rWaterAfterSterilFlaw:			REAL;
	rWaterAfterSterilConc:		REAL;
	rWaterAfterSterilT:				WORD;
	rWaterAfterSterilTime:			WORD;
	wConcPumpTimeSteril:		WORD;

END_VAR

VAR_OUTPUT
	arOperations:					ARRAY[0..7] OF BOOL;
	arOperations2x:					ARRAY[1..4,0..7] OF BOOL;
	arOperations3x:				ARRAY[1..4,1..10,0..7] OF BOOL;
END_VAR
VAR
	wLineOld:						WORD;
	wRecipeOld:					WORD;
END_VAR
(* @END_DECLARATION := '0' *)
IF (wLine <> wLineOld) OR (wRecipe <> wRecipeOld) THEN
	wLineOld:=wLine;
	wRecipeOld:=wRecipe;

	wAlkaliTime:=				arAlkaliTime[wLine, wRecipe];
	wTalkaliSet:= 				arTalkaliSet[wLine, wRecipe];
	wFlawAlkaliSet:= 			arFlawAlkaliSet[wLine, wRecipe];
	wConcAlkaliSet:= 			arConcAlkaliSet[wLine, wRecipe];
		
	wAccidTime:=				arAccidTime[wLine, wRecipe];
	wTaccidSet:= 				arTaccidSet[wLine, wRecipe];
	wFlawAccidSet:= 			arFlawAccidSet[wLine, wRecipe];
	wConcAccidSet:=			arConcAccidSet[wLine, wRecipe];

	wWaterTime:= 			arWaterTime[wLine, wRecipe];
	wTwaterSet:= 				arTwaterSet[wLine, wRecipe];
	wFlawWaterSet:= 			arFlawWaterSet[wLine, wRecipe];
		
	wAfterAccidWaterTime:= 		arAfterAccidWaterTime[wLine, wRecipe];
	wTafterAccidWater:= 			arTafterAccidWater[wLine, wRecipe];
	wConcAfterAccidWaterSet:= 	arConcAfterAccidWaterSet[wLine, wRecipe];
		
	wAfterAlkaliWaterTime:= 		arAfterAlkaliWaterTime[wLine, wRecipe];
	wTafterAlkaliWater:= 			arTafterAlkaliWater[wLine, wRecipe];
	wConcAfterAlkaliWaterSet:= 	arConcAfterAlkaliWaterSet[wLine, wRecipe];

	wTsteril:=						arTsterilSet[wLine, wRecipe];
	wFlawSteril:=					arFlawSterilSet[wLine, wRecipe];
	rConcSteril:=					arConcSterilSet[wLine, wRecipe];
	wSterilTime:=					arSterilTime[wLine, wRecipe];

	rFlawWaterAfterAlcaliSet:=					arFlawWaterAfterAlcaliSet[wLine, wRecipe];
	rFlawWaterAfterAccidSet:=					arFlawWaterAfterAccidSet[wLine, wRecipe];

	rWaterAfterSterilFlaw:=					arWaterAfterSterilFlaw[wLine, wRecipe];
	rWaterAfterSterilConc:=					arWaterAfterSterilConc[wLine, wRecipe];
	rWaterAfterSterilT:=						arWaterAfterSterilT[wLine, wRecipe];
	rWaterAfterSterilTime:=					arWaterAfterSterilTime[wLine, wRecipe];
	wConcPumpTimeSteril:=					arConcPumpTimeSteril[wLine, wRecipe];



END_IF

IF xSave THEN
	xSave:=FALSE;

	arAlkaliTime[wLine, wRecipe]:=				wAlkaliTime;
	arTalkaliSet[wLine, wRecipe]:= 				wTalkaliSet;
	arFlawAlkaliSet[wLine, wRecipe]:= 			wFlawAlkaliSet;
	arConcAlkaliSet[wLine, wRecipe]:= 			wConcAlkaliSet;

	arAccidTime[wLine, wRecipe]:=				wAccidTime;
	arTaccidSet[wLine, wRecipe]:= 				wTaccidSet;
	arFlawAccidSet[wLine, wRecipe]:= 			wFlawAccidSet;
	arConcAccidSet[wLine, wRecipe]:=			wConcAccidSet;
		
	arWaterTime[wLine, wRecipe]:= 				wWaterTime;
	arTwaterSet[wLine, wRecipe]:= 				wTwaterSet;
	arFlawWaterSet[wLine, wRecipe]:= 			wFlawWaterSet;
		
	arAfterAccidWaterTime[wLine, wRecipe]:= 		wAfterAccidWaterTime;
	arTafterAccidWater[wLine, wRecipe]:= 			wTafterAccidWater;
	arConcAfterAccidWaterSet[wLine, wRecipe]:= 	wConcAfterAccidWaterSet; 
		
	arAfterAlkaliWaterTime[wLine, wRecipe]:= 		wAfterAlkaliWaterTime;
	arTafterAlkaliWater[wLine, wRecipe]:= 			wTafterAlkaliWater;
	arConcAfterAlkaliWaterSet[wLine, wRecipe]:= 	wConcAfterAlkaliWaterSet;

	arTsterilSet[wLine, wRecipe]:= 					wTsteril;
	arFlawSterilSet[wLine, wRecipe]:= 				wFlawSteril;
	arConcSterilSet[wLine, wRecipe]:= 				rConcSteril;
	arSterilTime[wLine, wRecipe]:= 					wSterilTime;

	arFlawWaterAfterAlcaliSet[wLine, wRecipe]:= 				rFlawWaterAfterAlcaliSet;
	arFlawWaterAfterAccidSet[wLine, wRecipe]:= 				rFlawWaterAfterAccidSet;

	arWaterAfterSterilFlaw[wLine, wRecipe]:= 				rWaterAfterSterilFlaw;
	arWaterAfterSterilConc[wLine, wRecipe]:= 				rWaterAfterSterilConc;
	arWaterAfterSterilT[wLine, wRecipe]:= 					rWaterAfterSterilT;
	arWaterAfterSterilTime[wLine, wRecipe]:= 				rWaterAfterSterilTime;
	arConcPumpTimeSteril[wLine, wRecipe]:= 				wConcPumpTimeSteril;

	arOperations2x[wLine,0]:= wWaterTime>0;
	arOperations2x[wLine,1]:= wAlkaliTime>0;
	arOperations2x[wLine,2]:= wAfterAlkaliWaterTime>0;
	arOperations2x[wLine,3]:= wAccidTime>0;
	arOperations2x[wLine,4]:= wAfterAccidWaterTime>0;
	arOperations2x[wLine,5]:= wSterilTime>0;
	arOperations2x[wLine,6]:= rWaterAfterSterilTime>0;
	arOperations2x[wLine,7]:= TRUE;

	arOperations3x[wLine,wRecipe,0]:= wWaterTime>0;
	arOperations3x[wLine,wRecipe,1]:= wAlkaliTime>0;
	arOperations3x[wLine,wRecipe,2]:= wAfterAlkaliWaterTime>0;
	arOperations3x[wLine,wRecipe,3]:= wAccidTime>0;
	arOperations3x[wLine,wRecipe,4]:= wAfterAccidWaterTime>0;
	arOperations3x[wLine,wRecipe,5]:= wSterilTime>0;
	arOperations3x[wLine,wRecipe,6]:= rWaterAfterSterilTime>0;
	arOperations3x[wLine,wRecipe,7]:= TRUE;


END_IF
arOperations[0]:= wWaterTime>0;
arOperations[1]:= wAlkaliTime>0;
arOperations[2]:= wAfterAlkaliWaterTime>0;
arOperations[3]:= wAccidTime>0;
arOperations[4]:= wAfterAccidWaterTime>0;
arOperations[5]:= wSterilTime>0;
arOperations[6]:= rWaterAfterSterilTime>0;
arOperations[7]:= TRUE;


END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Recipe' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prRecipe
VAR
	RecipeOperate:	fbRecipeOperate;
END_VAR
(* @END_DECLARATION := '0' *)
RecipeOperate(
	wLine:= wLine,
	wRecipe:= wRecipe,
	xSave:= xSave,
	arAlkaliTime:= 	arAlkaliTime,
	arTalkaliSet:= 	arTalkaliSet,
	arFlawAlkaliSet:= 	arFlawAlkaliSet, 
	arConcAlkaliSet:= 	arConcAlkaliSet,
	arAccidTime:= 	arAccidTime, 
	arTaccidSet:= 	arTaccidSet, 
	arFlawAccidSet:= 	arFlawAccidSet, 
	arConcAccidSet:= 	arConcAccidSet, 
	arWaterTime:= 	arWaterTime,
	arTwaterSet:= 	arTwaterSet, 
	arFlawWaterSet:=	arFlawWaterSet,
	arAfterAccidWaterTime:= 	arAfterAccidWaterTime, 
	arTafterAccidWater:= 	arTafterAccidWater, 
	arConcAfterAccidWaterSet:= 	arConcAfterAccidWaterSet,
	arAfterAlkaliWaterTime:= 	arAfterAlkaliWaterTime,
	arTafterAlkaliWater:= 	arTafterAlkaliWater,
	arConcAfterAlkaliWaterSet:= 	arConcAfterAlkaliWaterSet,
	arTsterilSet:= 	arTsterilSet, 
	arFlawSterilSet:= 	arFlawSterilSet,
	arConcSterilSet:= 	arConcSterilSet,
	arSterilTime:= 	arSterilTime,
	arFlawWaterAfterAlcaliSet:=	arFlawWaterAfterAlcaliSet,
	arFlawWaterAfterAccidSet:=	arFlawWaterAfterAccidSet,
	arWaterAfterSterilFlaw:=	arWaterAfterSterilFlaw,
	arWaterAfterSterilConc:=	arWaterAfterSterilConc,
	arWaterAfterSterilT:=	arWaterAfterSterilT,
	arWaterAfterSterilTime:=	arWaterAfterSterilTime,
	arConcPumpTimeSteril:= arConcPumpTimeSteril,
	wAlkaliTime:= 	wAlkaliTime,
	wTalkaliSet:= 	wTalkaliSet,
	wFlawAlkaliSet:= 	wFlawAlkaliSet,
	wConcAlkaliSet:= 	wConcAlkaliSet,
	wAccidTime:= 	wAccidTime, 
	wTaccidSet:= 	wTaccidSet,
	wFlawAccidSet:= 	wFlawAccidSet, 
	wConcAccidSet:= 	wConcAccidSet, 
	wWaterTime:= 	wWaterTime, 
	wTwaterSet:= 	wTwaterSet, 
	wFlawWaterSet:= 	wFlawWaterSet,
	wAfterAccidWaterTime:= 	wAfterAccidWaterTime, 
	wTafterAccidWater:= 	wTafterAccidWater, 
	wConcAfterAccidWaterSet:= 	wConcAfterAccidWaterSet, 
	wAfterAlkaliWaterTime:= 	wAfterAlkaliWaterTime, 
	wTafterAlkaliWater:= 	wTafterAlkaliWater, 
	wConcAfterAlkaliWaterSet:= 	wConcAfterAlkaliWaterSet, 
	wTsteril:= 	wTsteril,
	rFlawWaterAfterAlcaliSet:=	rFlawWaterAfterAlcaliSet,
	rFlawWaterAfterAccidSet:=	rFlawWaterAfterAccidSet,
	wConcPumpTimeSteril:=wConcPumpTimeSteril,
	wFlawSteril:= 	wFlawSteril,
	rConcSteril:= 	rConcSteril,
	wSterilTime:= 	wSterilTime,

	rWaterAfterSterilFlaw:= 	rWaterAfterSterilFlaw,
	rWaterAfterSterilConc:= 	rWaterAfterSterilConc,
	rWaterAfterSterilT:= 	rWaterAfterSterilT,
	rWaterAfterSterilTime:= 	rWaterAfterSterilTime,
	arOperations=> arOperations,
	arOperations2x=>arOperations2x,
	arOperations3x=>arOperations3x);
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/SelfWashing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbSelfWashing
VAR_INPUT

	rWaterLevel:					REAL;
	rUsedWaterLevel:				REAL;
	rAccidLevel:					REAL;
	rAlkaliLevel:					REAL;
	wUsedWaterLevelOK: 		REAL;
	wWaterLevelOK: 				REAL;
	wUsedWaterLevelDrain: 		REAL;
	wWaterLevelDrain: 			REAL;
	wAlkaliLevelOK: 				REAL;
	wAlkaliLevelDrain: 			REAL;
	wAccidLevelOK: 				REAL;
	wAccidLevelDrain: 			REAL;
	wPumpFlawSet:				REAL;
	wWashByAlkaliTime:			WORD;
	wWashByAccidTime:			WORD;
	wWashByWaterTime:			WORD;

	xAlkaliCooked:				BOOL;
	xAccidCooked:				BOOL;

	xVoutOn:						BOOL;
	xV_NotshortcutOn:			BOOL;
	xV_UsedWaterInOn:			BOOL;
	xV_WaterInOn:			BOOL;
	xV_UsedWaterInFillOn:		BOOL;
	xV_AlkaliInOn:					BOOL;
	xV_AccidInOn:					BOOL;
	xV_WaterOutOn:				BOOL;
	xV_UsedWaterOutOn:			BOOL;
	xV_AlkaliOutOn:				BOOL;
	xV_AccidOutOn:				BOOL;
	xV_CycleOn:					BOOL;
	xPumpOn:						BOOL;
	xV_AllInOn:					BOOL;
	xV_DrainageOn:				BOOL;
	xPause:						BOOL;


	Dissolving_StateLine1:				Dissolving_States;
	Dissolving_StateLine2:				Dissolving_States;
	Dissolving_StateLine3:				Dissolving_States;
	Dissolving_StateLine4:				Dissolving_States;
	wPumpFlawOut:			REAL;

END_VAR
VAR_IN_OUT

	xStart:						BOOL;

	xDrainOk:						BOOL;

	xDoWaterTank:				BOOL;
	xDoUsedWaterTank:			BOOL;
	xDoAlkaliTank:					BOOL;
	xDoAccidTank:					BOOL;

	xVout:						BOOL;
	xV_Notshortcut:			BOOL;
	xV_WaterOut:				BOOL;
	xV_UsedWaterOut:		BOOL;
	xV_Cycle:					BOOL;
	xV_Drainage:				BOOL;
	xV_Drainage_1:			BOOL;
	xV_AlkaliOut:				BOOL;
	xV_AccidOut:				BOOL;
	xV_WaterIn:				BOOL;
	xV_UsedWaterIn:			BOOL;
	xV_UsedWaterInFill:			BOOL;
	xV_AlkaliIn:				BOOL;
	xV_AccidIn:				BOOL;
	xV_AllIn:					BOOL;


	xPump:					BOOL;
	xResetErrors:				BOOL;

	xDoDissolveAlkali:		BOOL;
	xDoDissolveAccid:		BOOL;
	xStartDissolving:			BOOL;
	xStopFillingWaterTank:	BOOL;
	xAcknawlage:				BOOL;
	rFlawSet:					REAL;


END_VAR
VAR_OUTPUT
	State:						SelfWashingStates;
	PauseState:				SelfWashingStates;
	wError:						WORD;
	xWaterIsReady:			BOOL;
	xUsedWaterIsReady:		BOOL;
	xAlkaliIsReady:			BOOL;
	xAccidIsReady:			BOOL;
	wTimePassed:			WORD;
	wTimeOperationSet:		WORD;
END_VAR
VAR
	rtStart:					R_TRIG;
	rtPause:				R_TRIG;
	ftStart:					F_TRIG;
	tnWashing:			TON;
	xStartOper:			BOOL;
	xDissolvingStoped:	BOOL;
	xWaterCleaned:		BOOL;
	xUsedWaterCleaned:	BOOL;
	xAlkaliCleaned:		BOOL;
	XAccidCleaned:		BOOL;
	PauseOperationTime:	TIME;
	wTimeBeforePause:			WORD;
	wNextState:			SelfWashingStates;
	xUsedWaterAlkaliClined:	BOOL;
	xCleanWaterAlkaliClined:	BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
rtStart(CLK:=xStart);
ftStart(CLK:=xStart);
rtPause(CLK:=xPause);

IF rtStart.Q THEN
	xVout:=						FALSE;
	xV_Notshortcut:=			FALSE;
	xAlkaliIsReady:=			NOT xDoAlkaliTank;
	xAccidIsReady:=			NOT xDoAccidTank;
	xWaterIsReady:=			NOT xDoWaterTank;
	xUsedWaterIsReady:=	NOT xDoUsedWaterTank;
	rFlawSet:=					wPumpFlawSet;

	IF (NOT(xDoUsedWaterTank OR xDoWaterTank OR xDoAccidTank)) AND xDoAlkaliTank THEN
		wNextState:=WashAlkaliTankWater;
		State:= EmptyAlkaliTank;
	ELSIF (NOT(xDoUsedWaterTank OR xDoWaterTank OR xDoAlkaliTank)) AND xDoAccidTank THEN
		wNextState:=WashAccidTankWater;
		State:=EmptyAccidTank;
	ELSIF xDoUsedWaterTank OR xDoWaterTank  THEN
		wNextState:=CheckAll;
		State:=EmptyUsedWaterTank;
	ELSE
		State:=CheckAll;
	END_IF

END_IF

IF ftStart.Q THEN
	wError:=0;
	xVout:=						FALSE;
	xV_Notshortcut:=			FALSE;
	xV_WaterOut:=			FALSE;
	xV_Cycle:=					FALSE;
	xV_Drainage:=			FALSE;
	xV_AlkaliOut:=				FALSE;
	xV_AccidOut:=				FALSE;
	xV_AlkaliIn:=				FALSE;
	xV_AccidIn:=				FALSE;
	xV_WaterIn:=				FALSE;
	xPump:=					FALSE;
	xStartOper:=				FALSE;
	xV_Drainage_1:=			FALSE;
	xStopFillingWaterTank:=	FALSE;
	xWaterCleaned:=			FALSE;
	xUsedWaterCleaned:=	FALSE;
	xAlkaliCleaned:=			FALSE;
	XAccidCleaned:=			FALSE;
	wTimeOperationSet:=		0;
	xV_UsedWaterIn:=		FALSE;
	xV_UsedWaterInFill:=		FALSE;
	xAcknawlage:=			FALSE;
	xV_AllIn:=					FALSE;
	wTimePassed:=			0;
	wTimeBeforePause:=		0;
	PauseOperationTime:=	T#0S;
	xV_UsedWaterOut:=		FALSE;
	xUsedWaterAlkaliClined:=FALSE;
	xCleanWaterAlkaliClined:=FALSE;
	wNextState:=			StopSelfWashing;
	State:=					StopSelfWashing;
END_IF


IF rtPause.Q THEN
	PauseState:=State;
	PauseOperationTime:=tnWashing.ET;
	wTimeBeforePause:=wTimePassed;
	PauseOperationTime:=PauseOperationTime + tnWashing.ET;
	tnWashing(IN:=FALSE);
	State:=SelfWashingPause;
END_IF

xDissolvingStoped:= Dissolving_StateLine1 = DissolvingStop AND Dissolving_StateLine2 = DissolvingStop
						AND Dissolving_StateLine3 = DissolvingStop AND Dissolving_StateLine4 = DissolvingStop;




CASE State OF


			StopSelfWashing:
								;


			SelfWashingPause:


				IF NOT xPause THEN
					State:=PauseState;
				END_IF


			CheckAll:


				IF rAlkaliLevel >= wAlkaliLevelOK  AND rAccidLevel >= wAccidLevelOK  AND xDissolvingStoped THEN
					IF xDoWaterTank OR xDoUsedWaterTank THEN
						wNextState:=WashUsedWaterTankAlkali;
						State:=WashUsedWaterTankWater;
					ELSIF xDoAlkaliTank THEN
						wNextState:=WashAlkaliTankWater;
						State:=EmptyAlkaliTank;
					ELSIF xDoAccidTank THEN
						wNextState:=WashAccidTankWater;
						State:=EmptyAccidTank;
					END_IF
				ELSE
					(*xDoDissolveAlkali:=TRUE;
					xDoDissolveAccid:= TRUE;
					xStartDissolving:=TRUE;*)
					State:= WaitAllDissolving;
					xAcknawlage:=TRUE;
				END_IF

			WaitAllDissolving:

				xV_UsedWaterOut:=		FALSE;
				xPump:=					FALSE;

				IF rAlkaliLevel >= wAlkaliLevelOK AND xAlkaliCooked
					AND  rAccidLevel >= wAccidLevelOK AND xAccidCooked  AND xDissolvingStoped AND (NOT xAcknawlage) THEN
					State:=CheckAll;
				END_IF



			EmptyUsedWaterTank:


				xVout:=					FALSE;
				xV_Notshortcut:=		FALSE;
				xV_Drainage:=		FALSE;
				xV_AllIn:=				FALSE;
				xV_Drainage_1:=		FALSE;
				xV_UsedWaterIn:=	FALSE;
				xV_WaterOut:=		FALSE;
				xV_UsedWaterOut:=	TRUE;

				IF (NOT (xVoutOn OR xV_NotshortcutOn OR xV_DrainageOn)) AND xV_UsedWaterOutOn  THEN
					xPump:=TRUE;
				END_IF

				IF rUsedWaterLevel < wUsedWaterLevelDrain THEN
					(*
					IF xUsedWaterCleaned THEN
						xUsedWaterCleaned:= FALSE;
						State:= FillUsedWaterTank;
					ELSE
						State:= CheckAll;
					END_IF
					*)
					State:= wNextState;
				END_IF


			WashUsedWaterTankAlkali:


				xV_AllIn:=				TRUE;
				xV_Drainage_1:=		TRUE;
				xV_Drainage:=		TRUE;
				xV_UsedWaterIn:=	TRUE;
				xV_AlkaliOut:=			TRUE;
				xV_UsedWaterOut:=	FALSE;
				xV_WaterOut:=		FALSE;

				IF (NOT xV_UsedWaterOutOn) AND xV_AllInOn AND xV_UsedWaterInOn AND xV_AlkaliOutOn THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByAlkaliTime))*1000) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByAlkaliTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=FALSE;
					wTimePassed:=		0;
					wTimeBeforePause:=0;
					PauseOperationTime:=T#0S;
					xUsedWaterAlkaliClined:=TRUE;
					wNextState:=WashUsedWaterTankWater;
					State:= EmptyUsedWaterTank;
				END_IF




			WashUsedWaterTankAccid:


				xV_AllIn:=				TRUE;
				xV_Drainage_1:=		TRUE;
				xV_Drainage:=		TRUE;
				xV_UsedWaterIn:=	TRUE;
				xV_AccidOut:=			TRUE;
				xV_AlkaliOut:=			FALSE;
				xV_UsedWaterOut:=	FALSE;
				xV_WaterOut:=		FALSE;

				IF (NOT xV_AlkaliOutOn) AND xV_AllInOn AND xV_UsedWaterInOn AND xV_AccidOutOn THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByAccidTime))*1000) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByAccidTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=FALSE;
					wTimePassed:=		0;
					PauseOperationTime:=T#0S;
					wTimeBeforePause:=0;
					xUsedWaterCleaned:=TRUE;
					wNextState:=WashUsedWaterTankWater;
					State:= EmptyUsedWaterTank;
				END_IF


			WashUsedWaterTankWater:


				xV_AllIn:=				TRUE;
				xV_Drainage_1:=		TRUE;
				xV_Drainage:=		TRUE;
				xV_UsedWaterIn:=	TRUE;
				xV_WaterOut:=		TRUE;
				xV_AccidOut:=			FALSE;
				xV_AlkaliOut:=				FALSE;
				xV_UsedWaterOut:=	FALSE;


				IF (NOT xV_AlkaliOutOn) AND xV_AllInOn AND xV_UsedWaterInOn  THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByWaterTime))*1000) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByWaterTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=FALSE;
					wTimePassed:=		0;
					PauseOperationTime:=T#0S;
					wTimeBeforePause:=0;

					IF xUsedWaterCleaned AND xUsedWaterAlkaliClined THEN
						wNextState:= FillUsedWaterTank;
					ELSIF xUsedWaterAlkaliClined THEN
						wNextState:= WashUsedWaterTankAccid;
					ELSE
						wNextState:= WashUsedWaterTankAlkali;
					END_IF
					State:=EmptyUsedWaterTank;
				END_IF



			FillUsedWaterTank:


				xV_WaterOut:=		TRUE;
				xV_UsedWaterInFill:=	TRUE;
				xV_Drainage_1:=		FALSE;
				xV_Drainage:=		TRUE;
				xV_AllIn:=				FALSE;
				xV_UsedWaterIn:=	FALSE;
				xPump:=			TRUE;
				xV_UsedWaterOut:=	FALSE;
				IF xDoWaterTank THEN
					xStopFillingWaterTank:=	TRUE;
				ELSE
					xStopFillingWaterTank:=	FALSE;
				END_IF



				IF rUsedWaterLevel > wUsedWaterLevelOK OR (NOT xDoWaterTank) THEN
					IF xDoWaterTank  THEN
						wNextState:=WashWaterTankWater;
						State:=EmptyWaterTank;
					ELSIF xDoAlkaliTank THEN
						wNextState:=WashAlkaliTankWater;
						State:=EmptyAlkaliTank;
					ELSIF xDoAccidTank THEN
						wNextState:=WashAccidTankWater;
						State:=EmptyAccidTank;
					ELSE
						xStart:=FALSE;
					END_IF
				END_IF


			EmptyWaterTank:

				xStopFillingWaterTank:=	TRUE;;
				xV_WaterOut:=			TRUE;
				xV_AlkaliOut:=				FALSE;
				xV_AccidOut:=				FALSE;
				xV_Drainage:=			FALSE;
				xV_UsedWaterIn:=		FALSE;
				xV_UsedWaterInFill:=		FALSE;

				IF (NOT xV_DrainageOn)  AND xV_WaterOutOn THEN
					xPump:=TRUE;
				END_IF

				IF rWaterLevel < wWaterLevelDrain THEN
					(*
					IF xWaterCleaned THEN
						xWaterCleaned:=FALSE;
						xStopFillingWaterTank:=	FALSE;
						State:= FillWaterTank;
					ELSE
					State:= WashWaterTankAlkali;
					END_IF
					*)
					State:=wNextState;
				END_IF



			WashWaterTankAlkali:


				xStopFillingWaterTank:=	TRUE;
				xV_AllIn:=					TRUE;
				xV_Drainage_1:=			TRUE;
				xV_Drainage:=			TRUE;
				xV_WaterIn:=				TRUE;
				xV_AlkaliOut:=				TRUE;
				xV_UsedWaterOut:=		FALSE;
				xV_WaterOut:=			FALSE;

				IF (NOT xV_UsedWaterOutOn) AND xV_AllInOn AND xV_WaterInOn AND xV_AlkaliOutOn THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByAlkaliTime))*1000) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByAlkaliTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=FALSE;
					wTimePassed:=		0;
					PauseOperationTime:=T#0S;
					wTimeBeforePause:=0;
					xCleanWaterAlkaliClined:=TRUE;
					wNextState:= WashWaterTankWater;
					State:= EmptyWaterTank;
				END_IF


			WashWaterTankAccid:


				xStopFillingWaterTank:=	TRUE;
				xV_AllIn:=					TRUE;
				xV_Drainage_1:=			TRUE;
				xV_Drainage:=			TRUE;
				xV_WaterIn:=				TRUE;
				xV_AccidOut:=				TRUE;
				xV_AlkaliOut:=				FALSE;
				xV_WaterOut:=			FALSE;
				xV_UsedWaterOut:=		FALSE;

				IF (NOT xV_AlkaliOutOn) AND xV_AllInOn AND xV_WaterInOn AND xV_AccidOutOn THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByAccidTime))*1000) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByAccidTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=FALSE;
					wTimePassed:=		0;
					PauseOperationTime:=T#0S;
					wTimeBeforePause:=0;
					xWaterCleaned:=	TRUE;
					wNextState:=WashWaterTankWater;
					State:= EmptyWaterTank;
				END_IF



			WashWaterTankWater:


				xStopFillingWaterTank:=	TRUE;
				xV_AllIn:=					TRUE;
				xV_Drainage_1:=			TRUE;
				xV_Drainage:=			TRUE;
				xV_WaterIn:=				TRUE;
				xV_UsedWaterOut:=		TRUE;
				xV_AccidOut:=				FALSE;
				xV_WaterOut:=			FALSE;
				xV_AlkaliOut:=				FALSE;
				xV_WaterOut:=			FALSE;


				IF (NOT xV_AccidOutOn) AND xV_AllInOn AND xV_WaterInOn  THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByWaterTime))*1000) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByWaterTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=		FALSE;
					wTimePassed:=		0;
					PauseOperationTime:=T#0S;
					wTimeBeforePause:=0;
					(*
					IF xWaterCleaned THEN
						State:= EmptyWaterTank;
					ELSE
						State:=WashWaterTankAccid;
					END_IF
					*)
					IF xWaterCleaned AND xCleanWaterAlkaliClined THEN
						wNextState:= FillUsedWaterTank;
					ELSIF xCleanWaterAlkaliClined THEN
						wNextState:= WashWaterTankAccid;
					ELSE
						wNextState:= WashWaterTankAlkali;
					END_IF
					State:= EmptyWaterTank;
				END_IF



			FillWaterTank:


				xStopFillingWaterTank:=	FALSE;
				xV_AllIn:=					FALSE;
				xV_Drainage_1:=			FALSE;
				xV_Drainage:=			FALSE;
				xV_WaterIn:=				FALSE;
				xV_WaterOut:=			FALSE;
				xV_AccidOut:=				FALSE;
				xV_UsedWaterOut:=		FALSE;
				xPump:=					TRUE;

				(*IF rWaterLevel > wWaterLevelOK THEN*)
					IF xDoAlkaliTank THEN
						wNextState:=WashAlkaliTankWater;
						State:=EmptyAlkaliTank;
					ELSIF xDoAccidTank THEN
						wNextState:=WashAccidTankWater;
						State:=EmptyAccidTank;
					ELSE
						xStart:=FALSE;
					END_IF
				(*END_IF*)



			EmptyAlkaliTank:



				xV_AlkaliOut:=				TRUE;
				xV_WaterOut:=			FALSE;
				xV_AccidOut:=				FALSE;
				xV_Drainage:=			FALSE;
				xV_UsedWaterInFill:=		FALSE;

				IF (NOT xV_DrainageOn) AND xV_AllInOn AND xV_AlkaliOutOn THEN
					xPump:=TRUE;
				END_IF

				IF rAlkaliLevel < wAlkaliLevelDrain THEN
					xPump:= FALSE;
					xAcknawlage:=TRUE;
					State:= WaitManualAlkaliDrain;
				END_IF



			WaitManualAlkaliDrain:


				xPump:= 					FALSE;
				xV_AlkaliOut:=				FALSE;
				xV_AllIn:=					FALSE;
				xV_AlkaliIn:=				FALSE;

				IF NOT  xAcknawlage THEN
						(*
						IF xAlkaliCleaned THEN
							xAlkaliCleaned:=FALSE;
							(*
							xDoDissolveAlkali:=TRUE;
							xStartDissolving:=TRUE;
							*)
							xAcknawlage:=TRUE;
							State:= FillAlkaliTank;
						ELSE
						State:= WashAlkaliTankWater;
						END_IF
						*)
					State:=wNextState;
				END_IF



			WashAlkaliTankAccid:


				xV_AllIn:=					TRUE;
				xV_Drainage_1:=			TRUE;
				xV_Drainage:=			TRUE;
				xV_AlkaliIn:=				TRUE;
				xV_AccidOut:=				TRUE;
				xV_AlkaliOut:=				FALSE;
				xV_WaterOut:=			FALSE;

				IF (NOT xV_AlkaliOutOn) AND xV_AllInOn AND xV_AlkaliInOn AND xV_AccidOutOn THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByAccidTime))*1000 - PauseOperationTime));
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByAccidTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=FALSE;
					wTimePassed:=		0;
					PauseOperationTime:=T#0S;
					wTimeBeforePause:=0;
					xAlkaliCleaned:= 	TRUE;
					wNextState:=FillAlkaliTank;
					State:= WashAlkaliTankWater;
				END_IF


			WashAlkaliTankWater:


				xV_AllIn:=				TRUE;
				xV_Drainage_1:=		TRUE;
				xV_Drainage:=		TRUE;
				xV_AlkaliIn:=			TRUE;
				xV_WaterOut:=		TRUE;
				xV_AccidOut:=			FALSE;


				IF (NOT xV_AlkaliOutOn) AND xV_AllInOn AND xV_AlkaliInOn  THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByWaterTime))*1000  - PauseOperationTime));
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByWaterTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=FALSE;
					wTimePassed:=		0;
					PauseOperationTime:=T#0S;
					wTimeBeforePause:=0;
					(*
					IF xAlkaliCleaned THEN
						State:= EmptyAlkaliTank;
					ELSE
						State:=CheckAccid;
					END_IF
					*)
					IF xAlkaliCleaned THEN
						xAlkaliCleaned:=FALSE;
						wNextState:=FillAlkaliTank;
					ELSE
						wNextState:=CheckAccid;
					END_IF
					State:= EmptyAlkaliTank;
				END_IF


			FillAlkaliTank:



				xV_WaterOut:=		FALSE;
				xV_AlkaliIn:=			FALSE;
				xV_AlkaliOut:=			FALSE;
				xV_AllIn:=				FALSE;

				IF rAlkaliLevel >= wAlkaliLevelOK AND xAlkaliCooked AND xDissolvingStoped THEN
					IF xDoAccidTank THEN
						wNextState:=WashAccidTankWater;
						State:=EmptyAccidTank;
					ELSE
						xStart:=FALSE;
					END_IF
				END_IF




			EmptyAccidTank:



				xV_AccidOut:=				TRUE;
				xV_AlkaliOut:=				FALSE;
				xV_WaterOut:=			FALSE;
				xV_Drainage:=			FALSE;
				xV_UsedWaterInFill:=		FALSE;
				xV_AlkaliIn:=				FALSE;
				xV_AllIn:=					FALSE;
				xV_AccidIn:=				FALSE;

				IF (NOT xV_DrainageOn) AND xV_AccidOutOn THEN
					xPump:=TRUE;
				END_IF

				IF rAccidLevel < wAccidLevelDrain THEN
					xPump:=FALSE;
					xAcknawlage:=TRUE;
					State:= WaitManualAccidDrain;
				END_IF


			WaitManualAccidDrain:


				xPump:=				FALSE;
				xV_AccidOut:=				FALSE;
				xV_AlkaliIn:=			FALSE;
				xV_AllIn:=					FALSE;


				IF NOT xAcknawlage THEN
					(*
					IF XAccidCleaned THEN
						XAccidCleaned:=FALSE;
						xAcknawlage:=TRUE;
						State:= FillAccidTank;
					ELSE
					State:= WashAccidTankWater;
					END_IF
					*)
					State:=wNextState;
				END_IF



			WashAccidTankAlkali:


				xV_AllIn:=					TRUE;
				xV_Drainage_1:=			TRUE;
				xV_Drainage:=			TRUE;
				xV_AccidIn:=				TRUE;
				xV_AccidOut:=				FALSE;
				xV_AlkaliOut:=				TRUE;
				xV_WaterOut:=			FALSE;

				IF (NOT xV_AccidOutOn) AND xV_AllInOn AND xV_AccidInOn AND xV_AlkaliOutOn THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByAlkaliTime))*1000) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByAlkaliTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=FALSE;
					wTimePassed:=		0;
					PauseOperationTime:=T#0S;
					wTimeBeforePause:=0;
					XAccidCleaned:=TRUE;
					State:= WashAccidTankWater;
				END_IF



			WashAccidTankWater:


				xV_AllIn:=				TRUE;
				xV_Drainage_1:=		TRUE;
				xV_Drainage:=		TRUE;
				xV_AccidIn:=			TRUE;
				xV_WaterOut:=		TRUE;
				xV_AccidOut:=			FALSE;
				xV_AlkaliOut:=			FALSE;


				IF (NOT xV_AlkaliOutOn) AND xV_AllInOn AND xV_AccidInOn  THEN
					xPump:=TRUE;
					xStartOper:=TRUE;
				END_IF

				tnWashing(IN:=xStartOper,  PT:= ((WORD_TO_TIME(wWashByWaterTime))*1000) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnWashing.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wWashByWaterTime;

				IF tnWashing.Q THEN
					tnWashing(IN:=FALSE);
					xStartOper:=FALSE;

					wTimePassed:=		0;
					PauseOperationTime:=T#0S;
					wTimeBeforePause:=0;
					(*
					IF XAccidCleaned THEN
						State:= EmptyAccidTank;
					ELSE
						State:=CheckAlkali;
					END_IF
					*)
					IF XAccidCleaned THEN
						XAccidCleaned:=FALSE;
						wNextState:=FillAccidTank;
					ELSE
						wNextState:=CheckAlkali;
					END_IF
					State:= EmptyAccidTank;

				END_IF


			FillAccidTank:


				xV_Drainage_1:=		FALSE;
				xV_AccidIn:=			FALSE;
				IF rAccidLevel >= wAccidLevelOK AND xAccidCooked AND xDissolvingStoped AND (NOT xAcknawlage) THEN
					IF xDoAccidTank THEN
						xStart:=FALSE;
					END_IF
				END_IF


			CheckAlkali:


				IF rAlkaliLevel >= wAlkaliLevelOK  AND xDissolvingStoped THEN
					State:=WashAccidTankAlkali;
				ELSE
					xAcknawlage:= TRUE;
					State:= WaitAlkaliDissolving;
				END_IF



			WaitAlkaliDissolving:

				xV_AllIn:=					FALSE;
				IF rAlkaliLevel >= wAlkaliLevelOK  AND xDissolvingStoped AND (NOT xAcknawlage) THEN
					State:= WashAccidTankAlkali;
				END_IF


			CheckAccid:


				IF rAccidLevel >= wAccidLevelOK  AND xDissolvingStoped THEN
					State:=WashAlkaliTankAccid;
				ELSE
					(*
					xDoDissolveAccid:=TRUE;
					xStartDissolving:=TRUE;
					*)
					xAcknawlage:= TRUE;
					State:= WaitAccidDissolving;
				END_IF



			WaitAccidDissolving:

				IF rAccidLevel >= wAccidLevelOK AND xAccidCooked AND xDissolvingStoped AND (NOT xAcknawlage) THEN
					State:= WashAlkaliTankAccid;
				END_IF

END_CASE

IF NOT xStartOper THEN
	PauseOperationTime:=T#0S;
END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/SelfWashing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbWashingTanks
VAR_INPUT
	xV_AllInState:					BOOL;
	xV_DrainageState:			BOOL;
	xV_TankInState:				BOOL;
	xV_CleanerOutState:			BOOL;
	xV_PrevCleanerOutState:		BOOL;
	wOperTimeSet:				WORD;
	NextState:							SelfWashingStates;
END_VAR
VAR_IN_OUT

	xV_AllIn:						BOOL;
	xV_Drainage:					BOOL;
	xV_TankIn:						BOOL;
	xV_CleanerOut:				BOOL;
	xV_PrevCleanerOut:			BOOL;
	xPumpOn:						BOOL;
	State:							SelfWashingStates;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	tnWashing:					TON;
	xStartOper:					BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
xV_AllIn:=				TRUE;
xV_Drainage:=		TRUE;
xV_TankIn:=			TRUE;
xV_CleanerOut:=		TRUE;
xV_PrevCleanerOut:=	FALSE;

IF (NOT xV_PrevCleanerOutState) AND xV_AllInState AND xV_DrainageState AND xV_TankInState AND xV_CleanerOutState THEN
	xPumpOn:=TRUE;
	xStartOper:=TRUE;
END_IF

tnWashing(IN:=xStartOper,  PT:= (WORD_TO_TIME(wOperTimeSet))*1000);
IF tnWashing.Q THEN
	tnWashing(IN:=FALSE);
	xStartOper:=FALSE;
	State:= NextState;
END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/SelfWashing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prSelfWashing
VAR
	SelfWashing:	fbSelfWashing;
	xResetErrors:	BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF wWashingStateLine1 = 0 AND wDissolvingStateLine1 = 0 THEN

SelfWashing(
	rWaterLevel:= CleanWaterLevel,
	rUsedWaterLevel:= UsedWaterLevel,
	rAccidLevel:= AccidLevel,
	rAlkaliLevel:= AlkaliLevel,
	wUsedWaterLevelOK:= SelfWashUsedWaterLevelOK,
	wWaterLevelOK:= SelfWashWaterLevelOK,
	wUsedWaterLevelDrain:= SelfWashUsedWaterLevelDrain,
	wWaterLevelDrain:= SelfWashWaterLevelDrain,
	wAlkaliLevelOK:= SelfWashAlkaliLevelOK,
	wAlkaliLevelDrain:= SelfWashAlkaliLevelDrain,
	wAccidLevelOK:= SelfWashAccidLevelOK,
	wAccidLevelDrain:= SelfWashwAccidLevelDrain,
	wPumpFlawSet:= SelfWashwPumpFlawSet,
	wWashByAlkaliTime:= SelfWashByAlkaliTime,
	wWashByAccidTime:= SelfWashByAccidTime,
	wWashByWaterTime:= SelfWashByWaterTime_,
	xAlkaliCooked:= xAlkaliIsReady,
	xAccidCooked:= xAccidIsReady,
	xPause:=xSelsWashingPause,
	xVoutOn:= xState_V111,
	xV_NotshortcutOn:= xState_V110,
	xV_UsedWaterInOn:= xState_V514,
	xV_WaterInOn:= xState_V513,
	xV_UsedWaterInFillOn:= xState_V108,
	xV_AlkaliInOn:= xState_V512,
	xV_AccidInOn:= xState_V511,
	xV_WaterOutOn:= xState_V101,
	xV_UsedWaterOutOn:= xState_V102,
	xV_AlkaliOutOn:= xState_V104,
	xV_AccidOutOn:= xState_V103,
	xV_CycleOn:= xState_V105,
	xPumpOn:= Pump_OnAuto_1,
	xV_AllInOn:= xState_V510,
	xV_DrainageOn:= xState_V109,
	xDrainOk:= xDrainOk,
	Dissolving_StateLine1:= wDissolvingStateLine1,
	Dissolving_StateLine2:= wDissolvingStateLine2,
	Dissolving_StateLine3:= wDissolvingStateLine3,
	Dissolving_StateLine4:= wDissolvingStateLine4,
	xStart:= xStartSelfWashing,
	xDoWaterTank:= SelfWashDoWaterTank,
	xDoUsedWaterTank:= SelfWashDoUsedWaterTank,
	xDoAlkaliTank:= SelfWashDoAlkaliTank,
	xDoAccidTank:= SelfWashDoAccidTank,
	xVout:= OnAuto_V111,
	xV_Notshortcut:= OnAuto_V110,
	xV_WaterOut:= OnAuto_V101,
	xV_UsedWaterOut:= OnAuto_V102,
	xV_Cycle:= OnAuto_V105,
	xV_Drainage:=  OnAuto_V109,
	xV_Drainage_1:= OnAuto_V515,
	xV_AlkaliOut:= OnAuto_V104,
	xV_AccidOut:= OnAuto_V103,
	xV_WaterIn:= OnAuto_V513,
	xV_UsedWaterIn:= OnAuto_V514,
	xV_UsedWaterInFill:= OnAuto_V108,
	xV_AlkaliIn:= OnAuto_V512,
	xV_AccidIn:= OnAuto_V511,
	xV_AllIn:= OnAuto_V510,
	xPump:= Pump_OnAuto_1,
	xResetErrors:= xResetErrors,
	xAcknawlage:=SelfWashingAcknawlage,
	wPumpFlawOut:= (*WORD_TO_REAL(Pump_FlawManualSet_1)*)SelfWashwPumpFlawSet,
	xDoDissolveAlkali:= xDissolDoAlkali,
	xDoDissolveAccid:= xDissilDoAccid,
	xStartDissolving:= xDissolving_Start,
	xV_UsedWaterInFill:=OnAuto_V108,
	xStopFillingWaterTank:= xStopFillingWaterTank,
	rFlawSet:= Pump_FlawAutoSet_1,
	State=> SelfWashState,
	PauseState=> SelfWashPauseState,
	wError=> ,
	xWaterIsReady=> SelfWashWaterIsReady,
	xUsedWaterIsReady=> SelfWashUsedWaterIsReady,
	xAlkaliIsReady=> SelfWashAlkaliIsReady,
	wTimePassed=> SelfWashingTimePast,
	wTimeOperationSet=> SelfWashingOperTimeSet,
	xAccidIsReady=> SelfWashAccidIsReady);

END_IF

prSelfWashStateBits();
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/SelfWashing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prSelfWashStateBits
VAR
END_VAR
(* @END_DECLARATION := '0' *)
SelfWashStateBits.0	:=	SelfWashState = 0	;
SelfWashStateBits.1	:=	SelfWashState = 1	;
SelfWashStateBits.2	:=	SelfWashState = 2	;
SelfWashStateBits.3	:=	SelfWashState = 3	;
SelfWashStateBits.4	:=	SelfWashState = 4	;
SelfWashStateBits.5	:=	SelfWashState = 5	;
SelfWashStateBits.6	:=	SelfWashState = 6	;
SelfWashStateBits.7	:=	SelfWashState = 7	;
SelfWashStateBits.8	:=	SelfWashState = 8	;
SelfWashStateBits.9	:=	SelfWashState = 9	;
SelfWashStateBits.10	:=	SelfWashState = 10	;
SelfWashStateBits.11	:=	SelfWashState = 11	;
SelfWashStateBits.12	:=	SelfWashState = 12	;
SelfWashStateBits.13	:=	SelfWashState = 13	;
SelfWashStateBits.14	:=	SelfWashState = 14	;
SelfWashStateBits.15	:=	SelfWashState = 15	;
SelfWashStateBits.16	:=	SelfWashState = 16	;
SelfWashStateBits.17	:=	SelfWashState = 17	;
SelfWashStateBits.18	:=	SelfWashState = 18	;
SelfWashStateBits.19	:=	SelfWashState = 19	;
SelfWashStateBits.20	:=	SelfWashState = 20	;
SelfWashStateBits.21	:=	SelfWashState = 21	;
SelfWashStateBits.22	:=	SelfWashState = 22	;
SelfWashStateBits.23	:=	SelfWashState = 23	;
SelfWashStateBits.24	:=	SelfWashState = 24	;
SelfWashStateBits.25	:=	SelfWashState = 25	;
SelfWashStateBits.26	:=	SelfWashState = 26	;
SelfWashStateBits.27	:=	SelfWashState = 27	;
SelfWashStateBits.28	:=	SelfWashState = 28	;
SelfWashStateBits.29	:=	SelfWashState = 29	;
SelfWashStateBits.30	:=	SelfWashState = 30	;
SelfWashStateBits.31	:=	SelfWashState = 31	;
SelfWashStateBits2.0	:=	SelfWashState = 32	;
SelfWashStateBits2.1	:=	SelfWashState = 33	;
SelfWashStateBits2.2	:=	SelfWashState = 34	;
SelfWashStateBits2.3	:=	SelfWashState = 35	;
SelfWashStateBits2.4	:=	SelfWashState = 36	;
SelfWashStateBits2.5	:=	SelfWashState = 37	;
SelfWashStateBits2.6	:=	SelfWashState = 38	;
SelfWashStateBits2.7	:=	SelfWashState = 39	;
SelfWashStateBits2.8	:=	SelfWashState = 40	;
SelfWashStateBits2.9	:=	SelfWashState = 41	;
SelfWashStateBits2.10	:=	SelfWashState = 42	;
SelfWashStateBits2.11	:=	SelfWashState = 43	;
SelfWashStateBits2.12	:=	SelfWashState = 44	;
SelfWashStateBits2.13	:=	SelfWashState = 45	;
SelfWashStateBits2.14	:=	SelfWashState = 46	;
SelfWashStateBits2.15	:=	SelfWashState = 47	;
SelfWashStateBits2.16	:=	SelfWashState = 48	;
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Washing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbWashingProcess
VAR_INPUT

	xReady:						BOOL;
	arOperations:					ARRAY[0..7] OF BOOL;
	arOperations2x:				ARRAY[1..4,0..7] OF BOOL;
	arOperations3x:				ARRAY[1..4,1..10,0..7] OF BOOL;
	wLine:							WORD;
	wChosenRecipeLine:			WORD;
	rWaterLevel:					REAL;
	rUsedWaterLevel:				REAL;
	rAccidLevel:					REAL;
	rAlkaliLevel:					REAL;
	wUsedWaterLevelOK: 		REAL;
	wUsedWaterLevelNotOK: 	REAL;
	wTafterAccidWater:			WORD;
	wTafterAlkaliWater:			WORD;
	rConcOfAccidInTank:			REAL;
	rConcOfClkaliInTank:			REAL;
	xPumpNorm:					BOOL;

	wBackTget:					REAL;

	xVoutOn:						BOOL;
	xV_NotshortcutOn:			BOOL;
	xV_UsedWaterInOn:			BOOL;
	xV_AlkaliInOn:					BOOL;
	xV_AccidInOn:					BOOL;
	xV_WaterOutOn:				BOOL;
	xV_UsedWaterOutOn:			BOOL;
	xV_AlkaliOutOn:				BOOL;
	xV_AccidOutOn:				BOOL;
	xV_CycleOn:					BOOL;
	xPumpOn:						BOOL;
	rConcentration:				REAL;
	xFeedbackSwitch:				BOOL;
	wRecipeTimeRinse:			WORD;
	wRecipeTimeAlcali:			WORD;
	wRecipeTimeAccid:			WORD;
	wAfterRinseConcAlk:			REAL;
	wAfterRinseConcAcc:			REAL;
	wAfterAlkWaterTime:			WORD;
	wAfterAccWaterTime:			WORD;

	rTwaterSet:					REAL;
	rTalcaliSet:					REAL;
	rTaccidSet:					REAL;

	rConcAlcaliSet:				REAL;
	rConcAccidSet:				REAL;

	rFlawAlcaliSet:				REAL;
	rFlawWaterSet:				REAL;
	rFlawAccidSet:				REAL;

	rFlawWaterAfterAlcaliSet:		REAL;
	rFlawWaterAfterAccidSet:		REAL;

	wTsteril:						WORD;
	wFlawSteril:					REAL;
	rConcSteril:					REAL;
	wSterilTime:					WORD;
	wCountOfOperations:			WORD;
	wConcPumpTime:			WORD:=3;
	wConcMessureTime:			WORD:=5;
	rWaterAfterSterilFlaw:			REAL;
	rWaterAfterSterilConc:		REAL;
	rWaterAfterSterilT:				WORD;
	rWaterAfterSterilTime:			WORD;

END_VAR

VAR_IN_OUT
	xStart:				BOOL;
	xVout:				BOOL;
	xV_Notshortcut:		BOOL;

	xV_UsedWaterIn:	BOOL;
	xV_AlkaliIn:			BOOL;
	xV_AccidIn:			BOOL;
	
	xV_WaterOut:		BOOL;
	xV_UsedWaterOut:	BOOL;
	xV_AlkaliOut:		BOOL;
	xV_AccidOut:		BOOL;

	xV_Cycle:			BOOL;
	xV_Drainage:		BOOL;

	xPump:				BOOL;
	
	xHeaterPower:		REAL;

	xResetErrors:		BOOL;

	xPA:				BOOL;

	rToutSet:			REAL;
	rFlawOutSet:		REAL;

	xPause:						BOOL;
	xDone:				BOOL;
END_VAR

VAR_OUTPUT
	State:				WashingProcess_States;
	PauseState:		WashingProcess_States;
	wTimePassed:	WORD;
	wTimeOperationSet:	WORD;
	wError:				WORD;

END_VAR

VAR
	rtStart:				R_TRIG;
	ftStart:				F_TRIG;
	i:					WORD;
	k:					WORD;
	xRecipeNotEmpty:	BOOL;
	tnCheckWay:		TON;
	tnCheckNoFlow:		TON;
	rtCheckLevel:		R_TRIG;
	tnTimeOperation:	TON;
	xStartTimeOper:		BOOL;
	wCurrentOperation:	WORD;
	hsCheckUsedWaterLvl: HYSTERESIS;
	tnCheckConc:		TON;
	rtPause:	R_TRIG;
	PauseOperationTime:	TIME;
	tnSolutionPortion:	TON;
	xCheckConc:	BOOL;
	tnWaitConc:					TON;
	tnNoFlawErr:					TON;
	rtErrNoFlaw:					R_TRIG;
	wTimeBeforePause:			WORD;
	xCheck:	BOOL;
	xAccidIsGoing:	BOOL;
	rtPumpAlm:	R_TRIG;
	tnWaitZeroConc:	TON;

END_VAR
(* @END_DECLARATION := '0' *)
rtStart(CLK:=xStart);
ftStart(CLK:=xStart);
rtPause(CLK:=xPause);

IF rtStart.Q THEN
	IF xReady THEN
		xRecipeNotEmpty:=FALSE;
		wCurrentOperation:=0;
		xRecipeNotEmpty:=	FALSE;
		tnTimeOperation(IN:=FALSE);
		xDone:=FALSE;
		(*State:=FindNextOperation;*)
		State:=CheckWaterLevel;
	END_IF
END_IF


IF ftStart.Q THEN
	wError:=0;
	tnTimeOperation(IN:=FALSE);
	xVout:=					FALSE;
	xV_Notshortcut:=		FALSE;
	xV_UsedWaterIn:=	FALSE;
	xV_AlkaliIn:=			FALSE;
	xV_AccidIn:=			FALSE;
	xV_WaterOut:=		FALSE;
	xV_UsedWaterOut:=	FALSE;
	xV_AlkaliOut:=			FALSE;
	xV_AccidOut:=			FALSE;
	xV_Cycle:=				FALSE;
	xV_Drainage:=		FALSE;
	xPump:=				FALSE;
	xHeaterPower:=		0;
	xStartTimeOper:= 		FALSE;
	wCurrentOperation:=	0;
	rToutSet:=				0;
	xRecipeNotEmpty:=	FALSE;
	PauseOperationTime:=T#0S;
	wTimePassed:=		0;
	wTimeBeforePause:=0;
	wTimeOperationSet:= 0;
	xPause:=				FALSE;
	xPA:=					FALSE;
	State:=					Washing_Stop;
END_IF


IF rtPause.Q AND State > 0 THEN
	xPump:= 				FALSE;
	xPA:=					FALSE;
	rToutSet:=				0;
	wTimeBeforePause:=wTimePassed;
	PauseOperationTime:=(*PauseOperationTime + tnTimeOperation.ET*) WORD_TO_TIME(wTimePassed)*1000;
	tnTimeOperation(IN:=FALSE);

	PauseState:=State;
	State:=WashingPause;
END_IF

CASE State OF

			Washing_Stop:
								xPause:=FALSE;

			WashingPause:

				IF NOT xPause THEN
					State:= PauseState;
				END_IF




			CheckWaterLevel:


				IF rWaterLevel > rWaterLevelNotOK THEN
					State:=FindNextOperation;
				END_IF


			FindNextOperation:

				wTimePassed:=		0;
				wTimeBeforePause:=0;

				FOR i:=wCurrentOperation TO (*wCountOfOperations*)10 DO
					(*State:=i+1;*)

					IF arOperations3x[wLine,wChosenRecipeLine,i] THEN
						xRecipeNotEmpty:=	TRUE;
						wCurrentOperation:=	i+1;
						CASE i OF
							0:State:=Rinse;
							1:State:=AlkaliIn;
							2:	xV_AlkaliIn:=TRUE;
								State:=	WaterAfterAlkalin;
							3:State:=Accid;
							4:	xV_AccidIn:=TRUE;
								State:=	WaterAfterAccid;
							5:State:=Sterelisation;
							6:State:=WaterAfterSterilisation;
							7:xStart:=FALSE;
							   xDone:=TRUE;
						END_CASE
						EXIT;
					END_IF

					IF i > 7 THEN
						xStart:=FALSE;
						xDone:=TRUE;
						EXIT;
					END_IF
				END_FOR

				IF NOT (xRecipeNotEmpty AND xReady)THEN
					State:=0;
					wError.0:= NOT xReady;
					wError.1:= NOT xRecipeNotEmpty;
				END_IF


			Rinse:

				xV_Notshortcut:=	TRUE;
				xVout:= 			TRUE;
				xV_AlkaliOut:= 	FALSE;
				xV_AccidOut:= 	FALSE;

				hsCheckUsedWaterLvl(
									IN:=REAL_TO_INT (rUsedWaterLevel),
									HIGH:= REAL_TO_INT(wUsedWaterLevelOK+2),
									LOW:= REAL_TO_INT(wUsedWaterLevelOK)
									 );

				IF hsCheckUsedWaterLvl.OUT THEN
					xV_WaterOut:= 		TRUE;
					xV_UsedWaterOut:= 	FALSE;
					tnCheckWay(IN:=(*xV_WaterOutOn AND xV_NotshortcutOn AND xVoutOn*)TRUE, pt:=t#5s);
				ELSE
					xV_UsedWaterOut:= 	TRUE;
					xV_WaterOut:= 		FALSE;
					tnCheckWay(IN:=(*xV_UsedWaterOutOn AND xV_NotshortcutOn AND xVoutOn*)TRUE, pt:=t#5s);
				END_IF

				(*tnCheckWay(IN:=xV_WaterOutOn AND xV_NotshortcutOn AND xVoutOn, pt:=t#5s);*)

				IF tnCheckWay.Q THEN
					rFlawOutSet:= rFlawWaterSet;
					xPump:= 		TRUE;
				END_IF

				IF xPumpOn  THEN
					xHeaterPower:=		0;
					rToutSet:=				rTwaterSet;

				END_IF

				IF xFeedbackSwitch THEN
					xStartTimeOper:= 		TRUE;
				END_IF


				tnTimeOperation(IN:=xStartTimeOper, pt:= (WORD_TO_TIME(wRecipeTimeRinse * 1000)) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnTimeOperation.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wRecipeTimeRinse;

				IF tnTimeOperation.Q THEN
					tnTimeOperation(IN:=FALSE);
					PauseOperationTime:=T#0S;
					xStartTimeOper:= FALSE;
					State:=FindNextOperation;
				END_IF


			AlkaliIn:

				xAccidIsGoing:=		FALSE;
				xV_AlkaliOut:= 		TRUE;
				xV_AccidOut:= 		FALSE;
				xV_UsedWaterOut:= 	FALSE;
				xV_WaterOut:= 		FALSE;
				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;

				tnCheckWay(IN:=xV_AlkaliOutOn AND xV_NotshortcutOn AND xVoutOn, pt:=t#5s);
				IF tnCheckWay.Q THEN
					rFlawOutSet:= rFlawAlcaliSet;
					xPump:= TRUE;
					State:=AlkaliInPushing;
				END_IF


			AlkaliInPushing:


				xV_AlkaliOut:= 		TRUE;
				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;
				xPump:= 				TRUE;

				rToutSet:=				rTalcaliSet;
				rFlawOutSet:= 		rFlawAlcaliSet;

				tnCheckConc(IN:= rConcentration > rConcAlcaliSet, PT:= T#5s);
				IF tnCheckConc.Q THEN
					State:=AlkaliInWashing;
				END_IF


			AlkaliInWashing:


				xV_AlkaliOut:= 		TRUE;
				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;
				xPump:= 				TRUE;
				xV_AlkaliIn:=			TRUE;
				(*
				xV_Cycle:=				TRUE;
				*)
				xV_Drainage:=		TRUE;
				xV_AlkaliOut:= 		TRUE;
				xV_Cycle:=			FALSE;

				rToutSet:=				rTalcaliSet;
				rFlawOutSet:= 		rFlawAlcaliSet;

				tnTimeOperation(IN:=TRUE, pt:= (WORD_TO_TIME(wRecipeTimeAlcali * 1000)) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnTimeOperation.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wRecipeTimeAlcali;

				IF tnTimeOperation.Q THEN
					tnTimeOperation(IN:=FALSE);
					PauseOperationTime:=T#0S;
					State:=FindNextOperation;
				END_IF


			WaterAfterAlkalin:


				xV_AlkaliOut:= 		FALSE;
				xV_AccidOut:= 		FALSE;
				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;
				xPump:= 				TRUE;
				xV_Cycle:=				FALSE;


				xV_WaterOut:= 		TRUE;
				xV_UsedWaterOut:= 	FALSE;

				IF xPumpOn  THEN
					(*
					xHeaterPower:=0;*)
					rToutSet:=	wTafterAlkaliWater;

					rFlawOutSet:=rFlawWaterAfterAlcaliSet;
				END_IF

				tnCheckConc(IN:= rConcentration < wAfterRinseConcAlk, PT:= T#5s);
				IF tnCheckConc.Q THEN
					xV_AlkaliIn:=	FALSE;
					xV_Drainage:=FALSE;
				END_IF
				tnWaitZeroConc(IN:= rConcentration < 0.1, PT:= T#5s);
				IF tnWaitZeroConc.Q AND xFeedbackSwitch THEN
					xStartTimeOper:=TRUE;
				END_IF

				tnTimeOperation(IN:=xStartTimeOper, pt:= (WORD_TO_TIME(wAfterAlkWaterTime * 1000)) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnTimeOperation.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wAfterAlkWaterTime;

				IF tnTimeOperation.Q THEN
					tnTimeOperation(IN:=FALSE);
					PauseOperationTime:=T#0S;
					xStartTimeOper:=FALSE;
					State:=FindNextOperation;
				END_IF


			Accid:

				xAccidIsGoing:=		TRUE;
				xV_AccidOut:= 		TRUE;
				xV_AlkaliOut:= 		FALSE;
				xV_UsedWaterOut:= 	FALSE;
				xV_WaterOut:= 		FALSE;
				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;

				tnCheckWay(IN:=xV_AccidOutOn AND xV_NotshortcutOn AND xVoutOn, pt:=t#5s);
				IF tnCheckWay.Q THEN
					rFlawOutSet:= rFlawAccidSet;
					xPump:= TRUE;
					State:=AccidPushing;
				END_IF


			AccidPushing:


				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;
				xPump:= 				TRUE;
				xAccidIsGoing:=		TRUE;
				xV_AccidOut:= 		TRUE;

				rToutSet:=				rTaccidSet;
				rFlawOutSet:= 		rFlawAccidSet;

				tnCheckConc(IN:= rConcentration > rConcAccidSet, PT:= T#5s);
				IF tnCheckConc.Q THEN
					State:=AccidWashing;
				END_IF


			AccidWashing:


				xV_AccidIn:=		TRUE;
				xV_Drainage:=TRUE;
				xV_AccidOut:= TRUE;
				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;
				xPump:= 				TRUE;

				rToutSet:=	rTaccidSet;
				rFlawOutSet:= rFlawAccidSet;

				tnTimeOperation(IN:=TRUE, pt:= (WORD_TO_TIME(wRecipeTimeAccid * 1000)) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnTimeOperation.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wRecipeTimeAccid;

				IF tnTimeOperation.Q THEN
					tnTimeOperation(IN:=FALSE);
					PauseOperationTime:=T#0S;
					State:=FindNextOperation;
				END_IF


			WaterAfterAccid:


				xV_AlkaliOut:= 		FALSE;
				xV_AccidOut:= 		FALSE;
				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;
				xV_Cycle:=				FALSE;
				xV_WaterOut:= 		TRUE;
				xV_UsedWaterOut:= 	FALSE;
				xPump:= 				TRUE;

				IF xPumpOn  THEN
					(*
					xHeaterPower:=0;*)
					rToutSet:=	wTafterAccidWater;

					rFlawOutSet:=rFlawWaterAfterAccidSet;
				END_IF

				tnCheckConc(IN:= rConcentration <wAfterRinseConcAcc, PT:= T#5s);
				IF tnCheckConc.Q THEN
					xV_AccidIn:=		FALSE;
					xV_Drainage:=FALSE;
				END_IF
				tnWaitZeroConc(IN:= rConcentration < 0.1, PT:= T#5s);
				IF tnWaitZeroConc.Q AND xFeedbackSwitch THEN
					xStartTimeOper:=TRUE;
				END_IF
				(*
				IF NOT xV_AccidIn  THEN
					IF arOperations3x[wLine,wChosenRecipeLine ,6] THEN
						xV_Drainage:=FALSE;
					ELSE
						hsCheckUsedWaterLvl(
										IN:=(REAL_TO_INT(rUsedWaterLevel)),
										HIGH:= ( REAL_TO_INT(99)),
										LOW:= (REAL_TO_INT(97))
										 );
	
						IF hsCheckUsedWaterLvl.OUT THEN
							xV_Drainage:=TRUE;
							xV_UsedWaterIn:=TRUE;
						ELSE
							xV_Drainage:=FALSE;
						END_IF
					END_IF
				END_IF
				*)

				xV_UsedWaterIn:=FALSE;

				tnTimeOperation(IN:=xStartTimeOper, pt:= (WORD_TO_TIME(wAfterAccWaterTime * 1000)) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnTimeOperation.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wAfterAccWaterTime;

				IF tnTimeOperation.Q THEN
					tnTimeOperation(IN:=FALSE);
					PauseOperationTime:=T#0S;
					xStartTimeOper:=FALSE;
					State:=FindNextOperation;
				END_IF


			Sterelisation:

				xV_Notshortcut:=	TRUE;
				xVout:= 			TRUE;
				xV_AlkaliOut:= 	FALSE;
				xV_AccidOut:= 	FALSE;
				xV_WaterOut:= 	TRUE;
				xV_UsedWaterIn:=FALSE;
				tnCheckWay(IN:=xV_WaterOutOn AND xV_NotshortcutOn AND xVoutOn, pt:=t#5s);
				IF tnCheckWay.Q THEN
					rFlawOutSet:= wFlawSteril;
					xPump:= TRUE;
					IF wTsteril > 98 THEN
						State:= HotWaterSterilisation;
					ELSE
						xPA:=TRUE;
						xCheckConc:=TRUE;
						State:= SolutionSterilisation;
					END_IF
				END_IF


			HotWaterSterilisation:


				xV_Cycle:=			TRUE;
				xV_Drainage:=	TRUE;
				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;
				xPump:= 				TRUE;

				xV_UsedWaterIn:=FALSE;

				rFlawOutSet:= wFlawSteril;

				IF xPumpOn  THEN
					xHeaterPower:=0;
					rToutSet:=	99;
				END_IF

				tnCheckConc(IN:= wBackTget > 85, PT:= T#5s);
				IF tnCheckConc.Q THEN
					xV_WaterOut:=	 FALSE;
					xStartTimeOper:=	TRUE;
				END_IF

				tnTimeOperation(IN:=xStartTimeOper, pt:= (WORD_TO_TIME(wSterilTime * 1000)) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnTimeOperation.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wSterilTime;

				IF tnTimeOperation.Q THEN
					tnTimeOperation(IN:=FALSE);
					PauseOperationTime:=T#0S;
					xStartTimeOper:= FALSE;
					State:=FindNextOperation;
				END_IF


			SolutionSterilisation:


				xV_Cycle:=			TRUE;
				xV_Drainage:=	TRUE;

				xV_Notshortcut:=	TRUE;
				xVout:= 			TRUE;
				xPump:= 			TRUE;
				xV_UsedWaterIn:=FALSE;

				rFlawOutSet:= wFlawSteril;
				rToutSet:= wTsteril;

				tnSolutionPortion(IN:=xPA, PT:= (WORD_TO_TIME(wConcPumpTime)*1000));
				IF tnSolutionPortion.Q THEN
					xPA:=FALSE;
					xV_WaterOut:=	FALSE;
					xStartTimeOper:=	TRUE;
					tnSolutionPortion(IN:=xPA);
				END_IF
				(*
				tnCheckConc(IN:=TRUE, PT:=(WORD_TO_TIME(wConcMessureTime)*1000));
				IF tnCheckConc.Q THEN
					tnCheckConc(IN:=FALSE);
					IF rConcentration < rConcSteril THEN
						xPA:=TRUE;
					END_IF
				END_IF
				
				IF tnCheckConc.Q AND (NOT xStartTimeOper) THEN
					xStartTimeOper:=	TRUE;
				END_IF
				

				tnWaitConc(IN:= rConcentration > rConcSteril, PT:= T#5s);
				IF tnCheckConc.Q AND (NOT xStartTimeOper) THEN
					xStartTimeOper:=	TRUE;
				END_IF
				*)

				tnTimeOperation(IN:=xStartTimeOper, pt:= (WORD_TO_TIME(wSterilTime * 1000)) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnTimeOperation.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=wSterilTime;

				IF tnTimeOperation.Q THEN
					tnTimeOperation(IN:=FALSE);
					xPA:=				FALSE;
					PauseOperationTime:=T#0S;
					xStartTimeOper:= FALSE;
					State:=FindNextOperation;
				END_IF



			WaterAfterSterilisation:

				xV_AlkaliOut:= 		FALSE;
				xV_AccidOut:= 		FALSE;
				xV_Cycle:=				FALSE;
				xPA:=					FALSE;
				xV_WaterOut:= 		TRUE;
				xV_UsedWaterOut:= 	FALSE;

				xV_Notshortcut:=		TRUE;
				xVout:= 				TRUE;
				xPump:= 				TRUE;

				IF xPumpOn  THEN
					(*
					xHeaterPower:=0;*)
					rToutSet:=	rWaterAfterSterilT;
					
					rFlawOutSet:=rWaterAfterSterilFlaw;
				END_IF

				tnCheckConc(IN:= TRUE, PT:= T#5s);
				IF tnCheckConc.Q THEN
					tnCheckConc(IN:= FALSE);
					xStartTimeOper:=TRUE;
				END_IF

				hsCheckUsedWaterLvl(
									IN:=(REAL_TO_INT(rUsedWaterLevel)),
									HIGH:= ( REAL_TO_INT(99)),
									LOW:= (REAL_TO_INT(97))
									 );

				IF hsCheckUsedWaterLvl.OUT THEN
					xV_Drainage:=TRUE;
					xV_UsedWaterIn:=TRUE;
				ELSE
					xV_Drainage:=FALSE;
					xV_UsedWaterIn:=FALSE;
				END_IF

				tnTimeOperation(IN:=xStartTimeOper, pt:= (WORD_TO_TIME(rWaterAfterSterilTime * 1000)) - PauseOperationTime);
				wTimePassed:=REAL_TO_WORD(TIME_TO_REAL(tnTimeOperation.ET)/1000) + wTimeBeforePause;
				wTimeOperationSet:=rWaterAfterSterilTime;

				IF tnTimeOperation.Q THEN
					tnTimeOperation(IN:=FALSE);
					PauseOperationTime:=T#0S;
					xStartTimeOper:=FALSE;
					State:=FindNextOperation;
				END_IF




END_CASE




tnNoFlawErr(IN:= (NOT xFeedbackSwitch) AND State > 0 AND State < 16 AND (NOT xResetErrors), PT:=t#180S);
rtErrNoFlaw(CLK:=tnNoFlawErr.Q);
IF rtErrNoFlaw.Q THEN
	xPause:=TRUE;
	wError.1:=TRUE;
END_IF

rtPumpAlm(CLK:=State > 0 AND State < 16 AND (NOT xPumpNorm));
IF rtPumpAlm.Q THEN
	xPause:=TRUE;
	wError.0:=TRUE;
END_IF

IF xResetErrors THEN


	wError:=0;
END_IF
(*
IF NOT xStartTimeOper THEN
	PauseOperationTime:=T#0S;
END_IF
*)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Washing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prRemoteEquipment
VAR
	rtRecipe_1:	R_TRIG;
	rtRecipe_2:	R_TRIG;
	rtRecipe_3:	R_TRIG;
	rtRecipe_4:	R_TRIG;
	rtRecipe_5:	R_TRIG;

	ftRecipe_1:	F_TRIG;
	ftRecipe_2:	F_TRIG;
	ftRecipe_3:	F_TRIG;
	ftRecipe_4:	F_TRIG;
	ftRecipe_5:	F_TRIG;

	xCheck: BOOL;
	xCheck1: WORD;
	tnPause:	TON;
	rtPause:R_TRIG;
END_VAR
(* @END_DECLARATION := '0' *)
_Ready_Line_1:= wDissolvingStateLine4 = 0 AND SelfWashState = 0 AND wWashingErr =0;
_Working_Line_1:= wWashingStateLine4>0;
_Working_Pump_1:= Pump_FeedbackOn_4;


rtRecipe_1(CLK:=Permition_Line_1);
rtRecipe_2(CLK:=Permition_Line_2);
rtRecipe_3(CLK:=Permition_Line_3);
rtRecipe_4(CLK:=Permition_Line_4);
rtRecipe_5(CLK:=Permition_Line_5);

ftRecipe_1(CLK:=Permition_Line_1 OR Permition_Line_2 OR Permition_Line_3 OR Permition_Line_4 OR Permition_Line_5);
ftRecipe_2(CLK:=Permition_Line_2);
ftRecipe_3(CLK:=Permition_Line_3);
ftRecipe_4(CLK:=Permition_Line_4);
ftRecipe_5(CLK:=Permition_Line_5);

IF rtRecipe_1.Q AND wWashingStateLine4 = 0 THEN
	wChosenRecipeLine4:=1;
	xStartWashingLine4:=TRUE;
END_IF
IF rtRecipe_2.Q AND wWashingStateLine4 = 0 THEN
	wChosenRecipeLine4:=2;
	xStartWashingLine4:=TRUE;
END_IF
IF rtRecipe_3.Q AND wWashingStateLine4 = 0 THEN
	wChosenRecipeLine4:=3;
	xStartWashingLine4:=TRUE;
END_IF
IF rtRecipe_4.Q  AND wWashingStateLine4 = 0 THEN
	wChosenRecipeLine4:=4;
	xStartWashingLine4:=TRUE;
END_IF
IF rtRecipe_5.Q AND wWashingStateLine4 = 0 THEN
	wChosenRecipeLine4:=5;
	xStartWashingLine4:=TRUE;
END_IF

IF ftRecipe_1.Q THEN
	xCheck:=TRUE;
	xCheck1:=xCheck1 + 1;
	(*xPauseWashingLine4:=TRUE;;*)
END_IF

IF Permition_Line_1 OR Permition_Line_2 OR Permition_Line_3 OR Permition_Line_4 OR Permition_Line_5 THEN
	xCheck:=FALSE;
END_IF

tnPause(IN:=xCheck, PT:= T#3S);
rtPause(CLK:=tnPause.Q);

IF rtPause.Q THEN
	xPauseWashingLine4:=TRUE;
END_IF
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Washing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prStateBits
VAR
END_VAR
(* @END_DECLARATION := '0' *)
wWashingStateBitsLine1.0	:=	wWashingStateLine1 = 0	;
wWashingStateBitsLine1.1	:=	wWashingStateLine1 = 1	;
wWashingStateBitsLine1.2	:=	wWashingStateLine1 = 2	;
wWashingStateBitsLine1.3	:=	wWashingStateLine1 = 3	;
wWashingStateBitsLine1.4	:=	wWashingStateLine1 = 4	;
wWashingStateBitsLine1.5	:=	wWashingStateLine1 = 5	;
wWashingStateBitsLine1.6	:=	wWashingStateLine1 = 6	;
wWashingStateBitsLine1.7	:=	wWashingStateLine1 = 7	;
wWashingStateBitsLine1.8	:=	wWashingStateLine1 = 8	;
wWashingStateBitsLine1.9	:=	wWashingStateLine1 = 9	;
wWashingStateBitsLine1.10	:=	wWashingStateLine1 = 10	;
wWashingStateBitsLine1.11	:=	wWashingStateLine1 = 11	;
wWashingStateBitsLine1.12	:=	wWashingStateLine1 = 12	;
wWashingStateBitsLine1.13	:=	wWashingStateLine1 = 13	;
wWashingStateBitsLine1.14	:=	wWashingStateLine1 = 14	;
wWashingStateBitsLine1.15	:=	wWashingStateLine1 = 15	;
wWashingStateBitsLine1.16	:=	wWashingStateLine1 = 16	;
wWashingStateBitsLine1.17	:=	wWashingStateLine1 = 17	;
wWashingStateBitsLine1.18	:=	wWashingStateLine1 = 18	;
wWashingStateBitsLine1.19	:=	wWashingStateLine1 = 19	;
wWashingStateBitsLine1.20	:=	wWashingStateLine1 = 20	;
wWashingStateBitsLine1.21	:=	wWashingStateLine1 = 21	;
wWashingStateBitsLine1.22	:=	wWashingStateLine1 = 22	;
wWashingStateBitsLine1.23	:=	wWashingStateLine1 = 23	;
wWashingStateBitsLine1.24	:=	wWashingStateLine1 = 24	;
wWashingStateBitsLine1.25	:=	wWashingStateLine1 = 25	;
wWashingStateBitsLine1.26	:=	wWashingStateLine1 = 26	;
			
wWashingStateBitsLine2.0	:=	wWashingStateLine2 = 0	;
wWashingStateBitsLine2.1	:=	wWashingStateLine2 = 1	;
wWashingStateBitsLine2.2	:=	wWashingStateLine2 = 2	;
wWashingStateBitsLine2.3	:=	wWashingStateLine2 = 3	;
wWashingStateBitsLine2.4	:=	wWashingStateLine2 = 4	;
wWashingStateBitsLine2.5	:=	wWashingStateLine2 = 5	;
wWashingStateBitsLine2.6	:=	wWashingStateLine2 = 6	;
wWashingStateBitsLine2.7	:=	wWashingStateLine2 = 7	;
wWashingStateBitsLine2.8	:=	wWashingStateLine2 = 8	;
wWashingStateBitsLine2.9	:=	wWashingStateLine2 = 9	;
wWashingStateBitsLine2.10	:=	wWashingStateLine2 = 10	;
wWashingStateBitsLine2.11	:=	wWashingStateLine2 = 11	;
wWashingStateBitsLine2.12	:=	wWashingStateLine2 = 12	;
wWashingStateBitsLine2.13	:=	wWashingStateLine2 = 13	;
wWashingStateBitsLine2.14	:=	wWashingStateLine2 = 14	;
wWashingStateBitsLine2.15	:=	wWashingStateLine2 = 15	;
wWashingStateBitsLine2.16	:=	wWashingStateLine2 = 16	;
wWashingStateBitsLine2.17	:=	wWashingStateLine2 = 17	;
wWashingStateBitsLine2.18	:=	wWashingStateLine2 = 18	;
wWashingStateBitsLine2.19	:=	wWashingStateLine2 = 19	;
wWashingStateBitsLine2.20	:=	wWashingStateLine2 = 20	;
wWashingStateBitsLine2.21	:=	wWashingStateLine2 = 21	;
wWashingStateBitsLine2.22	:=	wWashingStateLine2 = 22	;
wWashingStateBitsLine2.23	:=	wWashingStateLine2 = 23	;
wWashingStateBitsLine2.24	:=	wWashingStateLine2 = 24	;
wWashingStateBitsLine2.25	:=	wWashingStateLine2 = 25	;
wWashingStateBitsLine2.26	:=	wWashingStateLine2 = 26	;
			
wWashingStateBitsLine3.0	:=	wWashingStateLine3 = 0	;
wWashingStateBitsLine3.1	:=	wWashingStateLine3 = 1	;
wWashingStateBitsLine3.2	:=	wWashingStateLine3 = 2	;
wWashingStateBitsLine3.3	:=	wWashingStateLine3 = 3	;
wWashingStateBitsLine3.4	:=	wWashingStateLine3 = 4	;
wWashingStateBitsLine3.5	:=	wWashingStateLine3 = 5	;
wWashingStateBitsLine3.6	:=	wWashingStateLine3 = 6	;
wWashingStateBitsLine3.7	:=	wWashingStateLine3 = 7	;
wWashingStateBitsLine3.8	:=	wWashingStateLine3 = 8	;
wWashingStateBitsLine3.9	:=	wWashingStateLine3 = 9	;
wWashingStateBitsLine3.10	:=	wWashingStateLine3 = 10	;
wWashingStateBitsLine3.11	:=	wWashingStateLine3 = 11	;
wWashingStateBitsLine3.12	:=	wWashingStateLine3 = 12	;
wWashingStateBitsLine3.13	:=	wWashingStateLine3 = 13	;
wWashingStateBitsLine3.14	:=	wWashingStateLine3 = 14	;
wWashingStateBitsLine3.15	:=	wWashingStateLine3 = 15	;
wWashingStateBitsLine3.16	:=	wWashingStateLine3 = 16	;
wWashingStateBitsLine3.17	:=	wWashingStateLine3 = 17	;
wWashingStateBitsLine3.18	:=	wWashingStateLine3 = 18	;
wWashingStateBitsLine3.19	:=	wWashingStateLine3 = 19	;
wWashingStateBitsLine3.20	:=	wWashingStateLine3 = 20	;
wWashingStateBitsLine3.21	:=	wWashingStateLine3 = 21	;
wWashingStateBitsLine3.22	:=	wWashingStateLine3 = 22	;
wWashingStateBitsLine3.23	:=	wWashingStateLine3 = 23	;
wWashingStateBitsLine3.24	:=	wWashingStateLine3 = 24	;
wWashingStateBitsLine3.25	:=	wWashingStateLine3 = 25	;
wWashingStateBitsLine3.26	:=	wWashingStateLine3 = 26	;
			
wWashingStateBitsLine4.0	:=	wWashingStateLine4 = 0	;
wWashingStateBitsLine4.1	:=	wWashingStateLine4 = 1	;
wWashingStateBitsLine4.2	:=	wWashingStateLine4 = 2	;
wWashingStateBitsLine4.3	:=	wWashingStateLine4 = 3	;
wWashingStateBitsLine4.4	:=	wWashingStateLine4 = 4	;
wWashingStateBitsLine4.5	:=	wWashingStateLine4 = 5	;
wWashingStateBitsLine4.6	:=	wWashingStateLine4 = 6	;
wWashingStateBitsLine4.7	:=	wWashingStateLine4 = 7	;
wWashingStateBitsLine4.8	:=	wWashingStateLine4 = 8	;
wWashingStateBitsLine4.9	:=	wWashingStateLine4 = 9	;
wWashingStateBitsLine4.10	:=	wWashingStateLine4 = 10	;
wWashingStateBitsLine4.11	:=	wWashingStateLine4 = 11	;
wWashingStateBitsLine4.12	:=	wWashingStateLine4 = 12	;
wWashingStateBitsLine4.13	:=	wWashingStateLine4 = 13	;
wWashingStateBitsLine4.14	:=	wWashingStateLine4 = 14	;
wWashingStateBitsLine4.15	:=	wWashingStateLine4 = 15	;
wWashingStateBitsLine4.16	:=	wWashingStateLine4 = 16	;
wWashingStateBitsLine4.17	:=	wWashingStateLine4 = 17	;
wWashingStateBitsLine4.18	:=	wWashingStateLine4 = 18	;
wWashingStateBitsLine4.19	:=	wWashingStateLine4 = 19	;
wWashingStateBitsLine4.20	:=	wWashingStateLine4 = 20	;
wWashingStateBitsLine4.21	:=	wWashingStateLine4 = 21	;
wWashingStateBitsLine4.22	:=	wWashingStateLine4 = 22	;
wWashingStateBitsLine4.23	:=	wWashingStateLine4 = 23	;
wWashingStateBitsLine4.24	:=	wWashingStateLine4 = 24	;
wWashingStateBitsLine4.25	:=	wWashingStateLine4 = 25	;
wWashingStateBitsLine4.26	:=	wWashingStateLine4 = 26	;
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Washing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prWashingLine1
VAR
	WashingProcess1:	fbWashingProcess;
	xResetErrors: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF SelfWashState = 0 AND wDissolvingStateLine1 = 0 THEN
WashingProcess1(
	xReady:= (*xReadyForWashing AND*) wDissolvingStateLine1 = 0,
	arOperations:= arOperations,
	rWaterLevel:= CleanWaterLevel,
	rUsedWaterLevel:= UsedWaterLevel,
	rAccidLevel:= AccidLevel,
	rAlkaliLevel:= AlkaliLevel,
	wConcPumpTime:=arConcPumpTimeSteril[1, wChosenRecipeLine1],
	wConcMessureTime:= rConcCheckTime,
	arOperations2x:=arOperations2x,
	arOperations3x:=arOperations3x,
	wChosenRecipeLine:=wChosenRecipeLine1,
	wLine:=1,
	xPumpNorm:=Pump_InvNorm_1,

	rConcOfClkaliInTank:=rDissolAlkaliConcSet,
	rConcOfAccidInTank:=rDissolAccidConcSet,

	wTafterAlkaliWater:=arTafterAlkaliWater[1, wChosenRecipeLine1],
	wTafterAccidWater:=arTafterAccidWater[1, wChosenRecipeLine1],

	rFlawWaterAfterAlcaliSet:=	arFlawWaterAfterAlcaliSet[1, wChosenRecipeLine1],
	rFlawWaterAfterAccidSet:=	arFlawWaterAfterAccidSet[1, wChosenRecipeLine1],
	rWaterAfterSterilFlaw:=	arWaterAfterSterilFlaw[1, wChosenRecipeLine1],
	rWaterAfterSterilConc:=	arWaterAfterSterilConc[1, wChosenRecipeLine1],

	rFlawWaterAfterAlcaliSet:=	arFlawWaterAfterAlcaliSet[1, wChosenRecipeLine1],
	rFlawWaterAfterAccidSet:=	arFlawWaterAfterAccidSet[1, wChosenRecipeLine1],
	wUsedWaterLevelOK:= wUsedWaterLevelOK,
	wUsedWaterLevelNotOK:= wUsedWaterLevelNotOK,
	wBackTget:=Heater_BackTget_1,
	xPause:= xPauseWashingLine1,
	xVoutOn:= xState_V111,
	xV_NotshortcutOn:= xState_V110,
	xV_UsedWaterInOn:= xState_V108,
	xV_AlkaliInOn:= xState_V106,
	xV_AccidInOn:= xState_V107,
	xV_WaterOutOn:= xState_V101,
	xV_UsedWaterOutOn:= xState_V102,
	xV_AlkaliOutOn:= xState_V104,
	xV_AccidOutOn:= xState_V103,
	xV_CycleOn:= xState_V105,
	xPumpOn:= Pump_OnAuto_1,
	rConcentration:= Conc_Line1,
	(*xAccidIsGoing:=xAccidIsGoing1,*)
	xFeedbackSwitch:= DI_FeedBackSwitchLine1,
	rWaterAfterSterilT:=arWaterAfterSterilT[1, wChosenRecipeLine1],
	rWaterAfterSterilTime:=arWaterAfterSterilTime[1, wChosenRecipeLine1],
	wRecipeTimeRinse:= arWaterTime[1, wChosenRecipeLine1],
	wRecipeTimeAlcali:= arAlkaliTime[1, wChosenRecipeLine1],
	wRecipeTimeAccid:= arAccidTime[1, wChosenRecipeLine1],
	wAfterRinseConcAlk:= (*wAfterRinseConcAlk*)rConcSolutionStopoperationAlk,
	wAfterRinseConcAcc:= (*wAfterRinseConcAcc*)rConcSolutionStopoperationAcc,
	wAfterAlkWaterTime:= arAfterAlkaliWaterTime[1, wChosenRecipeLine1],
	wAfterAccWaterTime:= arAfterAccidWaterTime[1, wChosenRecipeLine1],
	rTwaterSet:= arTwaterSet[1, wChosenRecipeLine1],
	rTalcaliSet:= arTalkaliSet[1, wChosenRecipeLine1],
	rTaccidSet:= arTaccidSet[1, wChosenRecipeLine1],
	rConcAlcaliSet:= (*arConcAlkaliSet[1, wChosenRecipeLine1]*)rConcSolutionStartOperationAlk,
	rConcAccidSet:= (*arConcAccidSet[1, wChosenRecipeLine1]*)rConcSolutionStartOperationAcc,
	rFlawAlcaliSet:= arFlawAlkaliSet[1, wChosenRecipeLine1],
	rFlawWaterSet:= arFlawWaterSet[1, wChosenRecipeLine1],
	rFlawAccidSet:= arFlawAccidSet[1, wChosenRecipeLine1],
	wTsteril:= arTsterilSet[1, wChosenRecipeLine1],
	wFlawSteril:= arFlawSterilSet[1, wChosenRecipeLine1],
	rConcSteril:= arConcSterilSet[1, wChosenRecipeLine1],
	wSterilTime:= arSterilTime[1, wChosenRecipeLine1],
	wCountOfOperations:= 7,
	xStart:= xStartWashingLine1,
	xVout:= OnAuto_V111,
	xV_Notshortcut:= OnAuto_V110,
	xV_UsedWaterIn:= OnAuto_V108,
	xV_AlkaliIn:= OnAuto_V106,
	xV_AccidIn:= OnAuto_V107,
	xV_WaterOut:= OnAuto_V101,
	xV_UsedWaterOut:= OnAuto_V102,
	xV_AlkaliOut:= OnAuto_V104,
	xV_AccidOut:= OnAuto_V103,
	xV_Cycle:= OnAuto_V105,
	xV_Drainage:= OnAuto_V109,
	xPump:= Pump_OnAuto_1,
	xHeaterPower:= Heater_AutoSetT_1,
	xResetErrors:= xResetAlmAll,
	xPA:= PA_OnAuto_1,
	rToutSet:= Heater_AutoSetT_1,
	rFlawOutSet:= Pump_FlawAutoSet_1,
	xDone:=xWashingDone_Line1,
	State=> wWashingStateLine1,
	PauseState=> (*wWashingPauseStateLine1*),
	wTimePassed=> wWashingTimePassed1,
	wTimeOperationSet=> wWashingOperTimeSet1,
	wError=> wWashingErr_1);
END_IF
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Washing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prWashingLine2
VAR
	WashingProcess2:	fbWashingProcess;
	xResetErrors: BOOL;
	xPause: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF wDissolvingStateLine2 = 0 THEN
WashingProcess2(
	xReady:= (*xReadyForWashing AND*) wDissolvingStateLine2 = 0,
	arOperations:= arOperations,
	rWaterLevel:= CleanWaterLevel,
	rUsedWaterLevel:= UsedWaterLevel,
	rAccidLevel:= AccidLevel,
	rAlkaliLevel:= AlkaliLevel,
	wConcPumpTime:=arConcPumpTimeSteril[2, wChosenRecipeLine2],
	wConcMessureTime:= rConcCheckTime,
	arOperations2x:=arOperations2x,
	arOperations3x:=arOperations3x,
	wChosenRecipeLine:=wChosenRecipeLine2,
	wLine:=2,
	xPumpNorm:=Pump_InvNorm_2,

	rConcOfClkaliInTank:=rDissolAlkaliConcSet,
	rConcOfAccidInTank:=rDissolAccidConcSet,

	rWaterAfterSterilTime:=arWaterAfterSterilTime[2, wChosenRecipeLine2],
	wTafterAlkaliWater:=arTafterAlkaliWater[2, wChosenRecipeLine2],
	wTafterAccidWater:=arTafterAccidWater[2, wChosenRecipeLine2],

	rFlawWaterAfterAlcaliSet:=	arFlawWaterAfterAlcaliSet[2, wChosenRecipeLine2],
	rFlawWaterAfterAccidSet:=	arFlawWaterAfterAccidSet[2, wChosenRecipeLine2],
	rWaterAfterSterilFlaw:=	arWaterAfterSterilFlaw[2, wChosenRecipeLine2],
	rWaterAfterSterilConc:=	arWaterAfterSterilConc[2, wChosenRecipeLine2],
	rFlawWaterAfterAlcaliSet:=	arFlawWaterAfterAlcaliSet[2, wChosenRecipeLine2],
	rFlawWaterAfterAccidSet:=	arFlawWaterAfterAccidSet[2, wChosenRecipeLine2],
	wUsedWaterLevelOK:= wUsedWaterLevelOK,
	wUsedWaterLevelNotOK:= wUsedWaterLevelNotOK,
	wBackTget:= Heater_BackTget_2,
	xPause:= xPauseWashingLine2,
	xVoutOn:= xState_V211,
	xV_NotshortcutOn:= xState_V210,
	xV_UsedWaterInOn:= xState_V208,
	xV_AlkaliInOn:= xState_V206,
	xV_AccidInOn:= xState_V207,
	xV_WaterOutOn:= xState_V201,
	xV_UsedWaterOutOn:= xState_V202,
	xV_AlkaliOutOn:= xState_V204,
	xV_AccidOutOn:= xState_V203,
	xV_CycleOn:= xState_V205,
	xPumpOn:= Pump_OnAuto_2,
	rConcentration:= Conc_Line2,
	(*xAccidIsGoing:=xAccidIsGoing2,*)
	xFeedbackSwitch:= DI_FeedBackSwitchLine2,
	rWaterAfterSterilT:=arWaterAfterSterilT[2, wChosenRecipeLine2],
	wRecipeTimeRinse:= arWaterTime[2, wChosenRecipeLine2],
	wRecipeTimeAlcali:= arAlkaliTime[2, wChosenRecipeLine2],
	wRecipeTimeAccid:= arAccidTime[2, wChosenRecipeLine2],
	wAfterRinseConcAlk:= (*wAfterRinseConcAlk*)rConcSolutionStopoperationAlk,
	wAfterRinseConcAcc:= (*wAfterRinseConcAcc*)rConcSolutionStopoperationAcc,
	wAfterAlkWaterTime:= arAfterAlkaliWaterTime[2, wChosenRecipeLine2],
	wAfterAccWaterTime:= arAfterAccidWaterTime[2, wChosenRecipeLine2],
	rTwaterSet:= arTwaterSet[2, wChosenRecipeLine2],
	rTalcaliSet:= arTalkaliSet[2, wChosenRecipeLine2],
	rTaccidSet:= arTaccidSet[2, wChosenRecipeLine2],
	rConcAlcaliSet:= (*arConcAlkaliSet[2, wChosenRecipeLine2]*)rConcSolutionStartOperationAlk,
	rConcAccidSet:= (*arConcAccidSet[2, wChosenRecipeLine2]*)rConcSolutionStartOperationAcc,
	rFlawAlcaliSet:= arFlawAlkaliSet[2, wChosenRecipeLine2],
	rFlawWaterSet:= arFlawWaterSet[2, wChosenRecipeLine2],
	rFlawAccidSet:= arFlawAccidSet[2, wChosenRecipeLine2],
	wTsteril:= arTsterilSet[2, wChosenRecipeLine2],
	wFlawSteril:= arFlawSterilSet[2, wChosenRecipeLine2],
	rConcSteril:= arConcSterilSet[2, wChosenRecipeLine2],
	wSterilTime:= arSterilTime[2, wChosenRecipeLine2],
	wCountOfOperations:= 7,
	xStart:= xStartWashingLine2,
	xVout:= OnAuto_V211,
	xV_Notshortcut:= OnAuto_V210,
	xV_UsedWaterIn:= OnAuto_V208,
	xV_AlkaliIn:= OnAuto_V206,
	xV_AccidIn:= OnAuto_V207,
	xV_WaterOut:= OnAuto_V201,
	xV_UsedWaterOut:= OnAuto_V202,
	xV_AlkaliOut:= OnAuto_V204,
	xV_AccidOut:= OnAuto_V203,
	xV_Cycle:= OnAuto_V205,
	xV_Drainage:= OnAuto_V209,
	xPump:= Pump_OnAuto_2,
	xHeaterPower:= Heater_AutoSetT_2,
	xResetErrors:= xResetAlmAll,
	xPA:= PA_OnAuto_2,
	rToutSet:= Heater_AutoSetT_2,
	rFlawOutSet:= Pump_FlawAutoSet_2,
	xDone:=xWashingDone_Line2,
	State=> wWashingStateLine2,
	PauseState=> (*wWashingPauseStateLine2*),
	wTimePassed=> wWashingTimePassed2,
	wTimeOperationSet=> wWashingOperTimeSet2,
	wError=> wWashingErr_2);
END_IF
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Washing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prWashingLine3
VAR
	WashingProcess3:	fbWashingProcess;
	xResetErrors: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF wDissolvingStateLine3 = 0 THEN
WashingProcess3(
	xReady:= (*xReadyForWashing AND*) wDissolvingStateLine3 = 0,
	arOperations:= arOperations,
	rWaterLevel:= CleanWaterLevel,
	rUsedWaterLevel:= UsedWaterLevel,
	rAccidLevel:= AccidLevel,
	rAlkaliLevel:= AlkaliLevel,
	wConcPumpTime:=arConcPumpTimeSteril[3, wChosenRecipeLine3],
	wConcMessureTime:= rConcCheckTime,
	arOperations2x:=arOperations2x,
	arOperations3x:=arOperations3x,
	wChosenRecipeLine:=wChosenRecipeLine3,
	wLine:=3,
	rConcOfClkaliInTank:=rDissolAlkaliConcSet,
	rConcOfAccidInTank:=rDissolAccidConcSet,

	xPumpNorm:=Pump_InvNorm_3,

	rWaterAfterSterilTime:=arWaterAfterSterilTime[3, wChosenRecipeLine3],
	wTafterAlkaliWater:=arTafterAlkaliWater[3, wChosenRecipeLine3],
	wTafterAccidWater:=arTafterAccidWater[3, wChosenRecipeLine3],

	rFlawWaterAfterAlcaliSet:=	arFlawWaterAfterAlcaliSet[3, wChosenRecipeLine3],
	rFlawWaterAfterAccidSet:=	arFlawWaterAfterAccidSet[3, wChosenRecipeLine3],
	rWaterAfterSterilFlaw:=	arWaterAfterSterilFlaw[3, wChosenRecipeLine3],
	rWaterAfterSterilConc:=	arWaterAfterSterilConc[3, wChosenRecipeLine3],
	rFlawWaterAfterAlcaliSet:=	arFlawWaterAfterAlcaliSet[3, wChosenRecipeLine3],
	rFlawWaterAfterAccidSet:=	arFlawWaterAfterAccidSet[3, wChosenRecipeLine3],
	wUsedWaterLevelOK:= wUsedWaterLevelOK,
	wUsedWaterLevelNotOK:= wUsedWaterLevelNotOK,
	wBackTget:= Heater_BackTget_3,
	xPause:= xPauseWashingLine3,
	xVoutOn:= xState_V311,
	xV_NotshortcutOn:= xState_V310,
	xV_UsedWaterInOn:= xState_V308,
	xV_AlkaliInOn:= xState_V306,
	xV_AccidInOn:= xState_V307,
	xV_WaterOutOn:= xState_V301,
	xV_UsedWaterOutOn:= xState_V302,
	xV_AlkaliOutOn:= xState_V304,
	xV_AccidOutOn:= xState_V303,
	xV_CycleOn:= xState_V305,
	xPumpOn:= Pump_OnAuto_3,
	rConcentration:= Conc_Line3,
	(*xAccidIsGoing:=xAccidIsGoing3,*)
	xFeedbackSwitch:= DI_FeedBackSwitchLine3,
	rWaterAfterSterilT:=arWaterAfterSterilT[3, wChosenRecipeLine3],
	wRecipeTimeRinse:= arWaterTime[3, wChosenRecipeLine3],
	wRecipeTimeAlcali:= arAlkaliTime[3, wChosenRecipeLine3],
	wRecipeTimeAccid:= arAccidTime[3, wChosenRecipeLine3],
	wAfterRinseConcAlk:= (*wAfterRinseConcAlk*)rConcSolutionStopoperationAlk,
	wAfterRinseConcAcc:= (*wAfterRinseConcAcc*)rConcSolutionStopoperationAcc,
	wAfterAlkWaterTime:= arAfterAlkaliWaterTime[3, wChosenRecipeLine3],
	wAfterAccWaterTime:= arAfterAccidWaterTime[3, wChosenRecipeLine3],
	rTwaterSet:= arTwaterSet[3, wChosenRecipeLine3],
	rTalcaliSet:= arTalkaliSet[3, wChosenRecipeLine3],
	rTaccidSet:= arTaccidSet[3, wChosenRecipeLine3],
	rConcAlcaliSet:= (*arConcAlkaliSet[3, wChosenRecipeLine3]*)rConcSolutionStartOperationAlk,
	rConcAccidSet:= (*arConcAccidSet[3, wChosenRecipeLine3]*)rConcSolutionStartOperationAcc,
	rFlawAlcaliSet:= arFlawAlkaliSet[3, wChosenRecipeLine3],
	rFlawWaterSet:= arFlawWaterSet[3, wChosenRecipeLine3],
	rFlawAccidSet:= arFlawAccidSet[3, wChosenRecipeLine3],
	wTsteril:= arTsterilSet[3, wChosenRecipeLine3],
	wFlawSteril:= arFlawSterilSet[3, wChosenRecipeLine3],
	rConcSteril:= arConcSterilSet[3, wChosenRecipeLine3],
	wSterilTime:= arSterilTime[3, wChosenRecipeLine3],
	wCountOfOperations:= 7,
	xStart:= xStartWashingLine3,
	xVout:= OnAuto_V311,
	xV_Notshortcut:= OnAuto_V310,
	xV_UsedWaterIn:= OnAuto_V308,
	xV_AlkaliIn:= OnAuto_V306,
	xV_AccidIn:= OnAuto_V307,
	xV_WaterOut:= OnAuto_V301,
	xV_UsedWaterOut:= OnAuto_V302,
	xV_AlkaliOut:= OnAuto_V304,
	xV_AccidOut:= OnAuto_V303,
	xV_Cycle:= OnAuto_V305,
	xV_Drainage:= OnAuto_V309,
	xPump:= Pump_OnAuto_3,
	xHeaterPower:= Heater_AutoSetT_3,
	xResetErrors:= xResetAlmAll,
	xPA:= PA_OnAuto_3,
	rToutSet:= Heater_AutoSetT_3,
	rFlawOutSet:= Pump_FlawAutoSet_3,
	xDone:=xWashingDone_Line3,
	State=> wWashingStateLine3,
	PauseState=>(* wWashingPauseStateLine3*),
	wTimePassed=> wWashingTimePassed3,
	wTimeOperationSet=> wWashingOperTimeSet3,
	wError=> wWashingErr_3);
END_IF

END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Washing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prWashingLine4
VAR
	WashingProcess4:	fbWashingProcess;
	xResetErrors: BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
IF wDissolvingStateLine4 = 0 THEN
WashingProcess4(
	xReady:= (*xReadyForWashing AND*) wDissolvingStateLine4 = 0,
	arOperations:= arOperations,
	rWaterLevel:= CleanWaterLevel,
	rUsedWaterLevel:= UsedWaterLevel,
	rAccidLevel:= AccidLevel,
	rAlkaliLevel:= AlkaliLevel,
	wConcPumpTime:=arConcPumpTimeSteril[4, wChosenRecipeLine4],
	wConcMessureTime:= rConcCheckTime,
	arOperations2x:=arOperations2x,
	arOperations3x:=arOperations3x,
	wChosenRecipeLine:=wChosenRecipeLine4,
	wLine:=4,
	rConcOfClkaliInTank:=rDissolAlkaliConcSet,
	rConcOfAccidInTank:=rDissolAccidConcSet,

	xPumpNorm:=Pump_InvNorm_4,

	rWaterAfterSterilTime:=arWaterAfterSterilTime[4, wChosenRecipeLine4],
	wTafterAlkaliWater:=arTafterAlkaliWater[4, wChosenRecipeLine4],
	wTafterAccidWater:=arTafterAccidWater[4, wChosenRecipeLine4],

	rFlawWaterAfterAlcaliSet:=	arFlawWaterAfterAlcaliSet[4, wChosenRecipeLine4],
	rFlawWaterAfterAccidSet:=	arFlawWaterAfterAccidSet[4, wChosenRecipeLine4],
	rWaterAfterSterilFlaw:=	arWaterAfterSterilFlaw[4, wChosenRecipeLine4],
	rWaterAfterSterilConc:=	arWaterAfterSterilConc[4, wChosenRecipeLine4],
	rFlawWaterAfterAlcaliSet:=	arFlawWaterAfterAlcaliSet[4, wChosenRecipeLine4],
	rFlawWaterAfterAccidSet:=	arFlawWaterAfterAccidSet[4, wChosenRecipeLine4],
	wUsedWaterLevelOK:= wUsedWaterLevelOK,
	wUsedWaterLevelNotOK:= wUsedWaterLevelNotOK,
	wBackTget:= Heater_BackTget_4,
	xPause:= xPauseWashingLine4,
	xVoutOn:= xState_V411,
	xV_NotshortcutOn:= xState_V410,
	xV_UsedWaterInOn:= xState_V408,
	xV_AlkaliInOn:= xState_V406,
	xV_AccidInOn:= xState_V407,
	xV_WaterOutOn:= xState_V401,
	xV_UsedWaterOutOn:= xState_V402,
	xV_AlkaliOutOn:= xState_V404,
	xV_AccidOutOn:= xState_V403,
	xV_CycleOn:= xState_V405,
	xPumpOn:= Pump_OnAuto_4,
	rConcentration:= Conc_Line4,
	(*xAccidIsGoing:=xAccidIsGoing4,*)
	xFeedbackSwitch:= DI_FeedBackSwitchLine4,
	rWaterAfterSterilT:=arWaterAfterSterilT[4, wChosenRecipeLine4],
	wRecipeTimeRinse:= arWaterTime[4, wChosenRecipeLine4],
	wRecipeTimeAlcali:= arAlkaliTime[4, wChosenRecipeLine4],
	wRecipeTimeAccid:= arAccidTime[4, wChosenRecipeLine4],
	wAfterRinseConcAlk:= (*wAfterRinseConcAlk*)rConcSolutionStopoperationAlk,
	wAfterRinseConcAcc:= (*wAfterRinseConcAcc*)rConcSolutionStopoperationAcc,
	wAfterAlkWaterTime:= arAfterAlkaliWaterTime[4, wChosenRecipeLine4],
	wAfterAccWaterTime:= arAfterAccidWaterTime[4, wChosenRecipeLine4],
	rTwaterSet:= arTwaterSet[4, wChosenRecipeLine4],
	rTalcaliSet:= arTalkaliSet[4, wChosenRecipeLine4],
	rTaccidSet:= arTaccidSet[4, wChosenRecipeLine4],
	rConcAlcaliSet:=(* arConcAlkaliSet[4, wChosenRecipeLine4]*)rConcSolutionStartOperationAlk,
	rConcAccidSet:= (*arConcAccidSet[4, wChosenRecipeLine4]*)rConcSolutionStartOperationAcc,
	rFlawAlcaliSet:= arFlawAlkaliSet[4, wChosenRecipeLine4],
	rFlawWaterSet:= arFlawWaterSet[4, wChosenRecipeLine4],
	rFlawAccidSet:= arFlawAccidSet[4, wChosenRecipeLine4],
	wTsteril:= arTsterilSet[4, wChosenRecipeLine4],
	wFlawSteril:= arFlawSterilSet[4, wChosenRecipeLine4],
	rConcSteril:= arConcSterilSet[4, wChosenRecipeLine4],
	wSterilTime:= arSterilTime[4, wChosenRecipeLine4],
	wCountOfOperations:= 7,
	xStart:= xStartWashingLine4,
	xVout:= OnAuto_V411,
	xV_Notshortcut:= OnAuto_V410,
	xV_UsedWaterIn:= OnAuto_V408,
	xV_AlkaliIn:= OnAuto_V406,
	xV_AccidIn:= OnAuto_V407,
	xV_WaterOut:= OnAuto_V401,
	xV_UsedWaterOut:= OnAuto_V402,
	xV_AlkaliOut:= OnAuto_V404,
	xV_AccidOut:= OnAuto_V403,
	xV_Cycle:= OnAuto_V405,
	xV_Drainage:= OnAuto_V409,
	xPump:= Pump_OnAuto_4,
	xHeaterPower:= Heater_AutoSetT_4,
	xResetErrors:= xResetAlmAll,
	xPA:= PA_OnAuto_4,
	rToutSet:= Heater_AutoSetT_4,
	rFlawOutSet:= Pump_FlawAutoSet_4,
	xDone:=xWashingDone_Line4,
	State=> wWashingStateLine4,
	PauseState=> (*wWashingPauseStateLine4*),
	wTimePassed=> wWashingTimePassed4,
	wTimeOperationSet=> wWashingOperTimeSet4,
	wError=> wWashingErr_4);
END_IF
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process\/Washing' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prWashingProcess
VAR


END_VAR
(* @END_DECLARATION := '0' *)
prWashingLine1();
prWashingLine2();
prWashingLine3();
prWashingLine4();
prRemoteEquipment();
prStateBits();











END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Process' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM prProcess
VAR
END_VAR
(* @END_DECLARATION := '0' *)
prDissolvingProcess();
prSelfWashing();
prRecipe();
prWashingProcess();
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Simulation_' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK fbValveSim
VAR_INPUT
	xDO:	BOOL;
END_VAR
VAR_OUTPUT
	xSensor:	BOOL;
END_VAR
VAR
	tnOn:	TON;
END_VAR
(* @END_DECLARATION := '0' *)
tnOn(IN:=xDO, pt:=t#2s, Q=>xSensor);
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Simulation_' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM Simulation
VAR
	ValveSim_101:fbValveSim;
	ValveSim_102:fbValveSim;
	ValveSim_103:fbValveSim;
	ValveSim_104:fbValveSim;
	ValveSim_105:fbValveSim;
	ValveSim_106:fbValveSim;
	ValveSim_107:fbValveSim;
	ValveSim_108:fbValveSim;
	ValveSim_109:fbValveSim;
	ValveSim_110:fbValveSim;
	ValveSim_111:fbValveSim;
	ValveSim_201:fbValveSim;
	ValveSim_202:fbValveSim;
	ValveSim_203:fbValveSim;
	ValveSim_204:fbValveSim;
	ValveSim_205:fbValveSim;
	ValveSim_206:fbValveSim;
	ValveSim_207:fbValveSim;
	ValveSim_208:fbValveSim;
	ValveSim_209:fbValveSim;
	ValveSim_210:fbValveSim;
	ValveSim_211:fbValveSim;
	ValveSim_301:fbValveSim;
	ValveSim_302:fbValveSim;
	ValveSim_303:fbValveSim;
	ValveSim_304:fbValveSim;
	ValveSim_305:fbValveSim;
	ValveSim_306:fbValveSim;
	ValveSim_307:fbValveSim;
	ValveSim_308:fbValveSim;
	ValveSim_309:fbValveSim;
	ValveSim_310:fbValveSim;
	ValveSim_311:fbValveSim;
	ValveSim_401:fbValveSim;
	ValveSim_402:fbValveSim;
	ValveSim_403:fbValveSim;
	ValveSim_404:fbValveSim;
	ValveSim_405:fbValveSim;
	ValveSim_406:fbValveSim;
	ValveSim_407:fbValveSim;
	ValveSim_408:fbValveSim;
	ValveSim_409:fbValveSim;
	ValveSim_410:fbValveSim;
	ValveSim_411:fbValveSim;
	ValveSim_501:fbValveSim;
	ValveSim_510:fbValveSim;
	ValveSim_511:fbValveSim;
	ValveSim_512:fbValveSim;
	ValveSim_513:fbValveSim;
	ValveSim_514:fbValveSim;
	ValveSim_515:fbValveSim;

	Pump_1:fbValveSim;
	Pump_2:fbValveSim;
	Pump_3:fbValveSim;
	Pump_4:fbValveSim;

END_VAR
(* @END_DECLARATION := '0' *)
ValveSim_101(xDO:= DO_V101, xSensor=> DI_V101);
ValveSim_102(xDO:= DO_V102, xSensor=> DI_V102);
ValveSim_103(xDO:= DO_V103, xSensor=> DI_V103);
ValveSim_104(xDO:= DO_V104, xSensor=> DI_V104);
ValveSim_105(xDO:= DO_V105, xSensor=> DI_V105);
ValveSim_106(xDO:= DO_V106, xSensor=> DI_V106);
ValveSim_107(xDO:= DO_V107, xSensor=> DI_V107);
ValveSim_108(xDO:= DO_V108, xSensor=> DI_V108);
ValveSim_109(xDO:= DO_V109, xSensor=> DI_V109);
ValveSim_110(xDO:= DO_V110, xSensor=> DI_V110);
ValveSim_111(xDO:= DO_V111, xSensor=> DI_V111);
ValveSim_201(xDO:= DO_V201, xSensor=> DI_V201);
ValveSim_202(xDO:= DO_V202, xSensor=> DI_V202);
ValveSim_203(xDO:= DO_V203, xSensor=> DI_V203);
ValveSim_204(xDO:= DO_V204, xSensor=> DI_V204);
ValveSim_205(xDO:= DO_V205, xSensor=> DI_V205);
ValveSim_206(xDO:= DO_V206, xSensor=> DI_V206);
ValveSim_207(xDO:= DO_V207, xSensor=> DI_V207);
ValveSim_208(xDO:= DO_V208, xSensor=> DI_V208);
ValveSim_209(xDO:= DO_V209, xSensor=> DI_V209);
ValveSim_210(xDO:= DO_V210, xSensor=> DI_V210);
ValveSim_211(xDO:= DO_V211, xSensor=> DI_V211);
ValveSim_301(xDO:= DO_V301, xSensor=> DI_V301);
ValveSim_302(xDO:= DO_V302, xSensor=> DI_V302);
ValveSim_303(xDO:= DO_V303, xSensor=> DI_V303);
ValveSim_304(xDO:= DO_V304, xSensor=> DI_V304);
ValveSim_305(xDO:= DO_V305, xSensor=> DI_V305);
ValveSim_306(xDO:= DO_V306, xSensor=> DI_V306);
ValveSim_307(xDO:= DO_V307, xSensor=> DI_V307);
ValveSim_308(xDO:= DO_V308, xSensor=> DI_V308);
ValveSim_309(xDO:= DO_V309, xSensor=> DI_V309);
ValveSim_310(xDO:= DO_V310, xSensor=> DI_V310);
ValveSim_311(xDO:= DO_V311, xSensor=> DI_V311);
ValveSim_401(xDO:= DO_V401, xSensor=> DI_V401);
ValveSim_402(xDO:= DO_V402, xSensor=> DI_V402);
ValveSim_403(xDO:= DO_V403, xSensor=> DI_V403);
ValveSim_404(xDO:= DO_V404, xSensor=> DI_V404);
ValveSim_405(xDO:= DO_V405, xSensor=> DI_V405);
ValveSim_406(xDO:= DO_V406, xSensor=> DI_V406);
ValveSim_407(xDO:= DO_V407, xSensor=> DI_V407);
ValveSim_408(xDO:= DO_V408, xSensor=> DI_V408);
ValveSim_409(xDO:= DO_V409, xSensor=> DI_V409);
ValveSim_410(xDO:= DO_V410, xSensor=> DI_V410);
ValveSim_411(xDO:= DO_V411, xSensor=> DI_V411);
ValveSim_501(xDO:= DO_V501, xSensor=> DI_V501);
ValveSim_510(xDO:= DO_V510, xSensor=> DI_V510);
ValveSim_511(xDO:= DO_V511, xSensor=> DI_V511);
ValveSim_512(xDO:= DO_V512, xSensor=> DI_V512);
ValveSim_513(xDO:= DO_V513, xSensor=> DI_V513);
ValveSim_514(xDO:= DO_V514, xSensor=> DI_V514);
ValveSim_515(xDO:= DO_V515, xSensor=> DI_V515);

Pump_1(xDO:= Pump_OnAuto_1, xSensor=> DI_FeedBackSwitchLine1);
Pump_2(xDO:= Pump_OnAuto_2, xSensor=> DI_FeedBackSwitchLine2);
Pump_3(xDO:= Pump_OnAuto_3, xSensor=> DI_FeedBackSwitchLine3);
Pump_4(xDO:= Pump_OnAuto_4, xSensor=> DI_FeedBackSwitchLine4);

Pump_InvNorm_1:=TRUE;
Pump_InvNorm_2:=TRUE;
Pump_InvNorm_3:=TRUE;
Pump_InvNorm_4:=TRUE;

DI_WaterUpperLevel:= FALSE;
DI_UsedWaterUpperLevel:= FALSE;

DI_AlkaliUpperLevel:= FALSE;
DI_AccidUpperLevel:= FALSE;

END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM InToVars
VAR

END_VAR
(* @END_DECLARATION := '0' *)


DI_AlkaliUpperLevel:= NOT _LH_2;
DI_AccidUpperLevel:= NOT _LH_1;



DI_FeedBackSwitchLine1:= _DI_FeedBackSwitchLine1;
DI_FeedBackSwitchLine2:= _DI_FeedBackSwitchLine2;
DI_FeedBackSwitchLine3:= _DI_FeedBackSwitchLine3;
DI_FeedBackSwitchLine4:= _DI_FeedBackSwitchLine4;


DI_WaterUpperLevel:= NOT _LH_3;
DI_UsedWaterUpperLevel:= NOT _LH_4;


DI_V101:= NOT _DI_V101;
DI_V102:= NOT _DI_V102;
DI_V103:= NOT _DI_V103;
DI_V104:= NOT _DI_V104;
DI_V105:= NOT _DI_V105;
DI_V106:= NOT _DI_V106;
DI_V107:= NOT _DI_V107;
DI_V108:= NOT _DI_V108;
DI_V109:= NOT _DI_V109;
DI_V110:= NOT _DI_V110;
DI_V111:= NOT _DI_V111;
DI_V201:= NOT _DI_V201;
DI_V202:= NOT _DI_V202;
DI_V203:= NOT _DI_V203;
DI_V204:= NOT _DI_V204;
DI_V205:= NOT _DI_V205;
DI_V206:= NOT _DI_V206;
DI_V207:= NOT _DI_V207;
DI_V208:= NOT _DI_V208;
DI_V209:= NOT _DI_V209;
DI_V210:= NOT _DI_V210;
DI_V211:= NOT _DI_V211;
DI_V301:= NOT _DI_V301;
DI_V302:= NOT _DI_V302;
DI_V303:= NOT _DI_V303;
DI_V304:= NOT _DI_V304;
DI_V305:= NOT _DI_V305;
DI_V306:= NOT _DI_V306;
DI_V307:= NOT _DI_V307;
DI_V308:= NOT _DI_V308;
DI_V309:= NOT _DI_V309;
DI_V310:= NOT _DI_V310;
DI_V311:= NOT _DI_V311;
DI_V401:= NOT _DI_V401;
DI_V402:= NOT _DI_V402;
DI_V403:= NOT _DI_V403;
DI_V404:= NOT _DI_V404;
DI_V405:= NOT _DI_V405;
DI_V406:= NOT _DI_V406;
DI_V407:= NOT _DI_V407;
DI_V408:= NOT _DI_V408;
DI_V409:= NOT _DI_V409;
DI_V410:= NOT _DI_V410;
DI_V411:= NOT _DI_V411;
DI_V501:= NOT _DI_V501;
DI_V510:= NOT _DI_V510;
DI_V511:= NOT _DI_V511;
DI_V512:= NOT _DI_V512;
DI_V513:= NOT _DI_V513;
DI_V514:= NOT _DI_V514;
DI_V515:= NOT _DI_V515;


Pump_InvNorm_1:= _Pump_Alm_1;
Pump_InvNorm_2:= _Pump_Alm_2;
Pump_InvNorm_3:= _Pump_Alm_3;
Pump_InvNorm_4:= _Pump_Alm_4;


Pump_FeedbackOn_1:=_Pump_FeedbackOn_1;
Pump_FeedbackOn_2:=_Pump_FeedbackOn_2;
Pump_FeedbackOn_3:=_Pump_FeedbackOn_3;
Pump_FeedbackOn_4:=_Pump_FeedbackOn_4;


AI_Conc_Line1:= _AI_Conc_Line1;
AI_Conc_Line2:= _AI_Conc_Line2;
AI_Conc_Line3:= _AI_Conc_Line3;
AI_Conc_Line4:= _AI_Conc_Line4;

AI_CleanWaterLevel:= _AI_CleanWaterLevel;
AI_UsedWaterLevel:= _AI_UsedWaterLevel;
AI_AccidLevel:= _AI_AccidLevel;
AI_AlkaliLevel:= _AI_AlkaliLevel;






AI_Temp_Accid:= _AI_Temp_Accid;
AI_Temp_Alkali:= _AI_Temp_Alkali;
(*
AI_Temp_Line3:= _AI_Temp_Line3;
AI_Temp_Line4:= _AI_Temp_Line4;
*)

AI_Heater_Tget_1 := _AI_Heater_Tget_1 ;
AI_Heater_Tget_2 := _AI_Heater_Tget_2 ;
AI_Heater_Tget_3 := _AI_Heater_Tget_3 ;
AI_Heater_Tget_4 := _AI_Heater_Tget_4 ;
 
AI_Heater_BackTget_1:= _AI_Heater_BackTget_1;
AI_Heater_BackTget_2:= _AI_Heater_BackTget_2;
AI_Heater_BackTget_3:= _AI_Heater_BackTget_3;
AI_Heater_BackTget_4:= _AI_Heater_BackTget_4;
 
AI_Flaw_Line1:= _AI_Flaw_Line1;
AI_Flaw_Line2:= _AI_Flaw_Line2;
AI_Flaw_Line3:= _AI_Flaw_Line3;
AI_Flaw_Line4:= _AI_Flaw_Line4;

Permition_Line_1:=_Permition_Line_1;
Permition_Line_2:=_Permition_Line_2;
Permition_Line_3:=_Permition_Line_3;
Permition_Line_4:=_Permition_Line_4;
Permition_Line_5:=_Permition_Line_5;


END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM PLC_PRG
VAR
	dDate:	DT;
	dDateStop:DT:=DT#2020-02-16-08:00:00;
	CurTimeEx_:CurTimeEx;
	SystemTimeDate_:SystemTimeDate;
	SysTime64_:SysTime64;
	xOutOff:	BOOL;
END_VAR
(* @END_DECLARATION := '0' *)

InToVars();

prDevice();
prProcess();
prValue_to_AO();


dDate:=SysRtcGetTime(TRUE);

IF dDateStop > dDate THEN
	xOutOff:=TRUE;
END_IF
(*
CurTimeEx_(SystemTime:=SysTime64_ , TimeDate:= SystemTimeDate_);
IF SystemTimeDate_.Month = 2 THEN
	wDaysRemain:= 27 - SystemTimeDate_.Day(* + 16*);
	IF SystemTimeDate_.Day > 27 THEN
		wDaysRemain:=0;
	END_IF
ELSIF SystemTimeDate_.Month = 3 THEN
	(*wDaysRemain:=16 - SystemTimeDate_.Day;
	IF SystemTimeDate_.Day > 16 THEN
		wDaysRemain:=0;
	END_IF*)
	wDaysRemain:=0;
ELSE
	wDaysRemain:=0;
END_IF

Simulation();


IF wDaysRemain > 0 THEN
	VarsToOut();
END_IF
*)

VarsToOut();


xResetAlmAll:=FALSE;
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM VarsToOut
VAR

END_VAR
(* @END_DECLARATION := '0' *)

_DO_PumpOn_1:= DO_PumpOn_1;
_DO_PumpOn_2:= DO_PumpOn_2;
_DO_PumpOn_3:= DO_PumpOn_3;
_DO_PumpOn_4:= DO_PumpOn_4;
 
_DO_PA11:= DO_PA11;
_DO_PA12:= DO_PA12;
_DO_PA1:= DO_PA1;
_DO_PA2:= DO_PA2;
_DO_PA3:= DO_PA3;
_DO_PA4:= DO_PA4;
 
_DO_V110:= DO_V110;
_DO_V210:= DO_V210;
_DO_V310:= DO_V310;
_DO_V410:= DO_V410;
_DO_V111:= DO_V111;
_DO_V211:= DO_V211;
_DO_V311:= DO_V311;
_DO_V411:= DO_V411;

_DO_V101:= DO_V101;
_DO_V102:= DO_V102;
_DO_V103:= DO_V103;
_DO_V104:= DO_V104;
_DO_V105:= DO_V105;
_DO_V106:= DO_V106;
_DO_V107:= DO_V107;
_DO_V108:= DO_V108;
_DO_V109:= DO_V109;
_DO_V201:= DO_V201;
_DO_V202:= DO_V202;
_DO_V203:= DO_V203;
_DO_V204:= DO_V204;
_DO_V205:= DO_V205;
_DO_V206:= DO_V206;
_DO_V207:= DO_V207;
_DO_V208:= DO_V208;
_DO_V209:= DO_V209;
_DO_V301:= DO_V301;
_DO_V302:= DO_V302;
_DO_V303:= DO_V303;
_DO_V304:= DO_V304;
_DO_V305:= DO_V305;
_DO_V306:= DO_V306;
_DO_V307:= DO_V307;
_DO_V308:= DO_V308;
_DO_V309:= DO_V309;
_DO_V401:= DO_V401;
_DO_V402:= DO_V402;
_DO_V403:= DO_V403;
_DO_V404:= DO_V404;
_DO_V405:= DO_V405;
_DO_V406:= DO_V406;
_DO_V407:= DO_V407;
_DO_V408:= DO_V408;
_DO_V409:= DO_V409;
 
_DO_V501:= DO_V501;

_DO_V511:= DO_V511;
_DO_V510:= DO_V510;
_DO_V512:= DO_V512;
_DO_V513:= DO_V513;
_DO_V514:= DO_V514;
_DO_V515:= DO_V515;


_SwitchOnRemotePump_1	:=	SwitchOnRemotePump_1	;
_SwitchOnRemotePump_2	:=	SwitchOnRemotePump_2	;
_SwitchOnRemotePump_3	:=	SwitchOnRemotePump_3	;
_SwitchOnRemotePump_4	:=	SwitchOnRemotePump_4	;


_Ready_Line_2 :=SwitchOnRemotePump_1_2;
_Working_Line_2 :=SwitchOnRemotePump_1_1;
_Working_Pump_2:=SwitchOnRemotePump_1_3;


_AO_PumpSpeedSet_1:= AO_PumpSpeedSet_1;
_AO_PumpSpeedSet_2:= AO_PumpSpeedSet_2;
_AO_PumpSpeedSet_3:= AO_PumpSpeedSet_3;
_AO_PumpSpeedSet_4:= AO_PumpSpeedSet_4;
 
_AO_HeaterPowerSet_1:= AO_HeaterPowerSet_1;
_AO_HeaterPowerSet_2:= AO_HeaterPowerSet_2;
_AO_HeaterPowerSet_3:= AO_HeaterPowerSet_3;
_AO_HeaterPowerSet_4:= AO_HeaterPowerSet_4;



END_PROGRAM

(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
TYPE Dissolving_States :
(
	DissolvingStop:=0,
	WaterStart:=1,
	AlkaliTankFullUp:=2,
	AlkaliConc:=3,
	AlkaliConcMessure:=4,
	WaterAfter:=5,
	AccidTankFullUp:=6,
	AccidConc:=7,
	AccidConcMessure:=8,
	DissolvingPause:=9
);
END_TYPE
(* @END_DECLARATION := '0' *)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
TYPE SelfWashingStates :
(
	StopSelfWashing:=0,
	FillUsedWaterTank:=1,
	FillWaterTank:=2,
	FillAccidTank:=3,
	FillAlkaliTank:=4,
	WashUsedWaterTankAlkali:=5,
	WashUsedWaterTankAccid:=6,
	WashUsedWaterTankWater:=7,
	WashWaterTankAlkali:=8,
	WashWaterTankAccid:=9,
	WashWaterTankWater:=10,
	WashAlkaliTankAccid:=11,
	WashAlkaliTankWater:=12,
	WashAccidTankAlkali:=13,
	WashAccidTankWater:=14,
	CheckAlkali:=15,
	CheckAccid:=16,
	CheckAll:=17,
	WaitAlkaliDissolving:=18,
	WaitAccidDissolving:=19,
	WaitAllDissolving:=20,
	EmptyUsedWaterTank:=21,
	EmptyWaterTank:=22,
	EmptyAlkaliTank:=23,
	EmptyAccidTank:=24,
	WaitManualAlkaliDrain:=25,
	WaitManualAccidDrain:=26,
	WaterFinalDrain:=27,
	UsedWaterFinalDrain:=28,
	AlkaliFinalDrain:=29,
	AccidFinalDrain:=30,
	WaitManualAlkaliDrainFinal:=31,
	WaitManualAccidDrainFinal:=32,
	SelfWashingPause:=33
);
END_TYPE

(* @END_DECLARATION := '0' *)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
TYPE WashingProcess_States :
(
	Washing_Stop				:= 0,	(* íåîïðåäåëåííîì ñîñòîÿíèè, íå âûïîëíÿåòñÿ *)
	Rinse 		:= 1,	(*îæèäàíèå îñòàòî÷íîãî äàâëåíèÿ *)

	AlkaliIn			:= 2, 	(*óñòàíîâêà è ïðîêà÷êà ãàçà*)
	WaterAfterAlkalin	:= 3,	(*âêëþ÷åíèå êîììóòàòîðà	*)
	Accid	:= 4, 	(*âêëþ÷åíèå áëîêà ïèòàíèÿ ìàãíåòðîíà	*)
	WaterAfterAccid		:= 5,	(*íàïûëåíèå ìàãíåòðîíîì*)
	Sterelisation:= 6,
	WaterAfterSterilisation:=7,

	RinseUsedWater	:= 8,	(*âêëþ÷åíèå áëîêà ïèòàíèÿ êîìïåíñàòîðà *)
	AlkaliInPushing:=9,
	AlkaliInWashing:=10,
	AccidPushing:=11,
	AccidWashing:=12,
	HotWaterSterilisation:=13,
	SolutionSterilisation:=14,
	FindNextOperation	:= 15,	(*âêëþ÷åíèå áëîêà ïèòàíèÿ àññèñòåíòà	*)
	WashingPause:=16,
	CheckWaterLevel:=17
);
END_TYPE
(* @END_DECLARATION := '0' *)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'AI_Vars' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL

	AI_Conc_Line1:			WORD;
	AI_Conc_Line2:			WORD;
	AI_Conc_Line3:			WORD;
	AI_Conc_Line4:			WORD;

	AI_CleanWaterLevel:		WORD;
	AI_UsedWaterLevel:		WORD;
	AI_AccidLevel:				WORD;
	AI_AlkaliLevel:				WORD;

	AI_Temp_Accid:			WORD;
	AI_Temp_Alkali:			WORD;
	AI_Temp_Line3:			WORD;
	AI_Temp_Line4:			WORD;

	AI_Heater_Tget_1 	:	WORD;
	AI_Heater_Tget_2 	:	WORD;
	AI_Heater_Tget_3 	:	WORD;
	AI_Heater_Tget_4 	:	WORD;
			
	AI_Heater_BackTget_1	:	WORD;
	AI_Heater_BackTget_2	:	WORD;
	AI_Heater_BackTget_3	:	WORD;
	AI_Heater_BackTget_4	:	WORD;



	AI_Flaw_Line1:			WORD;
	AI_Flaw_Line2:			WORD;
	AI_Flaw_Line3:			WORD;
	AI_Flaw_Line4:			WORD;



END_VAR

(* @OBJECT_END := 'AI_Vars' *)
(* @CONNECTIONS := AI_Vars
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'AO_Vars' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL


	AO_PumpSpeedSet_1:			WORD;
	AO_PumpSpeedSet_2:			WORD;
	AO_PumpSpeedSet_3:			WORD;
	AO_PumpSpeedSet_4:			WORD;

	AO_HeaterPowerSet_1 AT %MW1060:			WORD;
	AO_HeaterPowerSet_2 AT %MW1062:			WORD;
	AO_HeaterPowerSet_3 AT %MW1064:			WORD;
	AO_HeaterPowerSet_4 AT %MW1066:			WORD;
END_VAR

(* @OBJECT_END := 'AO_Vars' *)
(* @CONNECTIONS := AO_Vars
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'DI_Vars' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL



	DI_V101	:	BOOL;
	DI_V102	:	BOOL;
	DI_V103	:	BOOL;
	DI_V104	:	BOOL;
	DI_V105	:	BOOL;
	DI_V106	:	BOOL;
	DI_V107	:	BOOL;
	DI_V108	:	BOOL;
	DI_V109	:	BOOL;
	DI_V110	:	BOOL;
	DI_V111	:	BOOL;
	DI_V201	:	BOOL;
	DI_V202	:	BOOL;
	DI_V203	:	BOOL;
	DI_V204	:	BOOL;
	DI_V205	:	BOOL;
	DI_V206	:	BOOL;
	DI_V207	:	BOOL;
	DI_V208	:	BOOL;
	DI_V209	:	BOOL;
	DI_V210	:	BOOL;
	DI_V211	:	BOOL;
	DI_V301	:	BOOL;
	DI_V302	:	BOOL;
	DI_V303	:	BOOL;
	DI_V304	:	BOOL;
	DI_V305	:	BOOL;
	DI_V306	:	BOOL;
	DI_V307	:	BOOL;
	DI_V308	:	BOOL;
	DI_V309	:	BOOL;
	DI_V310	:	BOOL;
	DI_V311	:	BOOL;
	DI_V401	:	BOOL;
	DI_V402	:	BOOL;
	DI_V403	:	BOOL;
	DI_V404	:	BOOL;
	DI_V405	:	BOOL;
	DI_V406	:	BOOL;
	DI_V407	:	BOOL;
	DI_V408	:	BOOL;
	DI_V409	:	BOOL;
	DI_V410	:	BOOL;
	DI_V411	:	BOOL;
	DI_V501	:	BOOL;
	DI_V510	:	BOOL;
	DI_V511	:	BOOL;
	DI_V512	:	BOOL;
	DI_V513	:	BOOL;
	DI_V514	:	BOOL;
	DI_V515	:	BOOL;


	Pump_InvNorm_1:	BOOL;
	Pump_InvNorm_2:	BOOL;
	Pump_InvNorm_3:	BOOL;
	Pump_InvNorm_4:	BOOL;

	Permition_Line_1:	BOOL;
	Permition_Line_2:	BOOL;
	Permition_Line_3:	BOOL;
	Permition_Line_4:	BOOL;
	Permition_Line_5:	BOOL;





END_VAR

(* @OBJECT_END := 'DI_Vars' *)
(* @CONNECTIONS := DI_Vars
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'DO_Vars' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL
	DO_PumpOn_1:			BOOL;
	DO_PumpOn_2:			BOOL;
	DO_PumpOn_3:			BOOL;
	DO_PumpOn_4:			BOOL;

	DO_PA11:					BOOL;
	DO_PA12:					BOOL;
	DO_PA1:					BOOL;
	DO_PA2:					BOOL;
	DO_PA3:					BOOL;
	DO_PA4:					BOOL;

	DO_V110	:	BOOL;
	DO_V210	:	BOOL;
	DO_V310	:	BOOL;
	DO_V410	:	BOOL;
	DO_V111	:	BOOL;
	DO_V211	:	BOOL;
	DO_V311	:	BOOL;
	DO_V411	:	BOOL;
			
	DO_V101	:	BOOL;
	DO_V102	:	BOOL;
	DO_V103	:	BOOL;
	DO_V104	:	BOOL;
	DO_V105	:	BOOL;
	DO_V106	:	BOOL;
	DO_V107	:	BOOL;
	DO_V108	:	BOOL;
	DO_V109	:	BOOL;
	DO_V201	:	BOOL;
	DO_V202	:	BOOL;
	DO_V203	:	BOOL;
	DO_V204	:	BOOL;
	DO_V205	:	BOOL;
	DO_V206	:	BOOL;
	DO_V207	:	BOOL;
	DO_V208	:	BOOL;
	DO_V209	:	BOOL;
	DO_V301	:	BOOL;
	DO_V302	:	BOOL;
	DO_V303	:	BOOL;
	DO_V304	:	BOOL;
	DO_V305	:	BOOL;
	DO_V306	:	BOOL;
	DO_V307	:	BOOL;
	DO_V308	:	BOOL;
	DO_V309	:	BOOL;
	DO_V401	:	BOOL;
	DO_V402	:	BOOL;
	DO_V403	:	BOOL;
	DO_V404	:	BOOL;
	DO_V405	:	BOOL;
	DO_V406	:	BOOL;
	DO_V407	:	BOOL;
	DO_V408	:	BOOL;
	DO_V409	:	BOOL;
		
	DO_V501	:	BOOL;
		
	DO_V511	:	BOOL;
	DO_V510	:	BOOL;
	DO_V512	:	BOOL;
	DO_V513	:	BOOL;
	DO_V514	:	BOOL;
	DO_V515	:	BOOL;

	DO_ReadyToWash:					BOOL;
	DO_WashimgIsGoing:				BOOL;
	DO_PumpIsWorking:					BOOL;

	SwitchOnRemotePump_1	:	BOOL;
	SwitchOnRemotePump_2	:	BOOL;
	SwitchOnRemotePump_3	:	BOOL;
	SwitchOnRemotePump_4	:	BOOL;

	SwitchOnRemotePump_1_1	:	BOOL;
	SwitchOnRemotePump_1_2	:	BOOL;
	SwitchOnRemotePump_1_3	:	BOOL;


END_VAR

(* @OBJECT_END := 'DO_Vars' *)
(* @CONNECTIONS := DO_Vars
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'Global_Variables' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL
	Bob: BOOL;
	Seed: WORD;
	ffggh:WORD;
	kkfggj:WORD;
	xReadyForWashing:	BOOL;

END_VAR

(* @OBJECT_END := 'Global_Variables' *)
(* @CONNECTIONS := Global_Variables
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'Heater' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL

	Heater_AutoSetT_1:					REAL;
	Heater_AutoSetT_2:					REAL;
	Heater_AutoSetT_3:					REAL;
	Heater_AutoSetT_4:					REAL;

END_VAR

(* @OBJECT_END := 'Heater' *)
(* @CONNECTIONS := Heater
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'HMI_Alarms' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL

	xResetAlmAll	AT %MW600	:	BOOL;	(*	12888	*)
						
	wAlm_V101	AT %MW601	:	WORD;	(*	12889	*)
	wAlm_V102	AT %MW602	:	WORD;	(*	12890	*)
	wAlm_V103	AT %MW603	:	WORD;	(*	12891	*)
	wAlm_V104	AT %MW604	:	WORD;	(*	12892	*)
	wAlm_V105	AT %MW605	:	WORD;	(*	12893	*)
	wAlm_V106	AT %MW606	:	WORD;	(*	12894	*)
	wAlm_V107	AT %MW607	:	WORD;	(*	12895	*)
	wAlm_V108	AT %MW608	:	WORD;	(*	12896	*)
	wAlm_V109	AT %MW609	:	WORD;	(*	12897	*)
	wAlm_V110	AT %MW610	:	WORD;	(*	12898	*)
	wAlm_V111	AT %MW611	:	WORD;	(*	12899	*)
	wAlm_V201	AT %MW612	:	WORD;	(*	12900	*)
	wAlm_V202	AT %MW613	:	WORD;	(*	12901	*)
	wAlm_V203	AT %MW614	:	WORD;	(*	12902	*)
	wAlm_V204	AT %MW615	:	WORD;	(*	12903	*)
	wAlm_V205	AT %MW616	:	WORD;	(*	12904	*)
	wAlm_V206	AT %MW617	:	WORD;	(*	12905	*)
	wAlm_V207	AT %MW618	:	WORD;	(*	12906	*)
	wAlm_V208	AT %MW619	:	WORD;	(*	12907	*)
	wAlm_V209	AT %MW620	:	WORD;	(*	12908	*)
	wAlm_V210	AT %MW621	:	WORD;	(*	12909	*)
	wAlm_V211	AT %MW622	:	WORD;	(*	12910	*)
	wAlm_V301	AT %MW623	:	WORD;	(*	12911	*)
	wAlm_V302	AT %MW624	:	WORD;	(*	12912	*)
	wAlm_V303	AT %MW625	:	WORD;	(*	12913	*)
	wAlm_V304	AT %MW626	:	WORD;	(*	12914	*)
	wAlm_V305	AT %MW627	:	WORD;	(*	12915	*)
	wAlm_V306	AT %MW628	:	WORD;	(*	12916	*)
	wAlm_V307	AT %MW629	:	WORD;	(*	12917	*)
	wAlm_V308	AT %MW630	:	WORD;	(*	12918	*)
	wAlm_V309	AT %MW631	:	WORD;	(*	12919	*)
	wAlm_V310	AT %MW632	:	WORD;	(*	12920	*)
	wAlm_V311	AT %MW633	:	WORD;	(*	12921	*)
	wAlm_V401	AT %MW634	:	WORD;	(*	12922	*)
	wAlm_V402	AT %MW635	:	WORD;	(*	12923	*)
	wAlm_V403	AT %MW636	:	WORD;	(*	12924	*)
	wAlm_V404	AT %MW637	:	WORD;	(*	12925	*)
	wAlm_V405	AT %MW638	:	WORD;	(*	12926	*)
	wAlm_V406	AT %MW639	:	WORD;	(*	12927	*)
	wAlm_V407	AT %MW640	:	WORD;	(*	12928	*)
	wAlm_V408	AT %MW641	:	WORD;	(*	12929	*)
	wAlm_V409	AT %MW642	:	WORD;	(*	12930	*)
	wAlm_V410	AT %MW643	:	WORD;	(*	12931	*)
	wAlm_V411	AT %MW644	:	WORD;	(*	12932	*)
	wAlm_V501	AT %MW645	:	WORD;	(*	12933	*)
	wAlm_V510	AT %MW646	:	WORD;	(*	12934	*)
	wAlm_V511	AT %MW647	:	WORD;	(*	12935	*)
	wAlm_V512	AT %MW648	:	WORD;	(*	12936	*)
	wAlm_V513	AT %MW649	:	WORD;	(*	12937	*)
	wAlm_V514	AT %MW650	:	WORD;	(*	12938	*)
	wAlm_V515	AT %MW651	:	WORD;	(*	12939	*)
							
	wCheckAlm:			WORD;			




END_VAR

(* @OBJECT_END := 'HMI_Alarms' *)
(* @CONNECTIONS := HMI_Alarms
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'HMI_Heater' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL

	Heater_Tget_1 				AT %MW100:		REAL;	(* 12388 *)
	Heater_Tget_2 				AT %MW102:		REAL;	(* 12390 *)
	Heater_Tget_3 				AT %MW104:		REAL;	(* 12392 *)
	Heater_Tget_4 				AT %MW106:		REAL;	(* 12394 *)

	Heater_Error_1 				AT %MW108:		WORD; (* 12396 *)
	Heater_Error_2 				AT %MW110:		WORD; (* 12398 *)
	Heater_Error_3 				AT %MW112:		WORD; (* 12400 *)
	Heater_Error_4 				AT %MW114:		WORD; (* 12402 *)

	Heater_xNoFeedback_1		AT %MW116:		BOOL;	(* 12404 *)
	Heater_xNoFeedback_2 		AT %MW118:	  	BOOL;	(* 12406 *)
	Heater_xNoFeedback_3 		AT %MW120:		BOOL;	(* 12408 *)
	Heater_xNoFeedback_4 		AT %MW122:		BOOL;	(* 12410 *)

	Heater_ManualSetT_1 		AT %MW124:		REAL;	(* 12412 *)
	Heater_ManualSetT_2 		AT %MW126:		REAL;	(* 12414 *)
	Heater_ManualSetT_3 		AT %MW128:	  	REAL;	(* 12416 *)
	Heater_ManualSetT_4		AT %MW130:		REAL;	(* 12418 *)

	Heater_PowerSet_1 			AT %MW132:		REAL;	(* 12420 *)
	Heater_PowerSet_2 			AT %MW134:		REAL;	(* 12422 *)
	Heater_PowerSet_3 			AT %MW136:		REAL;	(* 12424 *)
	Heater_PowerSet_4 			AT %MW138:		REAL;	(* 12426 *)

	HeaterPowerSet_1	AT %MW140	:	REAL;	(*	12428	*)
	HeaterPowerSet_2	AT %MW142	:	REAL;	(*	12430	*)
	HeaterPowerSet_3	AT %MW144	:	REAL;	(*	12432	*)
	HeaterPowerSet_4	AT %MW146	:	REAL;	(*	12432	*)

	Heater_BackTget_1	AT %MW148	:	REAL;	(*	12434	*)
	Heater_BackTget_2	AT %MW150	:	REAL;	(*	12436	*)
	Heater_BackTget_3	AT %MW152	:	REAL;	(*	12438	*)
	Heater_BackTget_4	AT %MW154	:	REAL;	(*	12440	*)




END_VAR

VAR_GLOBAL RETAIN



	Heater_xManualMode_1		AT %MW1140	:			BOOL; 	(*	13428	*)
	Heater_xManualMode_2		AT %MW1142	:			BOOL; 	(*	13430	*)
	Heater_xManualMode_3		AT %MW1144	:			BOOL; 	(*	13432	*)
	Heater_xManualMode_4		AT %MW1146	:			BOOL; 	(*	13434	*)
END_VAR
(* @OBJECT_END := 'HMI_Heater' *)
(* @CONNECTIONS := HMI_Heater
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'HMI_Process' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL


	xDissolving_Pause			AT %MW199:		BOOL;	(* 12487 *)
	xResetErrorAll 				AT %MW200:		BOOL;	(* 12488 *)
	xDissolving_Start 				AT %MW201:		BOOL;	(* 12489 *)
	xDissolving_Stop 				AT %MW202:		BOOL;	(* 12490 *)




	xStartDissolvingAlkali		AT %MW232	:	BOOL;	(*	12520	*)
	xStartDissolvingAccid		AT %MW233	:	BOOL;	(*	12521	*)
	xPauseDissolvingAlkali	AT %MW234	:	BOOL;	(*	12522	*)
	xPauseDissolvingAccid	AT %MW235	:	BOOL;	(*	12523	*)

	wChosenRecipeLine1 		AT %MW203:		WORD:=1;(* 12491 *)
	wChosenRecipeLine2 		AT %MW204:		WORD:=1;(* 12492 *)
	wChosenRecipeLine3 		AT %MW205:		WORD:=1;(* 12493 *)
	wChosenRecipeLine4 		AT %MW206:		WORD:=1;(* 12494 *)

	wDissolvingStateLine1 		AT %MW207:		WORD;(* 12495 *)
	wDissolvingStateLine2 		AT %MW208:		WORD;(* 12496 *)
	wDissolvingStateLine3 		AT %MW209:		WORD;(* 12497 *)
	wDissolvingStateLine4 		AT %MW210:		WORD;(* 12498 *)

	wDissolvingPauseStateLine1		AT %MW236	:	WORD;	(*	12524	*)
	wDissolvingPauseStateLine2		AT %MW237	:	WORD;	(*	12525	*)
	wDissolvingPauseStateLine3		AT %MW238	:	WORD;	(*	12526	*)
	wDissolvingPauseStateLine4		AT %MW239	:	WORD;	(*	12527	*)

	wDissolvingError 				AT %MW211:		WORD;(* 12499 *)

	xStartWashingLine1 			AT %MW212:		BOOL;	(* 12500 *)
	xStartWashingLine2 			AT %MW213:		BOOL;	(* 12501 *)
	xStartWashingLine3 			AT %MW214:		BOOL;	(* 12502 *)
	xStartWashingLine4 			AT %MW215:		BOOL;	(* 12503 *)

	xPauseWashingLine1	AT %MW240	:	BOOL;	(*	12528	*)
	xPauseWashingLine2	AT %MW241	:	BOOL;	(*	12529	*)
	xPauseWashingLine3	AT %MW242	:	BOOL;	(*	12530	*)
	xPauseWashingLine4	AT %MW243	:	BOOL;	(*	12531	*)

	wWashingPauseStateLine1	AT %MW244	:	WORD;	(*	12532	*)
	wWashingPauseStateLine2	AT %MW245	:	WORD;	(*	12533	*)
	wWashingPauseStateLine3	AT %MW246	:	WORD;	(*	12534	*)
	wWashingPauseStateLine4	AT %MW247	:	WORD;	(*	12535	*)

	wWashingTimePassed1	AT %MW248	:	WORD;	(*	12536	*)
	wWashingTimePassed2	AT %MW249	:	WORD;	(*	12537	*)
	wWashingTimePassed3	AT %MW250	:	WORD;	(*	12538	*)
	wWashingTimePassed4	AT %MW251	:	WORD;	(*	12539	*)

	wWashingOperTimeSet1	AT %MW252	:	WORD;	(*	12540	*)
	wWashingOperTimeSet2	AT %MW253	:	WORD;	(*	12541	*)
	wWashingOperTimeSet3	AT %MW254	:	WORD;	(*	12542	*)
	wWashingOperTimeSet4	AT %MW255	:	WORD;	(*	12543	*)



	wWashingStateLine1 		AT %MW216:		WORD;(* 12504 *)
	wWashingStateLine2 		AT %MW217:		WORD;(* 12505 *)
	wWashingStateLine3 		AT %MW218:		WORD;(* 12506 *)
	wWashingStateLine4 		AT %MW219:		WORD;(* 12507 *)


	wWashingStateBitsLine1: 				DWORD;(* 12504 *)
	wWashingStateBitsLine2 : 				DWORD;(* 12504 *)
	wWashingStateBitsLine3 : 				DWORD;(* 12504 *)
	wWashingStateBitsLine4 : 				DWORD;(* 12504 *)

	wDissolvingStateBitsLine1 : 				DWORD;(* 12504 *)
	wDissolvingStateBitsLine2 : 				DWORD;(* 12504 *)
	wDissolvingStateBitsLine3 	: 			DWORD;(* 12504 *)
	wDissolvingStateBitsLine4 : 				DWORD;(* 12504 *)


	wWashingErr 					AT %MW220:		WORD;(* 12508 *)
	wWachingLine 				AT %MW221:		WORD;(* 12509 *)

	SelfWashDoWaterTank  			AT %MW222:		BOOL;	(* 12510 *)
	SelfWashDoUsedWaterTank  	AT %MW223:		BOOL;	(* 12511 *)
	SelfWashDoAlkaliTank  			AT %MW224:		BOOL;	(* 12512 *)
	SelfWashDoAccidTank  			AT %MW225:		BOOL;	(* 12513 *)
	SelfWashWaterIsReady  			AT %MW226:		BOOL;	(* 12514 *)
	SelfWashUsedWaterIsReady 	 AT %MW227:		BOOL;	(* 12515 *)
	SelfWashAlkaliIsReady  			AT %MW228:		BOOL;	(* 12516 *)
	SelfWashAccidIsReady  			AT %MW229:		BOOL;	(* 12517 *)
	xStartSelfWashing 				AT %MW230:		BOOL;	(* 12518 *)
	SelfWashState 					AT %MW231:		WORD;(* 12519 *)
	SelfWashStateBits:									DWORD;
	SelfWashStateBits2:									DWORD;

	xSelsWashingPause			AT %MW256	:	BOOL;		(*	12544	*)
	SelfWashPauseState			AT %MW257	:	WORD;	(*	12545	*)
	SelfWashingTimePast		AT %MW258	:	WORD;	(*	12546	*)
	SelfWashingOperTimeSet	AT %MW259	:	WORD;	(*	12547	*)
	SelfWashingAcknawlage		AT %MW260	:	BOOL;		(*	12548	*)

	wWashingErr_1	AT %MW261	:	WORD;	(*	12549	*)
	wWashingErr_2	AT %MW262	:	WORD;	(*	12550	*)
	wWashingErr_3	AT %MW263	:	WORD;	(*	12551	*)
	wWashingErr_4	AT %MW264	:	WORD;	(*	12552	*)
	xWashingDone_Line1	AT %MW1210:			BOOL;
	xWashingDone_Line2 	AT %MW1211:			BOOL;
	xWashingDone_Line3	AT %MW1212:			BOOL;
	xWashingDone_Line4	AT %MW1213:			BOOL;


END_VAR

(* @OBJECT_END := 'HMI_Process' *)
(* @CONNECTIONS := HMI_Process
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'HMI_Pump' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL
	Pump_FlawGet_1 			AT %MW300:		REAL;	(* 12588 *)
	Pump_FlawGet_2 			AT %MW302:		REAL;	(* 12590 *)
	Pump_FlawGet_3 			AT %MW304:		REAL;	(* 12592 *)
	Pump_FlawGet_4 			AT %MW306:		REAL;	(* 12594 *)

	Pump_OnManual_1 			AT %MW308:		BOOL;	(* 12596 *)
	Pump_OnManual_2 			AT %MW310:		BOOL;	(* 12598 *)
	Pump_OnManual_3 			AT %MW312:		BOOL;	(* 12600 *)
	Pump_OnManual_4 			AT %MW314:		BOOL;	(* 12602 *)

	Pump_NoFeedback_1 		AT %MW316:		BOOL;	(* 12604 *)
	Pump_NoFeedback_2 		AT %MW318:		BOOL;	(* 12606 *)
	Pump_NoFeedback_3 		AT %MW320:		BOOL;	(* 12608 *)
	Pump_NoFeedback_4 		AT %MW322:		BOOL;	(* 12610 *)

	Pump_Error_1 				AT %MW324:		WORD; (* 12612 *)
	Pump_Error_2 				AT %MW326:		WORD; (* 12614 *)
	Pump_Error_3 				AT %MW328:		WORD; (* 12616 *)
	Pump_Error_4 				AT %MW330:		WORD; (* 12618 *)

	Pump_OnAuto_1				AT %MW356	:	BOOL;	(*	12644	*)
	Pump_OnAuto_2				AT %MW358	:	BOOL;	(*	12646	*)
	Pump_OnAuto_3				AT %MW360	:	BOOL;	(*	12648	*)
	Pump_OnAuto_4				AT %MW362	:	BOOL;	(*	12650	*)

	Pump_BackFlawGet_1		AT %MW364	:	REAL;	(*	12652	*)
	Pump_BackFlawGet_2		AT %MW366	:	REAL;	(*	12654	*)
	Pump_BackFlawGet_3		AT %MW368	:	REAL;	(*	12656	*)
	Pump_BackFlawGet_4		AT %MW370	:	REAL;	(*	12658	*)

	PumpSpeedSet_1			AT %MW372	:	REAL;	(*	12660	*)
	PumpSpeedSet_2			AT %MW374	:	REAL;	(*	12662	*)
	PumpSpeedSet_3			AT %MW376	:	REAL;	(*	12664	*)
	PumpSpeedSet_4			AT %MW378	:	REAL;	(*	12666	*)

	Pump_FeedbackOn_1	AT %MW380	:	BOOL;	(*	12668	*)
	Pump_FeedbackOn_2	AT %MW382	:	BOOL;	(*	12670	*)
	Pump_FeedbackOn_3	AT %MW384	:	BOOL;	(*	12672	*)
	Pump_FeedbackOn_4	AT %MW386	:	BOOL;	(*	12674	*)

	PA_OnManual_1 			AT %MW388	:	BOOL;	(*	12676	*)
	PA_OnManual_2 			AT %MW390	:	BOOL;	(*	12678	*)
	PA_OnManual_3 			AT %MW392	:	BOOL;	(*	12680	*)
	PA_OnManual_4 			AT %MW394	:	BOOL;	(*	12682	*)

	PA_OnManual_11 		AT %MW396	:	BOOL;	(*	12684	*)
	PA_OnManual_12			AT %MW398	:	BOOL;	(*	12686	*)

	PA_OnAuto_1				AT %MW1000	:	BOOL;	(*	13288	*)
	PA_OnAuto_2				AT %MW1002	:	BOOL;	(*	13290	*)
	PA_OnAuto_3				AT %MW1004	:	BOOL;	(*	13292	*)
	PA_OnAuto_4				AT %MW1006	:	BOOL;	(*	13294	*)

	PA_OnAuto_11			AT %MW1008	:	BOOL;	(*	13296	*)
	PA_OnAuto_12			AT %MW1010	:	BOOL;	(*	13298	*)

	PA_State_1			AT %MW1012	:	BOOL;	(*	13300	*)
	PA_State_2			AT %MW1014	:	BOOL;	(*	13302	*)
	PA_State_3			AT %MW1016	:	BOOL;	(*	13304	*)
	PA_State_4			AT %MW1018	:	BOOL;	(*	13306	*)

	PA_State_11			AT %MW1020	:	BOOL;	(*	13308	*)
	PA_State_12			AT %MW1022	:	BOOL;	(*	13310	*)

	Pump_State_1		AT %MW1024	:	WORD;	(*	13312	*)
	Pump_State_2		AT %MW1026	:	WORD;	(*	13314	*)
	Pump_State_3		AT %MW1028	:	WORD;	(*	13316	*)
	Pump_State_4		AT %MW1030	:	WORD;	(*	13318	*)


END_VAR

VAR_GLOBAL RETAIN PERSISTENT



	Pump_ManualMode_1 		AT %MW332:		BOOL;	(* 12620 *)
	Pump_ManualMode_2 		AT %MW334:		BOOL;	(* 12622 *)
	Pump_ManualMode_3 		AT %MW336:		BOOL;	(* 12624 *)
	Pump_ManualMode_4 		AT %MW338:		BOOL;	(* 12626 *)

	Pump_FlawManualSet_1 	AT %MW340:		WORD; (* 12628 *)
	Pump_FlawManualSet_2 	AT %MW342:		WORD; (* 12630 *)
	Pump_FlawManualSet_3 	AT %MW344:		WORD; (* 12632 *)
	Pump_FlawManualSet_4 	AT %MW346:		WORD; (* 12634 *)

	Pump_VelocitySet_1 			AT %MW348:		WORD; (* 12636 *)
	Pump_VelocitySet_2 			AT %MW350:		WORD; (* 12638 *)
	Pump_VelocitySet_3 			AT %MW352:		WORD; (* 12640 *)
	Pump_VelocitySet_4 			AT %MW354:		WORD; (* 12642 *)

	PA_ManualMode_1	AT %MW1032	:	BOOL;	(*	13320	*)
	PA_ManualMode_2	AT %MW1034	:	BOOL;	(*	13322	*)
	PA_ManualMode_3	AT %MW1036	:	BOOL;	(*	13324	*)
	PA_ManualMode_4	AT %MW1038	:	BOOL;	(*	13326	*)

	PA_ManualMode_11	AT %MW1040	:	BOOL;	(*	13328	*)
	PA_ManualMode_12	AT %MW1042	:	BOOL;	(*	13330	*)

	sCheckSrting	AT %MW1050	:	WORD;	(*	13338	*)

END_VAR
(* @OBJECT_END := 'HMI_Pump' *)
(* @CONNECTIONS := HMI_Pump
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'HMI_Recipe' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL

	wLine  			AT %MW400:				WORD:=2;
	wRecipe		AT %MW402:				WORD;
	xSave			AT %MW404:				BOOL;


END_VAR
VAR_GLOBAL RETAIN PERSISTENT



	wAlkaliTime 					AT %MW406:		WORD;	(* 12694 *)
	wTalkaliSet  					AT %MW408:		WORD;	(* 12696 *)
	wFlawAlkaliSet  				AT %MW410:		REAL;	(* 12698 *)
	wConcAlkaliSet  				AT %MW412:		REAL;	(* 12700 *)
	wAccidTime 					AT %MW414:		WORD;	(* 12702 *)
	wTaccidSet  					AT %MW416:		WORD;	(* 12704 *)
	wFlawAccidSet  				AT %MW418:		REAL;	(* 12706 *)
	wConcAccidSet 				AT %MW420:		REAL;	(* 12708 *)
	wWaterTime  					AT %MW422:		WORD;	(* 12710 *)
	wTwaterSet  					AT %MW424:		WORD;	(* 12712 *)
	wFlawWaterSet  				AT %MW426:		REAL;	(* 12714 *)
	wAfterAccidWaterTime  		AT %MW428:		WORD;	(* 12716 *)
	wTafterAccidWater  			AT %MW430:		WORD;	(* 12718 *)
	wConcAfterAccidWaterSet  	AT %MW432:		REAL;	(* 12720 *)
	wAfterAlkaliWaterTime  		AT %MW434:		WORD;	(* 12722 *)
	wTafterAlkaliWater  			AT %MW436:		WORD;	(* 12724 *)
	wConcAfterAlkaliWaterSet  	AT %MW438:		REAL;	(* 12726 *)
	wTsteril 						AT %MW440:		WORD;	(* 12728 *)
	wFlawSteril 					AT %MW442:		REAL;	(* 12730 *)
	wSterilTime 					AT %MW446:		WORD;	(* 12734 *)
	wDissolLineAccid 			AT %MW448:		WORD;	(* 12736 *)
	wDissolLineAlkali 			AT %MW450:		WORD;	(* 12738 *)
	xDissilDoAccid 				AT %MW452:		BOOL;		(* 12740 *)
	xDissolDoAlkali 				AT %MW454:		BOOL;		(* 12742 *)
	rConcSteril 					AT %MW444:		REAL;		(* 12732 *)
	rFlawWaterAfterAlcaliSet		AT %MW456	:	REAL;	(*	12744	*)
	rFlawWaterAfterAccidSet		AT %MW458	:	REAL;	(*	12746	*)
	rWaterAfterSterilFlaw			AT %MW460	:	REAL;	(*	12748	*)
	rWaterAfterSterilConc			AT %MW462	:	REAL;	(*	12750	*)
	rWaterAfterSterilT				AT %MW464	:	WORD;	(*	12752	*)
	rWaterAfterSterilTime			AT %MW466	:	WORD;	(*	12754	*)
	wConcPumpTimeSteril		AT %MW468	:	WORD;	(*	12756	*)







END_VAR
(* @OBJECT_END := 'HMI_Recipe' *)
(* @CONNECTIONS := HMI_Recipe
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'HMI_Sensors' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL

	Conc_Line1	AT %MW1100	:	REAL;	(*	13388	*)
	Conc_Line2	AT %MW1102	:	REAL;	(*	13390	*)
	Conc_Line3	AT %MW1104	:	REAL;	(*	13392	*)
	Conc_Line4	AT %MW1106	:	REAL;	(*	13394	*)

	CleanWaterLevel		AT %MW1108	:	REAL;	(*	13396	*)
	UsedWaterLevel		AT %MW1110	:	REAL;	(*	13398	*)
	AccidLevel		AT %MW1112	:	REAL;	(*	13400	*)
	AlkaliLevel		AT %MW1114	:	REAL;	(*	13402	*)

	Temp_Accid	AT %MW1116	:	REAL;	(*	13404	*)
	Temp_Alkali	AT %MW1118	:	REAL;	(*	13406	*)
	Temp_Line3	AT %MW1120	:	REAL;	(*	13408	*)
	Temp_Line4	AT %MW1122	:	REAL;	(*	13410	*)

	DI_FeedBackSwitchLine1	AT %MW1124	:	BOOL;	(*	13412	*)
	DI_FeedBackSwitchLine2	AT %MW1126	:	BOOL;	(*	13414	*)
	DI_FeedBackSwitchLine3	AT %MW1128	:	BOOL;	(*	13416	*)
	DI_FeedBackSwitchLine4	AT %MW1130	:	BOOL;	(*	13418	*)

	DI_AlkaliUpperLevel		AT %MW1132	:	BOOL;	(*	13420	*)
	DI_AccidUpperLevel		AT %MW1134	:	BOOL;	(*	13422	*)
	DI_WaterUpperLevel		AT %MW1136	:	BOOL;	(*	13424	*)
	DI_UsedWaterUpperLevel		AT %MW1138	:	BOOL;	(*	13426	*)



END_VAR

(* @OBJECT_END := 'HMI_Sensors' *)
(* @CONNECTIONS := HMI_Sensors
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'HMI_Settings' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL
END_VAR
VAR_GLOBAL RETAIN

	rDissolAlkaliConcSet 					AT %MW500:		REAL;	(* 12788 *)
	rDissolWaterConcSet 				AT %MW502:		REAL;	(* 12790 *)
	rDissolAccidConcSet 					AT %MW504:		REAL;	(* 12792 *)

	rDissolAccidLevelSet 					AT %MW562	:	REAL;	(*	12850	*)
	rDissolAlkaliLevelSet 					AT %MW564	:	REAL;	(*	12852	*)
	rPA_WorkTime_Acc					AT %MW566	:	WORD;	(*	12854	*)
	rPA_WorkTime_Alk					AT %MW568	:	WORD;	(*	12856	*)
	rConcCheckTime						AT %MW570	:	WORD;	(*	12858	*)


	wFlawSelWafing 						AT %MW506:		REAL;	(* 12794 *)
	wFlawDissolving 						AT %MW508:		REAL;	(* 12796 *)
	wUsedWaterLevelOK  				AT %MW510:		REAL:=90;	(* 12798 *)
	wUsedWaterLevelNotOK  			AT %MW512:		REAL:=80;	(* 12800 *)
	wAfterRinseConcAlk  					AT %MW514:		REAL:=30;	(* 12802 *)
	wAfterRinseConcAcc  				AT %MW516:		REAL:=30;	(* 12804 *)

	Heater_Kp								AT %MW518:		REAL:=5;	(* 12806 *)
	Heater_Ki								AT %MW520:		REAL:=3;	(* 12808 *)
	Heater_Kd								AT %MW522:		REAL;	(* 12810 *)
	Heater_wMaxPower 					AT %MW524:		WORD:=100;	(* 12812 *)
	Heater_wMinPower 					AT %MW526:		WORD;	(* 12814 *)
	Pump_Kp								AT %MW528:		REAL:=0.1;	(* 12816 *)
	Pump_Ki								AT %MW530:		REAL:=15;	(* 12818 *)
	Pump_Kd								AT %MW532:		REAL;	(* 12820 *)
	Pump_MaxSpeed 					AT %MW534:		WORD:=45;	(* 12822 *)
	Pump_MinSpeed 						AT %MW536:		WORD;	(* 12824 *)

	RemotePumpOnDelay				AT %MW572	:	WORD;	(*	12860	*)
	RemotePumpOffDelay				AT %MW574	:	WORD;	(*	12862	*)

	RemotePumpOnDelay2				AT %MW1572	:	WORD;	(*	12860	*)
	RemotePumpOffDelay2				AT %MW1574	:	WORD;	(*	12862	*)
	rConcSolutionStartOperationAlk		AT %MW576	:	REAL:=0.5;	(*	12864	*)
	rConcSolutionStopoperationAlk		AT %MW578	:	REAL:=0.5;	(*	12866	*)
	rConcSolutionStartOperationAcc		AT %MW580	:	REAL:=0.5;	(*	12868	*)
	rConcSolutionStopoperationAcc		AT %MW582	:	REAL:=0.5;	(*	12870	*)







	SelfWashUsedWaterLevelOK 		AT %MW538:		REAL;	(* 12826 *)
	SelfWashWaterLevelOK 				AT %MW540:		REAL;	(* 12828 *)
	SelfWashUsedWaterLevelDrain 		AT %MW542:		REAL:=0.01;	(* 12830 *)
	SelfWashWaterLevelDrain 			AT %MW544:		REAL:=0.01;	(* 12832 *)
	SelfWashAlkaliLevelOK 				AT %MW546:		REAL;	(* 12834 *)
	SelfWashAlkaliLevelDrain 			AT %MW548:		REAL;	(* 12836 *)
	SelfWashAccidLevelOK 				AT %MW550:		REAL;	(* 12838 *)
	SelfWashwAccidLevelDrain 			AT %MW552:		REAL;	(* 12840 *)
	SelfWashwPumpFlawSet 			AT %MW554:		REAL;	(* 12842 *)
	SelfWashByAlkaliTime  				AT %MW1556:		WORD;	(* 13844 *)
	SelfWashByAccidTime  				AT %MW1558:		WORD;	(* 13846 *)
	SelfWashByWaterTime_  				AT %MW1560:		WORD;	(* 13848 *)
	rWaterLevelNotOK 					AT %MW1562:		REAL:=90;	(* 12850 *)
	_SelfWashByWaterTime				AT %MW1200:		WORD;	(* 13848 *)

END_VAR
(* @OBJECT_END := 'HMI_Settings' *)
(* @CONNECTIONS := HMI_Settings
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'HMI_Values' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL

	xAlkaliIsReady:			BOOL;
	xAccidIsReady:			BOOL;

	xDrainOk:					BOOL;
	wDaysRemain:			WORD;
END_VAR

(* @OBJECT_END := 'HMI_Values' *)
(* @CONNECTIONS := HMI_Values
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'HMI_Valves' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '0' *)
VAR_GLOBAL

	OnManual_V101	AT %MW700	:	BOOL;	(*	12988	*)
	OnManual_V102	AT %MW701	:	BOOL;	(*	12989	*)
	OnManual_V103	AT %MW702	:	BOOL;	(*	12990	*)
	OnManual_V104	AT %MW703	:	BOOL;	(*	12991	*)
	OnManual_V105	AT %MW704	:	BOOL;	(*	12992	*)
	OnManual_V106	AT %MW705	:	BOOL;	(*	12993	*)
	OnManual_V107	AT %MW706	:	BOOL;	(*	12994	*)
	OnManual_V108	AT %MW707	:	BOOL;	(*	12995	*)
	OnManual_V109	AT %MW708	:	BOOL;	(*	12996	*)
	OnManual_V110	AT %MW709	:	BOOL;	(*	12997	*)
	OnManual_V111	AT %MW710	:	BOOL;	(*	12998	*)
	OnManual_V201	AT %MW711	:	BOOL;	(*	12999	*)
	OnManual_V202	AT %MW712	:	BOOL;	(*	13000	*)
	OnManual_V203	AT %MW713	:	BOOL;	(*	13001	*)
	OnManual_V204	AT %MW714	:	BOOL;	(*	13002	*)
	OnManual_V205	AT %MW715	:	BOOL;	(*	13003	*)
	OnManual_V206	AT %MW716	:	BOOL;	(*	13004	*)
	OnManual_V207	AT %MW717	:	BOOL;	(*	13005	*)
	OnManual_V208	AT %MW718	:	BOOL;	(*	13006	*)
	OnManual_V209	AT %MW719	:	BOOL;	(*	13007	*)
	OnManual_V210	AT %MW720	:	BOOL;	(*	13008	*)
	OnManual_V211	AT %MW721	:	BOOL;	(*	13009	*)
	OnManual_V301	AT %MW722	:	BOOL;	(*	13010	*)
	OnManual_V302	AT %MW723	:	BOOL;	(*	13011	*)
	OnManual_V303	AT %MW724	:	BOOL;	(*	13012	*)
	OnManual_V304	AT %MW725	:	BOOL;	(*	13013	*)
	OnManual_V305	AT %MW726	:	BOOL;	(*	13014	*)
	OnManual_V306	AT %MW727	:	BOOL;	(*	13015	*)
	OnManual_V307	AT %MW728	:	BOOL;	(*	13016	*)
	OnManual_V308	AT %MW729	:	BOOL;	(*	13017	*)
	OnManual_V309	AT %MW730	:	BOOL;	(*	13018	*)
	OnManual_V310	AT %MW731	:	BOOL;	(*	13019	*)
	OnManual_V311	AT %MW732	:	BOOL;	(*	13020	*)
	OnManual_V401	AT %MW733	:	BOOL;	(*	13021	*)
	OnManual_V402	AT %MW734	:	BOOL;	(*	13022	*)
	OnManual_V403	AT %MW735	:	BOOL;	(*	13023	*)
	OnManual_V404	AT %MW736	:	BOOL;	(*	13024	*)
	OnManual_V405	AT %MW737	:	BOOL;	(*	13025	*)
	OnManual_V406	AT %MW738	:	BOOL;	(*	13026	*)
	OnManual_V407	AT %MW739	:	BOOL;	(*	13027	*)
	OnManual_V408	AT %MW740	:	BOOL;	(*	13028	*)
	OnManual_V409	AT %MW741	:	BOOL;	(*	13029	*)
	OnManual_V410	AT %MW742	:	BOOL;	(*	13030	*)
	OnManual_V411	AT %MW743	:	BOOL;	(*	13031	*)
	OnManual_V501	AT %MW744	:	BOOL;	(*	13032	*)
	OnManual_V510	AT %MW745	:	BOOL;	(*	13033	*)
	OnManual_V511	AT %MW746	:	BOOL;	(*	13034	*)
	OnManual_V512	AT %MW747	:	BOOL;	(*	13035	*)
	OnManual_V513	AT %MW748	:	BOOL;	(*	13036	*)
	OnManual_V514	AT %MW749	:	BOOL;	(*	13037	*)
	OnManual_V515	AT %MW750	:	BOOL;	(*	13038	*)
							
							
							
							
	xState_V101	AT %MW751	:	BOOL;	(*	13039	*)
	xState_V102	AT %MW752	:	BOOL;	(*	13040	*)
	xState_V103	AT %MW753	:	BOOL;	(*	13041	*)
	xState_V104	AT %MW754	:	BOOL;	(*	13042	*)
	xState_V105	AT %MW755	:	BOOL;	(*	13043	*)
	xState_V106	AT %MW756	:	BOOL;	(*	13044	*)
	xState_V107	AT %MW757	:	BOOL;	(*	13045	*)
	xState_V108	AT %MW758	:	BOOL;	(*	13046	*)
	xState_V109	AT %MW759	:	BOOL;	(*	13047	*)
	xState_V110	AT %MW760	:	BOOL;	(*	13048	*)
	xState_V111	AT %MW761	:	BOOL;	(*	13049	*)
	xState_V201	AT %MW762	:	BOOL;	(*	13050	*)
	xState_V202	AT %MW763	:	BOOL;	(*	13051	*)
	xState_V203	AT %MW764	:	BOOL;	(*	13052	*)
	xState_V204	AT %MW765	:	BOOL;	(*	13053	*)
	xState_V205	AT %MW766	:	BOOL;	(*	13054	*)
	xState_V206	AT %MW767	:	BOOL;	(*	13055	*)
	xState_V207	AT %MW768	:	BOOL;	(*	13056	*)
	xState_V208	AT %MW769	:	BOOL;	(*	13057	*)
	xState_V209	AT %MW770	:	BOOL;	(*	13058	*)
	xState_V210	AT %MW771	:	BOOL;	(*	13059	*)
	xState_V211	AT %MW772	:	BOOL;	(*	13060	*)
	xState_V301	AT %MW773	:	BOOL;	(*	13061	*)
	xState_V302	AT %MW774	:	BOOL;	(*	13062	*)
	xState_V303	AT %MW775	:	BOOL;	(*	13063	*)
	xState_V304	AT %MW776	:	BOOL;	(*	13064	*)
	xState_V305	AT %MW777	:	BOOL;	(*	13065	*)
	xState_V306	AT %MW778	:	BOOL;	(*	13066	*)
	xState_V307	AT %MW779	:	BOOL;	(*	13067	*)
	xState_V308	AT %MW780	:	BOOL;	(*	13068	*)
	xState_V309	AT %MW781	:	BOOL;	(*	13069	*)
	xState_V310	AT %MW782	:	BOOL;	(*	13070	*)
	xState_V311	AT %MW783	:	BOOL;	(*	13071	*)
	xState_V401	AT %MW784	:	BOOL;	(*	13072	*)
	xState_V402	AT %MW785	:	BOOL;	(*	13073	*)
	xState_V403	AT %MW786	:	BOOL;	(*	13074	*)
	xState_V404	AT %MW787	:	BOOL;	(*	13075	*)
	xState_V405	AT %MW788	:	BOOL;	(*	13076	*)
	xState_V406	AT %MW789	:	BOOL;	(*	13077	*)
	xState_V407	AT %MW790	:	BOOL;	(*	13078	*)
	xState_V408	AT %MW791	:	BOOL;	(*	13079	*)
	xState_V409	AT %MW792	:	BOOL;	(*	13080	*)
	xState_V410	AT %MW793	:	BOOL;	(*	13081	*)
	xState_V411	AT %MW794	:	BOOL;	(*	13082	*)
	xState_V501	AT %MW795	:	BOOL;	(*	13083	*)
	xState_V510	AT %MW796	:	BOOL;	(*	13084	*)
	xState_V511	AT %MW797	:	BOOL;	(*	13085	*)
	xState_V512	AT %MW798	:	BOOL;	(*	13086	*)
	xState_V513	AT %MW799	:	BOOL;	(*	13087	*)
	xState_V514	AT %MW800	:	BOOL;	(*	13088	*)
	xState_V515	AT %MW801	:	BOOL;	(*	13089	*)
							
							
	OnAuto_V101	AT %MW802	:	BOOL;	(*	13090	*)
	OnAuto_V102	AT %MW803	:	BOOL;	(*	13091	*)
	OnAuto_V103	AT %MW804	:	BOOL;	(*	13092	*)
	OnAuto_V104	AT %MW805	:	BOOL;	(*	13093	*)
	OnAuto_V105	AT %MW806	:	BOOL;	(*	13094	*)
	OnAuto_V106	AT %MW807	:	BOOL;	(*	13095	*)
	OnAuto_V107	AT %MW808	:	BOOL;	(*	13096	*)
	OnAuto_V108	AT %MW809	:	BOOL;	(*	13097	*)
	OnAuto_V109	AT %MW810	:	BOOL;	(*	13098	*)
	OnAuto_V110	AT %MW811	:	BOOL;	(*	13099	*)
	OnAuto_V111	AT %MW812	:	BOOL;	(*	13100	*)
	OnAuto_V201	AT %MW813	:	BOOL;	(*	13101	*)
	OnAuto_V202	AT %MW814	:	BOOL;	(*	13102	*)
	OnAuto_V203	AT %MW815	:	BOOL;	(*	13103	*)
	OnAuto_V204	AT %MW816	:	BOOL;	(*	13104	*)
	OnAuto_V205	AT %MW817	:	BOOL;	(*	13105	*)
	OnAuto_V206	AT %MW818	:	BOOL;	(*	13106	*)
	OnAuto_V207	AT %MW819	:	BOOL;	(*	13107	*)
	OnAuto_V208	AT %MW820	:	BOOL;	(*	13108	*)
	OnAuto_V209	AT %MW821	:	BOOL;	(*	13109	*)
	OnAuto_V210	AT %MW822	:	BOOL;	(*	13110	*)
	OnAuto_V211	AT %MW823	:	BOOL;	(*	13111	*)
	OnAuto_V301	AT %MW824	:	BOOL;	(*	13112	*)
	OnAuto_V302	AT %MW825	:	BOOL;	(*	13113	*)
	OnAuto_V303	AT %MW826	:	BOOL;	(*	13114	*)
	OnAuto_V304	AT %MW827	:	BOOL;	(*	13115	*)
	OnAuto_V305	AT %MW828	:	BOOL;	(*	13116	*)
	OnAuto_V306	AT %MW829	:	BOOL;	(*	13117	*)
	OnAuto_V307	AT %MW830	:	BOOL;	(*	13118	*)
	OnAuto_V308	AT %MW831	:	BOOL;	(*	13119	*)
	OnAuto_V309	AT %MW832	:	BOOL;	(*	13120	*)
	OnAuto_V310	AT %MW833	:	BOOL;	(*	13121	*)
	OnAuto_V311	AT %MW834	:	BOOL;	(*	13122	*)
	OnAuto_V401	AT %MW835	:	BOOL;	(*	13123	*)
	OnAuto_V402	AT %MW836	:	BOOL;	(*	13124	*)
	OnAuto_V403	AT %MW837	:	BOOL;	(*	13125	*)
	OnAuto_V404	AT %MW838	:	BOOL;	(*	13126	*)
	OnAuto_V405	AT %MW839	:	BOOL;	(*	13127	*)
	OnAuto_V406	AT %MW840	:	BOOL;	(*	13128	*)
	OnAuto_V407	AT %MW841	:	BOOL;	(*	13129	*)
	OnAuto_V408	AT %MW842	:	BOOL;	(*	13130	*)
	OnAuto_V409	AT %MW843	:	BOOL;	(*	13131	*)
	OnAuto_V410	AT %MW844	:	BOOL;	(*	13132	*)
	OnAuto_V411	AT %MW845	:	BOOL;	(*	13133	*)
	OnAuto_V501	AT %MW846	:	BOOL;	(*	13134	*)
	OnAuto_V510	AT %MW847	:	BOOL;	(*	13135	*)
	OnAuto_V511	AT %MW848	:	BOOL;	(*	13136	*)
	OnAuto_V512	AT %MW849	:	BOOL;	(*	13137	*)
	OnAuto_V513	AT %MW850	:	BOOL;	(*	13138	*)
	OnAuto_V514	AT %MW851	:	BOOL;	(*	13139	*)
	OnAuto_V515	AT %MW852	:	BOOL;	(*	13140	*)



	xStopFillingWaterTank: BOOL;



END_VAR

VAR_GLOBAL RETAIN PERSISTENT

	ManualMode_V101	AT %MW853	:	BOOL;	(*	13140	*)
	ManualMode_V102	AT %MW854	:	BOOL;	(*	13141	*)
	ManualMode_V103	AT %MW855	:	BOOL;	(*	13142	*)
	ManualMode_V104	AT %MW856	:	BOOL;	(*	13143	*)
	ManualMode_V105	AT %MW857	:	BOOL;	(*	13144	*)
	ManualMode_V106	AT %MW858	:	BOOL;	(*	13145	*)
	ManualMode_V107	AT %MW859	:	BOOL;	(*	13146	*)
	ManualMode_V108	AT %MW860	:	BOOL;	(*	13147	*)
	ManualMode_V109	AT %MW861	:	BOOL;	(*	13148	*)
	ManualMode_V110	AT %MW862	:	BOOL;	(*	13149	*)
	ManualMode_V111	AT %MW863	:	BOOL;	(*	13150	*)
	ManualMode_V201	AT %MW864	:	BOOL;	(*	13151	*)
	ManualMode_V202	AT %MW865	:	BOOL;	(*	13152	*)
	ManualMode_V203	AT %MW866	:	BOOL;	(*	13153	*)
	ManualMode_V204	AT %MW867	:	BOOL;	(*	13154	*)
	ManualMode_V205	AT %MW868	:	BOOL;	(*	13155	*)
	ManualMode_V206	AT %MW869	:	BOOL;	(*	13156	*)
	ManualMode_V207	AT %MW870	:	BOOL;	(*	13157	*)
	ManualMode_V208	AT %MW871	:	BOOL;	(*	13158	*)
	ManualMode_V209	AT %MW872	:	BOOL;	(*	13159	*)
	ManualMode_V210	AT %MW873	:	BOOL;	(*	13160	*)
	ManualMode_V211	AT %MW874	:	BOOL;	(*	13161	*)
	ManualMode_V301	AT %MW875	:	BOOL;	(*	13162	*)
	ManualMode_V302	AT %MW876	:	BOOL;	(*	13163	*)
	ManualMode_V303	AT %MW877	:	BOOL;	(*	13164	*)
	ManualMode_V304	AT %MW878	:	BOOL;	(*	13165	*)
	ManualMode_V305	AT %MW879	:	BOOL;	(*	13166	*)
	ManualMode_V306	AT %MW880	:	BOOL;	(*	13167	*)
	ManualMode_V307	AT %MW881	:	BOOL;	(*	13168	*)
	ManualMode_V308	AT %MW882	:	BOOL;	(*	13169	*)
	ManualMode_V309	AT %MW883	:	BOOL;	(*	13170	*)
	ManualMode_V310	AT %MW884	:	BOOL;	(*	13171	*)
	ManualMode_V311	AT %MW885	:	BOOL;	(*	13172	*)
	ManualMode_V401	AT %MW886	:	BOOL;	(*	13173	*)
	ManualMode_V402	AT %MW887	:	BOOL;	(*	13174	*)
	ManualMode_V403	AT %MW888	:	BOOL;	(*	13175	*)
	ManualMode_V404	AT %MW889	:	BOOL;	(*	13176	*)
	ManualMode_V405	AT %MW890	:	BOOL;	(*	13177	*)
	ManualMode_V406	AT %MW891	:	BOOL;	(*	13178	*)
	ManualMode_V407	AT %MW892	:	BOOL;	(*	13179	*)
	ManualMode_V408	AT %MW893	:	BOOL;	(*	13180	*)
	ManualMode_V409	AT %MW894	:	BOOL;	(*	13181	*)
	ManualMode_V410	AT %MW895	:	BOOL;	(*	13182	*)
	ManualMode_V411	AT %MW896	:	BOOL;	(*	13183	*)
	ManualMode_V501	AT %MW897	:	BOOL;	(*	13184	*)
	ManualMode_V510	AT %MW898	:	BOOL;	(*	13185	*)
	ManualMode_V511	AT %MW899	:	BOOL;	(*	13186	*)
	ManualMode_V512	AT %MW900	:	BOOL;	(*	13187	*)
	ManualMode_V513	AT %MW901	:	BOOL;	(*	13188	*)
	ManualMode_V514	AT %MW902	:	BOOL;	(*	13189	*)
	ManualMode_V515	AT %MW903	:	BOOL;	(*	13190	*)


END_VAR
(* @OBJECT_END := 'HMI_Valves' *)
(* @CONNECTIONS := HMI_Valves
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'ProcGlobal' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL
	xDissolving_StartLine1:		BOOL;
	xDissolving_StartLine2:		BOOL;
	xDissolving_StartLine3:		BOOL;
	xDissolving_StartLine4:		BOOL;

	xDissolving_PausetLine1:		BOOL;
	xDissolving_PausetLine2:		BOOL;
	xDissolving_PausetLine3:		BOOL;
	xDissolving_PausetLine4:		BOOL;


	xDoAccid_Line1:					BOOL;
	xDoAlkali_Line1:					BOOL;
	xDoAccid_Line2:					BOOL;
	xDoAlkali_Line2:					BOOL;
	xDoAccid_Line3:					BOOL;
	xDoAlkali_Line3:					BOOL;
	xDoAccid_Line4:					BOOL;
	xDoAlkali_Line4:					BOOL;





END_VAR
VAR_GLOBAL RETAIN
	xAccidIsGoing1:					BOOL;
	xAccidIsGoing2:					BOOL;
	xAccidIsGoing3:					BOOL;
	xAccidIsGoing4:					BOOL;
END_VAR
(* @OBJECT_END := 'ProcGlobal' *)
(* @CONNECTIONS := ProcGlobal
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'Pump' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL

	Pump_FlawAutoSet_1:		REAL;
	Pump_FlawAutoSet_2:		REAL;
	Pump_FlawAutoSet_3:		REAL;
	Pump_FlawAutoSet_4:		REAL;



END_VAR

(* @OBJECT_END := 'Pump' *)
(* @CONNECTIONS := Pump
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'RecipeVars' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL

	arOperations:					ARRAY[0..7] OF BOOL;




END_VAR

VAR_GLOBAL RETAIN

	arAlkaliTime:					ARRAY[1..4, 1..10] OF WORD;
	arTalkaliSet: 					ARRAY[1..4, 1..10] OF WORD;
	arFlawAlkaliSet: 				ARRAY[1..4, 1..10] OF REAL;
	arConcAlkaliSet: 				ARRAY[1..4, 1..10] OF REAL;

	arAccidTime:					ARRAY[1..4, 1..10] OF WORD;
	arTaccidSet: 					ARRAY[1..4, 1..10] OF WORD;
	arFlawAccidSet: 				ARRAY[1..4, 1..10] OF REAL;
	arConcAccidSet:				ARRAY[1..4, 1..10] OF REAL;

	arWaterTime: 					ARRAY[1..4, 1..10] OF WORD;
	arTwaterSet: 					ARRAY[1..4, 1..10] OF WORD;
	arFlawWaterSet: 				ARRAY[1..4, 1..10] OF REAL;

	arAfterAccidWaterTime: 		ARRAY[1..4, 1..10] OF WORD;
	arTafterAccidWater: 			ARRAY[1..4, 1..10] OF WORD;
	arConcAfterAccidWaterSet: 	ARRAY[1..4, 1..10] OF REAL;

	arAfterAlkaliWaterTime: 		ARRAY[1..4, 1..10] OF WORD;
	arTafterAlkaliWater: 			ARRAY[1..4, 1..10] OF WORD;
	arConcAfterAlkaliWaterSet: 	ARRAY[1..4, 1..10] OF REAL;

	arTsterilSet: 					ARRAY[1..4, 1..10] OF WORD;
	arFlawSterilSet: 				ARRAY[1..4, 1..10] OF REAL;
	arConcSterilSet: 				ARRAY[1..4, 1..10] OF REAL;
	arSterilTime: 					ARRAY[1..4, 1..10] OF WORD;

	arFlawWaterAfterAlcaliSet:	ARRAY[1..4, 1..10] OF REAL;
	arFlawWaterAfterAccidSet:	ARRAY[1..4, 1..10] OF REAL;

	arWaterAfterSterilFlaw:		ARRAY[1..4, 1..10] OF REAL;
	arWaterAfterSterilConc:		ARRAY[1..4, 1..10] OF REAL;
	arWaterAfterSterilT:			ARRAY[1..4, 1..10] OF WORD;
	arWaterAfterSterilTime:		ARRAY[1..4, 1..10] OF WORD;
	arConcPumpTimeSteril:		ARRAY[1..4, 1..10] OF WORD;
	arOperations2x:				ARRAY[1..4,0..7] OF BOOL;
	arOperations3x:				ARRAY[1..4,1..10,0..7] OF BOOL;


END_VAR

(* @OBJECT_END := 'RecipeVars' *)
(* @CONNECTIONS := RecipeVars
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'Valves' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL



END_VAR

(* @OBJECT_END := 'Valves' *)
(* @CONNECTIONS := Valves
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'Variable_Configuration' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_CONFIG
END_VAR

(* @OBJECT_END := 'Variable_Configuration' *)
(* @CONNECTIONS := Variable_Configuration
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)


_ALARMCONFIG
_ALARMCONFIGNEXTTEXTID : 10002
_ALARMCONFIGFORMATS : 'HH$':$'mm$':$'ss','dd$'-$'MM$'-$'yyyy'
_ALARMCLASSLIST : 1
_ALARMCLASSID : 0
_ALARMCLASSACKTYPE : 0
_ALARMCLASSNAME : 'DEFAULT'
_ALARMCLASSDESCRIPTION : ''
_ALARMCLASSBGCOLORS : 16777215,16777215,16777215
_ALARMCLASSTEXTCOLORS : 3394560,255,16711680
_ALARMCLASSBITMAPS : '','',''
_ALARMACTIONLIST : 0
(* @ALARMCLASSRESETCOLORS := '_ALARMCLASSRESETCOLORS: 33023,16777215' *)
(* @ALARMCLASSRESETBITMAP := '_ALARMCLASSRESETBITMAP: $'$'' *)
_ALARMGROUPLISTNAME : 'System'
_ALARMGROUPPATH : 'System'
_ALARMGROUPLIST : 0
_VISUALSETTINGSFLAGS : 0,0,0,0
_VISUALSETTINGSFLAGS : '','',''
_VISUALSETTINGSDYNTEXTFILECOUNT : 0

(* @ALARMCONFIGFLAGS := '_ALARMCONFIGFLAGS: 4' *)
(* @ALARMCONFIGGLOBALDB_STR := '_ALARMCONFIGGLOBALDB_STRINGS: $'$',$'$',$'$',$'$'' *)
(* @ALARMCONFIGGLOBALDB_NUM := '_ALARMCONFIGGLOBALDB_NUMBERS: 0,0' *)
_END_ALARMCONFIG


LIBRARY
Iecsfc.lib 30.1.13 14:05:12
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 1
SFCActionControl: 0
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY

LIBRARY
Standard.lib 20.5.14 09:13:26
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 26
ASCIIBYTE_TO_STRING: 2048
CONCAT: 0
CTD: 0
CTU: 0
CTUD: 0
DELETE: 0
F_TRIG: 0
FIND: 0
INSERT: 0
LEFT: 0
LEN: 0
MID: 0
R_TRIG: 0
REAL_STATE: 2048
REPLACE: 0
RIGHT: 0
RS: 0
RTC: 0
SEMA: 0
SR: 0
STANDARD_VERSION: 2048
STRING_COMPARE: 2048
STRING_TO_ASCIIBYTE: 2048
TOF: 0
TON: 0
TP: 0
NumOfGVLs: 1
'Global Variables 0': 0
END_LIBRARY

LIBRARY
SYSLIBCALLBACK.LIB 30.1.13 14:05:12
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 2
SysCallbackRegister: 0
SysCallbackUnregister: 0
NumOfGVLs: 2
Globale_Variablen: 0
Version: 0
END_LIBRARY

LIBRARY
SysLibRtc.lib 30.1.13 14:05:12
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 4
SysRtcCheckBattery: 0
SysRtcGetHourMode: 0
SysRtcGetTime: 0
SysRtcSetTime: 0
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY

LIBRARY
SysLibTime.lib 30.1.13 14:05:12
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 2
CurTime: 0
CurTimeEx: 0
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY

LIBRARY
Util_no_Real.lib 30.1.13 14:05:12
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 12
BCD_TO_INT: 0
BLINK: 0
EXTRACT: 0
HYSTERESIS: 0
INT_TO_BCD: 0
LIMITALARM: 0
PACK: 0
PUTBIT: 0
RAMP_INT: 0
STATISTICS_INT: 0
UNPACK: 0
Version: 2048
NumOfGVLs: 4
'CAM Data': 2048
'CNC Data': 2048
'Drive Configuration Data': 2048
Globale_Variablen: 2048
END_LIBRARY

PLC_CONFIGURATION
_GLOBAL
_VERSION: 3
_AUTOADR: 1
_CHECKADR: 0
_SAVECONFIGFILESINPROJECT: 0
_END_GLOBAL

_MODULE: '3S'
_SECTION_NAME: 'Root'
_INDEX_IN_PARENT: '-1'
_MODULE_NAME: 'PLC Configuration'
_NODE_ID: -1
_IECIN: %IB0
_IECOUT: %QB0
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_MODULE: '3S'
_SECTION_NAME: 'K_Bus'
_INDEX_IN_PARENT: '1'
_MODULE_NAME: 'K-Bus'
_NODE_ID: 0
_IECIN: %IB0
_IECOUT: %QB0
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: 'PFC200 CS 2ETH RS (FW03-...)'

_PARAMETER
_PARAM 201019000: 0, '1'
_PARAM 201019001: 0, '10000'
_PARAM 201019002: 0, '0'
_PARAM 201019003: 0, '1'
_END_PARAMETER

_MODULE: '3S'
_SECTION_NAME: 'Type_1_16_Channels'
_INDEX_IN_PARENT: '1'
_MODULE_NAME: '0750-1405 16 DI 24V DC 3.0ms'
_NODE_ID: 0
_IECIN: %IB56
_IECOUT: %QB16
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_Pump_FeedbackOn_1'
_COMMENT: 'Ch_1 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_Pump_Alm_1'
_COMMENT: 'Ch_2 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_Pump_FeedbackOn_2'
_COMMENT: 'Ch_3 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_Pump_Alm_2'
_COMMENT: 'Ch_4 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_Pump_FeedbackOn_3'
_COMMENT: 'Ch_5 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_Pump_Alm_3'
_COMMENT: 'Ch_6 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_Pump_FeedbackOn_4'
_COMMENT: 'Ch_7 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_Pump_Alm_4'
_COMMENT: 'Ch_8 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_DI_FeedBackSwitchLine1'
_COMMENT: 'Ch_9 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_DI_FeedBackSwitchLine2'
_COMMENT: 'Ch_10 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_DI_FeedBackSwitchLine3'
_COMMENT: 'Ch_11 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: '_DI_FeedBackSwitchLine4'
_COMMENT: 'Ch_12 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: '_LH_1'
_COMMENT: 'Ch_13 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: '_LH_2'
_COMMENT: 'Ch_14 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: '_LH_3'
_COMMENT: 'Ch_15 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: '_LH_4'
_COMMENT: 'Ch_16 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX28.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_1_16_Channels'
_INDEX_IN_PARENT: '2'
_MODULE_NAME: '0750-1405 16 DI 24V DC 3.0ms'
_NODE_ID: 1
_IECIN: %IB56
_IECOUT: %QB16
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_FC_1'
_COMMENT: 'Ch_1 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_FC_2'
_COMMENT: 'Ch_2 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_FC_3'
_COMMENT: 'Ch_3 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_FC_4'
_COMMENT: 'Ch_4 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_Permition_Line_1'
_COMMENT: 'Ch_5 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_Permition_Line_2'
_COMMENT: 'Ch_6 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_Permition_Line_3'
_COMMENT: 'Ch_7 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_Permition_Line_4'
_COMMENT: 'Ch_8 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_Permition_Line_5'
_COMMENT: 'Ch_9 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_10 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_11 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_12 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_13 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_14 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_15 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_16 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX29.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_1_16_Channels'
_INDEX_IN_PARENT: '3'
_MODULE_NAME: '0750-1405 16 DI 24V DC 3.0ms'
_NODE_ID: 2
_IECIN: %IB58
_IECOUT: %QB16
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_1 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_2 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_3 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_4 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_5 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_6 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_7 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_8 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_DI_V101'
_COMMENT: 'Ch_9 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_DI_V102'
_COMMENT: 'Ch_10 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_DI_V103'
_COMMENT: 'Ch_11 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: '_DI_V104'
_COMMENT: 'Ch_12 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: '_DI_V105'
_COMMENT: 'Ch_13 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: '_DI_V106'
_COMMENT: 'Ch_14 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: '_DI_V107'
_COMMENT: 'Ch_15 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: '_DI_V108'
_COMMENT: 'Ch_16 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX30.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_1_16_Channels'
_INDEX_IN_PARENT: '4'
_MODULE_NAME: '0750-1405 16 DI 24V DC 3.0ms'
_NODE_ID: 3
_IECIN: %IB60
_IECOUT: %QB16
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_DI_V109'
_COMMENT: 'Ch_1 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_DI_V110'
_COMMENT: 'Ch_2 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_DI_V111'
_COMMENT: 'Ch_3 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_DI_V201'
_COMMENT: 'Ch_4 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_DI_V202'
_COMMENT: 'Ch_5 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_DI_V203'
_COMMENT: 'Ch_6 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_DI_V204'
_COMMENT: 'Ch_7 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_DI_V205'
_COMMENT: 'Ch_8 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_DI_V206'
_COMMENT: 'Ch_9 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_DI_V207'
_COMMENT: 'Ch_10 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_DI_V208'
_COMMENT: 'Ch_11 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: '_DI_V209'
_COMMENT: 'Ch_12 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: '_DI_V210'
_COMMENT: 'Ch_13 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: '_DI_V211'
_COMMENT: 'Ch_14 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: '_DI_V301'
_COMMENT: 'Ch_15 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: '_DI_V302'
_COMMENT: 'Ch_16 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX31.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_1_16_Channels'
_INDEX_IN_PARENT: '5'
_MODULE_NAME: '0750-1405 16 DI 24V DC 3.0ms'
_NODE_ID: 4
_IECIN: %IB62
_IECOUT: %QB16
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_DI_V303'
_COMMENT: 'Ch_1 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_DI_V304'
_COMMENT: 'Ch_2 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_DI_V305'
_COMMENT: 'Ch_3 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_DI_V306'
_COMMENT: 'Ch_4 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_DI_V307'
_COMMENT: 'Ch_5 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_DI_V308'
_COMMENT: 'Ch_6 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_DI_V309'
_COMMENT: 'Ch_7 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_DI_V310'
_COMMENT: 'Ch_8 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_DI_V311'
_COMMENT: 'Ch_9 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_DI_V401'
_COMMENT: 'Ch_10 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_DI_V402'
_COMMENT: 'Ch_11 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: '_DI_V403'
_COMMENT: 'Ch_12 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: '_DI_V404'
_COMMENT: 'Ch_13 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: '_DI_V405'
_COMMENT: 'Ch_14 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: '_DI_V406'
_COMMENT: 'Ch_15 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: '_DI_V407'
_COMMENT: 'Ch_16 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX32.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_1_16_Channels'
_INDEX_IN_PARENT: '6'
_MODULE_NAME: '0750-1405 16 DI 24V DC 3.0ms'
_NODE_ID: 5
_IECIN: %IB64
_IECOUT: %QB16
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_DI_V408'
_COMMENT: 'Ch_1 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_DI_V409'
_COMMENT: 'Ch_2 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_DI_V410'
_COMMENT: 'Ch_3 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_DI_V411'
_COMMENT: 'Ch_4 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_DI_V510'
_COMMENT: 'Ch_5 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_DI_V511'
_COMMENT: 'Ch_6 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_DI_V512'
_COMMENT: 'Ch_7 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_DI_V513'
_COMMENT: 'Ch_8 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_DI_V514'
_COMMENT: 'Ch_9 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_DI_V515'
_COMMENT: 'Ch_10 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_DI_V501'
_COMMENT: 'Ch_11 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_12 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_13 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_14 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_15 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_I'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_16 Digital input'
_CHANNEL_MODE: 'I'
_IECADR: %IX33.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_10_16_Channels'
_INDEX_IN_PARENT: '7'
_MODULE_NAME: '0750-1504 16 DO 24V DC 0.5A'
_NODE_ID: 6
_IECIN: %IB66
_IECOUT: %QB16
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_DO_PumpOn_1'
_COMMENT: 'Ch_1 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_DO_PumpOn_2'
_COMMENT: 'Ch_2 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_DO_PumpOn_3'
_COMMENT: 'Ch_3 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_DO_PumpOn_4'
_COMMENT: 'Ch_4 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_HL_Green'
_COMMENT: 'Ch_5 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_HL_Yellow'
_COMMENT: 'Ch_6 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_HL_Red'
_COMMENT: 'Ch_7 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_Alm'
_COMMENT: 'Ch_8 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_Ready_Line_1'
_COMMENT: 'Ch_9 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_Working_Line_1'
_COMMENT: 'Ch_10 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_Working_Pump_1'
_COMMENT: 'Ch_11 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: '_SwitchOnRemotePump_1'
_COMMENT: 'Ch_12 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: '_SwitchOnRemotePump_2'
_COMMENT: 'Ch_13 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: '_Ready_Line_2'
_COMMENT: 'Ch_14 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: '_Working_Line_2'
_COMMENT: 'Ch_15 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: '_Working_Pump_2'
_COMMENT: 'Ch_16 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX8.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_10_16_Channels'
_INDEX_IN_PARENT: '8'
_MODULE_NAME: '0750-1504 16 DO 24V DC 0.5A'
_NODE_ID: 7
_IECIN: %IB68
_IECOUT: %QB16
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_1 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_2 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_Ready_Line_3'
_COMMENT: 'Ch_3 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_Working_Line_3'
_COMMENT: 'Ch_4 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_Working_Pump_3'
_COMMENT: 'Ch_5 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_SwitchOnRemotePump_3'
_COMMENT: 'Ch_6 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_7 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_Ready_Line_4'
_COMMENT: 'Ch_8 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_Working_Line_4'
_COMMENT: 'Ch_9 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_Working_Pump_4'
_COMMENT: 'Ch_10 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_SwitchOnRemotePump_4'
_COMMENT: 'Ch_11 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_12 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_13 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_14 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_15 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_16 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX9.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_10_16_Channels'
_INDEX_IN_PARENT: '9'
_MODULE_NAME: '0750-1504 16 DO 24V DC 0.5A'
_NODE_ID: 8
_IECIN: %IB68
_IECOUT: %QB18
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_DO_V101'
_COMMENT: 'Ch_1 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_DO_V102'
_COMMENT: 'Ch_2 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_DO_V103'
_COMMENT: 'Ch_3 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_DO_V104'
_COMMENT: 'Ch_4 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_DO_V105'
_COMMENT: 'Ch_5 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_DO_V106'
_COMMENT: 'Ch_6 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_DO_V107'
_COMMENT: 'Ch_7 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_DO_V108'
_COMMENT: 'Ch_8 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_DO_V109'
_COMMENT: 'Ch_9 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_DO_V110'
_COMMENT: 'Ch_10 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_DO_V111'
_COMMENT: 'Ch_11 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: '_DO_V201'
_COMMENT: 'Ch_12 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: '_DO_V202'
_COMMENT: 'Ch_13 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: '_DO_V203'
_COMMENT: 'Ch_14 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: '_DO_V204'
_COMMENT: 'Ch_15 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: '_DO_V205'
_COMMENT: 'Ch_16 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX10.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_10_16_Channels'
_INDEX_IN_PARENT: '10'
_MODULE_NAME: '0750-1504 16 DO 24V DC 0.5A'
_NODE_ID: 9
_IECIN: %IB68
_IECOUT: %QB20
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_DO_V206'
_COMMENT: 'Ch_1 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_DO_V207'
_COMMENT: 'Ch_2 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_DO_V208'
_COMMENT: 'Ch_3 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_DO_V209'
_COMMENT: 'Ch_4 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_DO_V210'
_COMMENT: 'Ch_5 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_DO_V211'
_COMMENT: 'Ch_6 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_DO_V301'
_COMMENT: 'Ch_7 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_DO_V302'
_COMMENT: 'Ch_8 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_DO_V303'
_COMMENT: 'Ch_9 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_DO_V304'
_COMMENT: 'Ch_10 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_DO_V305'
_COMMENT: 'Ch_11 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: '_DO_V306'
_COMMENT: 'Ch_12 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_13 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: '_DO_PA1'
_COMMENT: 'Ch_14 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: '_DO_PA2'
_COMMENT: 'Ch_15 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: '_DO_PA3'
_COMMENT: 'Ch_16 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX11.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_10_16_Channels'
_INDEX_IN_PARENT: '11'
_MODULE_NAME: '0750-1504 16 DO 24V DC 0.5A'
_NODE_ID: 10
_IECIN: %IB68
_IECOUT: %QB22
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_DO_V308'
_COMMENT: 'Ch_1 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_DO_V309'
_COMMENT: 'Ch_2 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_DO_V310'
_COMMENT: 'Ch_3 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_DO_V311'
_COMMENT: 'Ch_4 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_DO_V401'
_COMMENT: 'Ch_5 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_DO_V402'
_COMMENT: 'Ch_6 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_DO_V403'
_COMMENT: 'Ch_7 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_DO_V404'
_COMMENT: 'Ch_8 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: '_DO_V405'
_COMMENT: 'Ch_9 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: '_DO_V406'
_COMMENT: 'Ch_10 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: '_DO_V407'
_COMMENT: 'Ch_11 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: '_DO_V408'
_COMMENT: 'Ch_12 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: '_DO_V409'
_COMMENT: 'Ch_13 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: '_DO_V410'
_COMMENT: 'Ch_14 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: '_DO_V411'
_COMMENT: 'Ch_15 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: '_DO_V510'
_COMMENT: 'Ch_16 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX12.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_10_16_Channels'
_INDEX_IN_PARENT: '12'
_MODULE_NAME: '0750-1504 16 DO 24V DC 0.5A'
_NODE_ID: 11
_IECIN: %IB68
_IECOUT: %QB24
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_DO_V511'
_COMMENT: 'Ch_1 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_DO_V512'
_COMMENT: 'Ch_2 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_DO_V513'
_COMMENT: 'Ch_3 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_DO_V514'
_COMMENT: 'Ch_4 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_DO_V515'
_COMMENT: 'Ch_5 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_DO_V501'
_COMMENT: 'Ch_6 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_DO_V307'
_COMMENT: 'Ch_7 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_8 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_9 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_10 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_11 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_12 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: '_DO_PA4'
_COMMENT: 'Ch_13 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: '_DO_PA11'
_COMMENT: 'Ch_14 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: '_DO_PA12'
_COMMENT: 'Ch_15 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'BOOLOnX_Q'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_16 Digital output'
_CHANNEL_MODE: 'Q'
_IECADR: %QX13.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_63_8_Channels'
_INDEX_IN_PARENT: '13'
_MODULE_NAME: '0750-0496 8AI 0-20mA/4-20mA S.E.'
_NODE_ID: 12
_IECIN: %IB56
_IECOUT: %QB8
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_AI_Conc_Line1'
_COMMENT: 'Ch_1 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_AI_Conc_Line2'
_COMMENT: 'Ch_2 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_AI_Conc_Line3'
_COMMENT: 'Ch_3 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_AI_Conc_Line4'
_COMMENT: 'Ch_4 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: '_AI_AccidLevel'
_COMMENT: 'Ch_5 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: '_AI_AlkaliLevel'
_COMMENT: 'Ch_6 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: '_AI_CleanWaterLevel'
_COMMENT: 'Ch_7 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: '_AI_UsedWaterLevel'
_COMMENT: 'Ch_8 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW7
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_63_8_Channels'
_INDEX_IN_PARENT: '14'
_MODULE_NAME: '0750-0496 8AI 0-20mA/4-20mA S.E.'
_NODE_ID: 13
_IECIN: %IB56
_IECOUT: %QB8
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_AI_Flaw_Line1'
_COMMENT: 'Ch_1 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW8
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_AI_Flaw_Line2'
_COMMENT: 'Ch_2 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_AI_Flaw_Line3'
_COMMENT: 'Ch_3 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW10
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_AI_Flaw_Line4'
_COMMENT: 'Ch_4 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_5 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW12
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_6 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_7 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW14
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_8 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_62_4_Channels'
_INDEX_IN_PARENT: '15'
_MODULE_NAME: '0750-0450 4AI RTD/ adj.'
_NODE_ID: 14
_IECIN: %IB72
_IECOUT: %QB8
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_AI_Heater_BackTget_1'
_COMMENT: 'Ch_1 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW16
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_AI_Heater_BackTget_2'
_COMMENT: 'Ch_2 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW17
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_AI_Heater_BackTget_3'
_COMMENT: 'Ch_3 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW18
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_AI_Heater_BackTget_4'
_COMMENT: 'Ch_4 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW19
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_62_4_Channels'
_INDEX_IN_PARENT: '16'
_MODULE_NAME: '0750-0450 4AI RTD/ adj.'
_NODE_ID: 15
_IECIN: %IB88
_IECOUT: %QB8
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_AI_Heater_Tget_1'
_COMMENT: 'Ch_1 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW20
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_AI_Heater_Tget_2'
_COMMENT: 'Ch_2 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW21
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_AI_Heater_Tget_3'
_COMMENT: 'Ch_3 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW22
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_AI_Heater_Tget_4'
_COMMENT: 'Ch_4 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW23
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_62_4_Channels'
_INDEX_IN_PARENT: '17'
_MODULE_NAME: '0750-0450 4AI RTD/ adj.'
_NODE_ID: 16
_IECIN: %IB96
_IECOUT: %QB8
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_AI_Temp_Accid'
_COMMENT: 'Ch_1 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW24
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_AI_Temp_Alkali'
_COMMENT: 'Ch_2 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW25
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_3 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW26
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'INTOnW_I'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: ''
_COMMENT: 'Ch_4 signed Input value'
_CHANNEL_MODE: 'I'
_IECADR: %IW27
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_14_4_Channels'
_INDEX_IN_PARENT: '18'
_MODULE_NAME: '0750-0555 4 AO 4-20mA'
_NODE_ID: 17
_IECIN: %IB104
_IECOUT: %QB8
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'WORDOnW_Q'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_AO_PumpSpeedSet_1'
_COMMENT: 'Ch_1 Analog output'
_CHANNEL_MODE: 'Q'
_IECADR: %QW0
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'WORDOnW_Q'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_AO_PumpSpeedSet_2'
_COMMENT: 'Ch_2 Analog output'
_CHANNEL_MODE: 'Q'
_IECADR: %QW1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'WORDOnW_Q'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_AO_PumpSpeedSet_3'
_COMMENT: 'Ch_3 Analog output'
_CHANNEL_MODE: 'Q'
_IECADR: %QW2
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'WORDOnW_Q'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_AO_PumpSpeedSet_4'
_COMMENT: 'Ch_4 Analog output'
_CHANNEL_MODE: 'Q'
_IECADR: %QW3
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'Type_14_4_Channels'
_INDEX_IN_PARENT: '19'
_MODULE_NAME: '0750-0555 4 AO 4-20mA'
_NODE_ID: 18
_IECIN: %IB112
_IECOUT: %QB8
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_CHANNEL
_SECTION_NAME: 'WORDOnW_Q'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: '_AO_HeaterPowerSet_1'
_COMMENT: 'Ch_1 Analog output'
_CHANNEL_MODE: 'Q'
_IECADR: %QW4
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'WORDOnW_Q'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: '_AO_HeaterPowerSet_2'
_COMMENT: 'Ch_2 Analog output'
_CHANNEL_MODE: 'Q'
_IECADR: %QW5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'WORDOnW_Q'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: '_AO_HeaterPowerSet_3'
_COMMENT: 'Ch_3 Analog output'
_CHANNEL_MODE: 'Q'
_IECADR: %QW6
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'WORDOnW_Q'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: '_AO_HeaterPowerSet_4'
_COMMENT: 'Ch_4 Analog output'
_CHANNEL_MODE: 'Q'
_IECADR: %QW7
_END_CHANNEL
_END_MODULE
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'PFC200MODBUS'
_INDEX_IN_PARENT: '2'
_MODULE_NAME: 'Modbus variables'
_NODE_ID: 1
_IECIN: %IB0
_IECOUT: %QB0
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 2010330101: 0, '1'
_PARAM 2010330102: 0, '1'
_PARAM 2010330201: 0, '1'
_PARAM 2010330202: 0, '502'
_PARAM 2010330203: 0, '600'
_PARAM 2010330301: 0, '1'
_PARAM 2010330302: 0, '502'
_PARAM 2010330401: 0, '0'
_PARAM 2010330402: 0, '1'
_PARAM 2010330403: 0, '5000'
_PARAM 2010330404: 0, '0'
_PARAM 2010330405: 0, '115200'
_PARAM 2010330406: 0, '1'
_PARAM 2010330407: 0, '1'
_PARAM 2010330408: 0, '0'
_PARAM 2010330409: 0, '0'
_END_PARAMETER
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'MB_MASTER'
_INDEX_IN_PARENT: '3'
_MODULE_NAME: 'Modbus-Master'
_NODE_ID: 2
_IECIN: %IB0
_IECOUT: %QB0
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''
_END_MODULE
_END_MODULE
PLC_END


RESOURCE
{event_task : 'start','Called when program starts','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,1,11952}
{event_task : 'stop','Called when program stops','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,2,11952}
{event_task : 'before_reset','Called before reset takes place','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,3,11952}
{event_task : 'after_reset','Called after reset took place','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,4,11952}
{event_task : 'shutdown','Called before shutdown is performed','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,5,11952}
{event_task : 'excpt_watchdog','Software watchdog OF IEC-task expired','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,7,11952}
{event_task : 'excpt_access_violation','Access violation','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,12,11952}
{event_task : 'excpt_dividebyzero','Division BY zero','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,18,11952}
{event_task : 'after_reading_inputs','Called after reading of inputs','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,28,11952}
{event_task : 'before_writing_outputs','Called before writing of outputs','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,29,11952}
{event_task : 'debug_loop','Debug loop at breakpoint','','FUNCTION systemevent: DWORD$R$NVAR_INPUT$R$N  dwEvent: DWORD;$R$N  dwFilter: DWORD;$R$N  dwOwner: DWORD;$R$NEND_VAR$R$N'}{event_task_info : 0,31,11952}
{event_task : 'online_change','Is called after CodeInit() at Online-Change','','FUNCTION systemevent: DWORD VAR_INPUT dwEvent: DWORD; dwFilter: DWORD; dwOwner: DWORD; END_VAR '}{event_task_info : 0,33,11952}
{event_task : 'before_download','Is called before the Download starts','','FUNCTION systemevent: DWORD VAR_INPUT dwEvent: DWORD; dwFilter: DWORD; dwOwner: DWORD; END_VAR '}{event_task_info : 0,34,11952}

END_RESOURCE


_WORKSPACE
_GLOBALVISUALSETTINGS
_VISUALSETTINGSFLAGS : 0,0,0,0
_VISUALSETTINGSFLAGS : '','',''
_VISUALSETTINGSDYNTEXTFILECOUNT : 0
_VISUALBITMAPLISTCOUNT : 0
_END_GLOBALVISUALSETTINGS
_END_WORKSPACE
